/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
'use strict';

var $protobuf = require('protobufjs/minimal');

// Common aliases
var $Reader = $protobuf.Reader; var $Writer = $protobuf.Writer; var $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});

$root.merico = (function() {

  /**
     * Namespace merico.
     * @exports merico
     * @namespace
     */
  var merico = {};

  merico.vdev = (function() {

    /**
         * Namespace vdev.
         * @memberof merico
         * @namespace
         */
    var vdev = {};

    vdev.ResponseStatus = (function() {

      /**
             * Properties of a ResponseStatus.
             * @memberof merico.vdev
             * @interface IResponseStatus
             * @property {merico.vdev.ResponseStatus.StatusCode|null} [code] ResponseStatus code
             * @property {string|null} [message] ResponseStatus message
             */

      /**
             * Constructs a new ResponseStatus.
             * @memberof merico.vdev
             * @classdesc Represents a ResponseStatus.
             * @implements IResponseStatus
             * @constructor
             * @param {merico.vdev.IResponseStatus=} [properties] Properties to set
             */
      function ResponseStatus(properties) {
        if (properties)
        {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
        {if (properties[keys[i]] != null)
        {this[keys[i]] = properties[keys[i]];}}}
      }

      /**
             * ResponseStatus code.
             * @member {merico.vdev.ResponseStatus.StatusCode} code
             * @memberof merico.vdev.ResponseStatus
             * @instance
             */
      ResponseStatus.prototype.code = 0;

      /**
             * ResponseStatus message.
             * @member {string} message
             * @memberof merico.vdev.ResponseStatus
             * @instance
             */
      ResponseStatus.prototype.message = '';

      /**
             * Creates a new ResponseStatus instance using the specified properties.
             * @function create
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {merico.vdev.IResponseStatus=} [properties] Properties to set
             * @returns {merico.vdev.ResponseStatus} ResponseStatus instance
             */
      ResponseStatus.create = function create(properties) {
        return new ResponseStatus(properties);
      };

      /**
             * Encodes the specified ResponseStatus message. Does not implicitly {@link merico.vdev.ResponseStatus.verify|verify} messages.
             * @function encode
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {merico.vdev.IResponseStatus} message ResponseStatus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
      ResponseStatus.encode = function encode(message, writer) {
        if (!writer)
        {writer = $Writer.create();}
        if (message.code != null && message.hasOwnProperty('code'))
        {writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);}
        if (message.message != null && message.hasOwnProperty('message'))
        {writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);}
        return writer;
      };

      /**
             * Encodes the specified ResponseStatus message, length delimited. Does not implicitly {@link merico.vdev.ResponseStatus.verify|verify} messages.
             * @function encodeDelimited
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {merico.vdev.IResponseStatus} message ResponseStatus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
      ResponseStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };

      /**
             * Decodes a ResponseStatus message from the specified reader or buffer.
             * @function decode
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {merico.vdev.ResponseStatus} ResponseStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
      ResponseStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
        {reader = $Reader.create(reader);}
        var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.ResponseStatus();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.code = reader.int32();
              break;
            case 2:
              message.message = reader.string();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };

      /**
             * Decodes a ResponseStatus message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {merico.vdev.ResponseStatus} ResponseStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
      ResponseStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
        {reader = new $Reader(reader);}
        return this.decode(reader, reader.uint32());
      };

      /**
             * Verifies a ResponseStatus message.
             * @function verify
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
      ResponseStatus.verify = function verify(message) {
        if (typeof message !== 'object' || message === null)
        {return 'object expected';}
        if (message.code != null && message.hasOwnProperty('code'))
        {switch (message.code) {
          default:
            return 'code: enum value expected';
          case 0:
          case 401:
          case 500:
          case 1000:
          case 1400:
          case 1401:
          case 1402:
          case 1403:
          case 1404:
          case 1405:
          case 1406:
          case 1407:
          case 1408:
          case 1409:
            break;
        }}
        if (message.message != null && message.hasOwnProperty('message'))
        {if (!$util.isString(message.message))
        {return 'message: string expected';}}
        return null;
      };

      /**
             * Creates a ResponseStatus message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {merico.vdev.ResponseStatus} ResponseStatus
             */
      ResponseStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.merico.vdev.ResponseStatus)
        {return object;}
        var message = new $root.merico.vdev.ResponseStatus();
        switch (object.code) {
          case 'SUCCESS':
          case 0:
            message.code = 0;
            break;
          case 'UNAUTHORIZED':
          case 401:
            message.code = 401;
            break;
          case 'INTERNAL_SERVER_ERROR':
          case 500:
            message.code = 500;
            break;
          case 'SPECIAL_ERROR':
          case 1000:
            message.code = 1000;
            break;
          case 'UNKNOWN':
          case 1400:
            message.code = 1400;
            break;
          case 'OBJECT_NOT_FOUND':
          case 1401:
            message.code = 1401;
            break;
          case 'VALUE_NOT_FOUND':
          case 1402:
            message.code = 1402;
            break;
          case 'VALUE_ALREADY_EXISTS':
          case 1403:
            message.code = 1403;
            break;
          case 'VALUE_OUT_OF_RANGE':
          case 1404:
            message.code = 1404;
            break;
          case 'INVALID_VALUE':
          case 1405:
            message.code = 1405;
            break;
          case 'FAILED_DEPENDENCY':
          case 1406:
            message.code = 1406;
            break;
          case 'FORBIDDEN':
          case 1407:
            message.code = 1407;
            break;
          case 'USERNAME_TAKEN':
          case 1408:
            message.code = 1408;
            break;
          case 'EMAIL_TAKEN':
          case 1409:
            message.code = 1409;
            break;
        }
        if (object.message != null)
        {message.message = String(object.message);}
        return message;
      };

      /**
             * Creates a plain object from a ResponseStatus message. Also converts values to other types if specified.
             * @function toObject
             * @memberof merico.vdev.ResponseStatus
             * @static
             * @param {merico.vdev.ResponseStatus} message ResponseStatus
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
      ResponseStatus.toObject = function toObject(message, options) {
        if (!options)
        {options = {};}
        var object = {};
        if (options.defaults) {
          object.code = options.enums === String ? 'SUCCESS' : 0;
          object.message = '';
        }
        if (message.code != null && message.hasOwnProperty('code'))
        {object.code = options.enums === String ? $root.merico.vdev.ResponseStatus.StatusCode[message.code] : message.code;}
        if (message.message != null && message.hasOwnProperty('message'))
        {object.message = message.message;}
        return object;
      };

      /**
             * Converts this ResponseStatus to JSON.
             * @function toJSON
             * @memberof merico.vdev.ResponseStatus
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
      ResponseStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      /**
             * StatusCode enum.
             * @name merico.vdev.ResponseStatus.StatusCode
             * @enum {string}
             * @property {number} SUCCESS=0 SUCCESS value
             * @property {number} UNAUTHORIZED=401 UNAUTHORIZED value
             * @property {number} INTERNAL_SERVER_ERROR=500 INTERNAL_SERVER_ERROR value
             * @property {number} SPECIAL_ERROR=1000 SPECIAL_ERROR value
             * @property {number} UNKNOWN=1400 UNKNOWN value
             * @property {number} OBJECT_NOT_FOUND=1401 OBJECT_NOT_FOUND value
             * @property {number} VALUE_NOT_FOUND=1402 VALUE_NOT_FOUND value
             * @property {number} VALUE_ALREADY_EXISTS=1403 VALUE_ALREADY_EXISTS value
             * @property {number} VALUE_OUT_OF_RANGE=1404 VALUE_OUT_OF_RANGE value
             * @property {number} INVALID_VALUE=1405 INVALID_VALUE value
             * @property {number} FAILED_DEPENDENCY=1406 FAILED_DEPENDENCY value
             * @property {number} FORBIDDEN=1407 FORBIDDEN value
             * @property {number} USERNAME_TAKEN=1408 USERNAME_TAKEN value
             * @property {number} EMAIL_TAKEN=1409 EMAIL_TAKEN value
             */
      ResponseStatus.StatusCode = (function() {
        var valuesById = {}; var values = Object.create(valuesById);
        values[valuesById[0] = 'SUCCESS'] = 0;
        values[valuesById[401] = 'UNAUTHORIZED'] = 401;
        values[valuesById[500] = 'INTERNAL_SERVER_ERROR'] = 500;
        values[valuesById[1000] = 'SPECIAL_ERROR'] = 1000;
        values[valuesById[1400] = 'UNKNOWN'] = 1400;
        values[valuesById[1401] = 'OBJECT_NOT_FOUND'] = 1401;
        values[valuesById[1402] = 'VALUE_NOT_FOUND'] = 1402;
        values[valuesById[1403] = 'VALUE_ALREADY_EXISTS'] = 1403;
        values[valuesById[1404] = 'VALUE_OUT_OF_RANGE'] = 1404;
        values[valuesById[1405] = 'INVALID_VALUE'] = 1405;
        values[valuesById[1406] = 'FAILED_DEPENDENCY'] = 1406;
        values[valuesById[1407] = 'FORBIDDEN'] = 1407;
        values[valuesById[1408] = 'USERNAME_TAKEN'] = 1408;
        values[valuesById[1409] = 'EMAIL_TAKEN'] = 1409;
        return values;
      })();

      return ResponseStatus;
    })();

    /**
         * SortType enum.
         * @name merico.vdev.SortType
         * @enum {string}
         * @property {number} SORT_NONE=0 SORT_NONE value
         * @property {number} SORT_ASC=1 SORT_ASC value
         * @property {number} SORT_DESC=2 SORT_DESC value
         */
    vdev.SortType = (function() {
      var valuesById = {}; var values = Object.create(valuesById);
      values[valuesById[0] = 'SORT_NONE'] = 0;
      values[valuesById[1] = 'SORT_ASC'] = 1;
      values[valuesById[2] = 'SORT_DESC'] = 2;
      return values;
    })();

    vdev.enterprise = (function() {

      /**
             * Namespace enterprise.
             * @memberof merico.vdev
             * @namespace
             */
      var enterprise = {};

      /**
             * EnvRunType enum.
             * @name merico.vdev.enterprise.EnvRunType
             * @enum {string}
             * @property {number} ONLINE=0 ONLINE value
             * @property {number} LOCAL=1 LOCAL value
             */
      enterprise.EnvRunType = (function() {
        var valuesById = {}; var values = Object.create(valuesById);
        values[valuesById[0] = 'ONLINE'] = 0;
        values[valuesById[1] = 'LOCAL'] = 1;
        return values;
      })();

      enterprise.Team = (function() {

        /**
                 * Properties of a Team.
                 * @memberof merico.vdev.enterprise
                 * @interface ITeam
                 * @property {string|null} [id] Team id
                 * @property {string|null} [managerUserId] Team managerUserId
                 * @property {string|null} [name] Team name
                 * @property {string|null} [numPartnerText] Team numPartnerText
                 * @property {Array.<string>|null} [domains] Team domains
                 * @property {number|Long|null} [createTimestamp] Team createTimestamp
                 * @property {number|Long|null} [updateTimestamp] Team updateTimestamp
                 */

        /**
                 * Constructs a new Team.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a Team.
                 * @implements ITeam
                 * @constructor
                 * @param {merico.vdev.enterprise.ITeam=} [properties] Properties to set
                 */
        function Team(properties) {
          this.domains = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Team id.
                 * @member {string} id
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.id = '';

        /**
                 * Team managerUserId.
                 * @member {string} managerUserId
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.managerUserId = '';

        /**
                 * Team name.
                 * @member {string} name
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.name = '';

        /**
                 * Team numPartnerText.
                 * @member {string} numPartnerText
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.numPartnerText = '';

        /**
                 * Team domains.
                 * @member {Array.<string>} domains
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.domains = $util.emptyArray;

        /**
                 * Team createTimestamp.
                 * @member {number|Long} createTimestamp
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.createTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * Team updateTimestamp.
                 * @member {number|Long} updateTimestamp
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 */
        Team.prototype.updateTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * Creates a new Team instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {merico.vdev.enterprise.ITeam=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.Team} Team instance
                 */
        Team.create = function create(properties) {
          return new Team(properties);
        };

        /**
                 * Encodes the specified Team message. Does not implicitly {@link merico.vdev.enterprise.Team.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {merico.vdev.enterprise.ITeam} message Team message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        Team.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.id != null && message.hasOwnProperty('id'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);}
          if (message.name != null && message.hasOwnProperty('name'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);}
          if (message.domains != null && message.domains.length)
          {for (var i = 0; i < message.domains.length; ++i)
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.domains[i]);}}
          if (message.managerUserId != null && message.hasOwnProperty('managerUserId'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.managerUserId);}
          if (message.numPartnerText != null && message.hasOwnProperty('numPartnerText'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.numPartnerText);}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {writer.uint32(/* id 16, wireType 0 =*/128).int64(message.createTimestamp);}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {writer.uint32(/* id 17, wireType 0 =*/136).int64(message.updateTimestamp);}
          return writer;
        };

        /**
                 * Encodes the specified Team message, length delimited. Does not implicitly {@link merico.vdev.enterprise.Team.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {merico.vdev.enterprise.ITeam} message Team message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        Team.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a Team message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.Team} Team
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        Team.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.Team();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 4:
                message.managerUserId = reader.string();
                break;
              case 2:
                message.name = reader.string();
                break;
              case 5:
                message.numPartnerText = reader.string();
                break;
              case 3:
                if (!(message.domains && message.domains.length))
                {message.domains = [];}
                message.domains.push(reader.string());
                break;
              case 16:
                message.createTimestamp = reader.int64();
                break;
              case 17:
                message.updateTimestamp = reader.int64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a Team message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.Team} Team
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        Team.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a Team message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        Team.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.id != null && message.hasOwnProperty('id'))
          {if (!$util.isString(message.id))
          {return 'id: string expected';}}
          if (message.managerUserId != null && message.hasOwnProperty('managerUserId'))
          {if (!$util.isString(message.managerUserId))
          {return 'managerUserId: string expected';}}
          if (message.name != null && message.hasOwnProperty('name'))
          {if (!$util.isString(message.name))
          {return 'name: string expected';}}
          if (message.numPartnerText != null && message.hasOwnProperty('numPartnerText'))
          {if (!$util.isString(message.numPartnerText))
          {return 'numPartnerText: string expected';}}
          if (message.domains != null && message.hasOwnProperty('domains')) {
            if (!Array.isArray(message.domains))
            {return 'domains: array expected';}
            for (var i = 0; i < message.domains.length; ++i)
            {if (!$util.isString(message.domains[i]))
            {return 'domains: string[] expected';}}
          }
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (!$util.isInteger(message.createTimestamp) && !(message.createTimestamp && $util.isInteger(message.createTimestamp.low) && $util.isInteger(message.createTimestamp.high)))
          {return 'createTimestamp: integer|Long expected';}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (!$util.isInteger(message.updateTimestamp) && !(message.updateTimestamp && $util.isInteger(message.updateTimestamp.low) && $util.isInteger(message.updateTimestamp.high)))
          {return 'updateTimestamp: integer|Long expected';}}
          return null;
        };

        /**
                 * Creates a Team message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.Team} Team
                 */
        Team.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.Team)
          {return object;}
          var message = new $root.merico.vdev.enterprise.Team();
          if (object.id != null)
          {message.id = String(object.id);}
          if (object.managerUserId != null)
          {message.managerUserId = String(object.managerUserId);}
          if (object.name != null)
          {message.name = String(object.name);}
          if (object.numPartnerText != null)
          {message.numPartnerText = String(object.numPartnerText);}
          if (object.domains) {
            if (!Array.isArray(object.domains))
            {throw TypeError('.merico.vdev.enterprise.Team.domains: array expected');}
            message.domains = [];
            for (var i = 0; i < object.domains.length; ++i)
            {message.domains[i] = String(object.domains[i]);}
          }
          if (object.createTimestamp != null)
          {if ($util.Long)
          {(message.createTimestamp = $util.Long.fromValue(object.createTimestamp)).unsigned = false;}
          else if (typeof object.createTimestamp === 'string')
          {message.createTimestamp = parseInt(object.createTimestamp, 10);}
          else if (typeof object.createTimestamp === 'number')
          {message.createTimestamp = object.createTimestamp;}
          else if (typeof object.createTimestamp === 'object')
          {message.createTimestamp = new $util.LongBits(object.createTimestamp.low >>> 0, object.createTimestamp.high >>> 0).toNumber();}}
          if (object.updateTimestamp != null)
          {if ($util.Long)
          {(message.updateTimestamp = $util.Long.fromValue(object.updateTimestamp)).unsigned = false;}
          else if (typeof object.updateTimestamp === 'string')
          {message.updateTimestamp = parseInt(object.updateTimestamp, 10);}
          else if (typeof object.updateTimestamp === 'number')
          {message.updateTimestamp = object.updateTimestamp;}
          else if (typeof object.updateTimestamp === 'object')
          {message.updateTimestamp = new $util.LongBits(object.updateTimestamp.low >>> 0, object.updateTimestamp.high >>> 0).toNumber();}}
          return message;
        };

        /**
                 * Creates a plain object from a Team message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.Team
                 * @static
                 * @param {merico.vdev.enterprise.Team} message Team
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        Team.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.domains = [];}
          if (options.defaults) {
            object.id = '';
            object.name = '';
            object.managerUserId = '';
            object.numPartnerText = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.createTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.createTimestamp = options.longs === String ? '0' : 0;}
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.updateTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.updateTimestamp = options.longs === String ? '0' : 0;}
          }
          if (message.id != null && message.hasOwnProperty('id'))
          {object.id = message.id;}
          if (message.name != null && message.hasOwnProperty('name'))
          {object.name = message.name;}
          if (message.domains && message.domains.length) {
            object.domains = [];
            for (var j = 0; j < message.domains.length; ++j)
            {object.domains[j] = message.domains[j];}
          }
          if (message.managerUserId != null && message.hasOwnProperty('managerUserId'))
          {object.managerUserId = message.managerUserId;}
          if (message.numPartnerText != null && message.hasOwnProperty('numPartnerText'))
          {object.numPartnerText = message.numPartnerText;}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (typeof message.createTimestamp === 'number')
          {object.createTimestamp = options.longs === String ? String(message.createTimestamp) : message.createTimestamp;}
          else
          {object.createTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.createTimestamp) : options.longs === Number ? new $util.LongBits(message.createTimestamp.low >>> 0, message.createTimestamp.high >>> 0).toNumber() : message.createTimestamp;}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (typeof message.updateTimestamp === 'number')
          {object.updateTimestamp = options.longs === String ? String(message.updateTimestamp) : message.updateTimestamp;}
          else
          {object.updateTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.updateTimestamp) : options.longs === Number ? new $util.LongBits(message.updateTimestamp.low >>> 0, message.updateTimestamp.high >>> 0).toNumber() : message.updateTimestamp;}}
          return object;
        };

        /**
                 * Converts this Team to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.Team
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        Team.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Team;
      })();

      enterprise.TeamUser = (function() {

        /**
                 * Properties of a TeamUser.
                 * @memberof merico.vdev.enterprise
                 * @interface ITeamUser
                 * @property {string|null} [id] TeamUser id
                 * @property {string|null} [teamId] TeamUser teamId
                 * @property {string|null} [userId] TeamUser userId
                 * @property {string|null} [jobNumber] TeamUser jobNumber
                 * @property {string|null} [title] TeamUser title
                 * @property {string|null} [name] TeamUser name
                 * @property {number|null} [salary] TeamUser salary
                 * @property {string|null} [rank] TeamUser rank
                 * @property {string|null} [promotionDate] TeamUser promotionDate
                 * @property {number|Long|null} [createTimestamp] TeamUser createTimestamp
                 * @property {number|Long|null} [updateTimestamp] TeamUser updateTimestamp
                 */

        /**
                 * Constructs a new TeamUser.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a TeamUser.
                 * @implements ITeamUser
                 * @constructor
                 * @param {merico.vdev.enterprise.ITeamUser=} [properties] Properties to set
                 */
        function TeamUser(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * TeamUser id.
                 * @member {string} id
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.id = '';

        /**
                 * TeamUser teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.teamId = '';

        /**
                 * TeamUser userId.
                 * @member {string} userId
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.userId = '';

        /**
                 * TeamUser jobNumber.
                 * @member {string} jobNumber
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.jobNumber = '';

        /**
                 * TeamUser title.
                 * @member {string} title
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.title = '';

        /**
                 * TeamUser name.
                 * @member {string} name
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.name = '';

        /**
                 * TeamUser salary.
                 * @member {number} salary
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.salary = 0;

        /**
                 * TeamUser rank.
                 * @member {string} rank
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.rank = '';

        /**
                 * TeamUser promotionDate.
                 * @member {string} promotionDate
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.promotionDate = '';

        /**
                 * TeamUser createTimestamp.
                 * @member {number|Long} createTimestamp
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.createTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * TeamUser updateTimestamp.
                 * @member {number|Long} updateTimestamp
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 */
        TeamUser.prototype.updateTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * Creates a new TeamUser instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {merico.vdev.enterprise.ITeamUser=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.TeamUser} TeamUser instance
                 */
        TeamUser.create = function create(properties) {
          return new TeamUser(properties);
        };

        /**
                 * Encodes the specified TeamUser message. Does not implicitly {@link merico.vdev.enterprise.TeamUser.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {merico.vdev.enterprise.ITeamUser} message TeamUser message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TeamUser.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.id != null && message.hasOwnProperty('id'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamId);}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);}
          if (message.title != null && message.hasOwnProperty('title'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.title);}
          if (message.name != null && message.hasOwnProperty('name'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);}
          if (message.salary != null && message.hasOwnProperty('salary'))
          {writer.uint32(/* id 6, wireType 5 =*/53).float(message.salary);}
          if (message.rank != null && message.hasOwnProperty('rank'))
          {writer.uint32(/* id 7, wireType 2 =*/58).string(message.rank);}
          if (message.promotionDate != null && message.hasOwnProperty('promotionDate'))
          {writer.uint32(/* id 8, wireType 2 =*/66).string(message.promotionDate);}
          if (message.jobNumber != null && message.hasOwnProperty('jobNumber'))
          {writer.uint32(/* id 9, wireType 2 =*/74).string(message.jobNumber);}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {writer.uint32(/* id 16, wireType 0 =*/128).int64(message.createTimestamp);}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {writer.uint32(/* id 17, wireType 0 =*/136).int64(message.updateTimestamp);}
          return writer;
        };

        /**
                 * Encodes the specified TeamUser message, length delimited. Does not implicitly {@link merico.vdev.enterprise.TeamUser.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {merico.vdev.enterprise.ITeamUser} message TeamUser message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TeamUser.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a TeamUser message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.TeamUser} TeamUser
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TeamUser.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.TeamUser();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.teamId = reader.string();
                break;
              case 3:
                message.userId = reader.string();
                break;
              case 9:
                message.jobNumber = reader.string();
                break;
              case 4:
                message.title = reader.string();
                break;
              case 5:
                message.name = reader.string();
                break;
              case 6:
                message.salary = reader.float();
                break;
              case 7:
                message.rank = reader.string();
                break;
              case 8:
                message.promotionDate = reader.string();
                break;
              case 16:
                message.createTimestamp = reader.int64();
                break;
              case 17:
                message.updateTimestamp = reader.int64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a TeamUser message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.TeamUser} TeamUser
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TeamUser.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a TeamUser message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        TeamUser.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.id != null && message.hasOwnProperty('id'))
          {if (!$util.isString(message.id))
          {return 'id: string expected';}}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.jobNumber != null && message.hasOwnProperty('jobNumber'))
          {if (!$util.isString(message.jobNumber))
          {return 'jobNumber: string expected';}}
          if (message.title != null && message.hasOwnProperty('title'))
          {if (!$util.isString(message.title))
          {return 'title: string expected';}}
          if (message.name != null && message.hasOwnProperty('name'))
          {if (!$util.isString(message.name))
          {return 'name: string expected';}}
          if (message.salary != null && message.hasOwnProperty('salary'))
          {if (typeof message.salary !== 'number')
          {return 'salary: number expected';}}
          if (message.rank != null && message.hasOwnProperty('rank'))
          {if (!$util.isString(message.rank))
          {return 'rank: string expected';}}
          if (message.promotionDate != null && message.hasOwnProperty('promotionDate'))
          {if (!$util.isString(message.promotionDate))
          {return 'promotionDate: string expected';}}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (!$util.isInteger(message.createTimestamp) && !(message.createTimestamp && $util.isInteger(message.createTimestamp.low) && $util.isInteger(message.createTimestamp.high)))
          {return 'createTimestamp: integer|Long expected';}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (!$util.isInteger(message.updateTimestamp) && !(message.updateTimestamp && $util.isInteger(message.updateTimestamp.low) && $util.isInteger(message.updateTimestamp.high)))
          {return 'updateTimestamp: integer|Long expected';}}
          return null;
        };

        /**
                 * Creates a TeamUser message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.TeamUser} TeamUser
                 */
        TeamUser.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.TeamUser)
          {return object;}
          var message = new $root.merico.vdev.enterprise.TeamUser();
          if (object.id != null)
          {message.id = String(object.id);}
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.jobNumber != null)
          {message.jobNumber = String(object.jobNumber);}
          if (object.title != null)
          {message.title = String(object.title);}
          if (object.name != null)
          {message.name = String(object.name);}
          if (object.salary != null)
          {message.salary = Number(object.salary);}
          if (object.rank != null)
          {message.rank = String(object.rank);}
          if (object.promotionDate != null)
          {message.promotionDate = String(object.promotionDate);}
          if (object.createTimestamp != null)
          {if ($util.Long)
          {(message.createTimestamp = $util.Long.fromValue(object.createTimestamp)).unsigned = false;}
          else if (typeof object.createTimestamp === 'string')
          {message.createTimestamp = parseInt(object.createTimestamp, 10);}
          else if (typeof object.createTimestamp === 'number')
          {message.createTimestamp = object.createTimestamp;}
          else if (typeof object.createTimestamp === 'object')
          {message.createTimestamp = new $util.LongBits(object.createTimestamp.low >>> 0, object.createTimestamp.high >>> 0).toNumber();}}
          if (object.updateTimestamp != null)
          {if ($util.Long)
          {(message.updateTimestamp = $util.Long.fromValue(object.updateTimestamp)).unsigned = false;}
          else if (typeof object.updateTimestamp === 'string')
          {message.updateTimestamp = parseInt(object.updateTimestamp, 10);}
          else if (typeof object.updateTimestamp === 'number')
          {message.updateTimestamp = object.updateTimestamp;}
          else if (typeof object.updateTimestamp === 'object')
          {message.updateTimestamp = new $util.LongBits(object.updateTimestamp.low >>> 0, object.updateTimestamp.high >>> 0).toNumber();}}
          return message;
        };

        /**
                 * Creates a plain object from a TeamUser message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @static
                 * @param {merico.vdev.enterprise.TeamUser} message TeamUser
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        TeamUser.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.id = '';
            object.teamId = '';
            object.userId = '';
            object.title = '';
            object.name = '';
            object.salary = 0;
            object.rank = '';
            object.promotionDate = '';
            object.jobNumber = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.createTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.createTimestamp = options.longs === String ? '0' : 0;}
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.updateTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.updateTimestamp = options.longs === String ? '0' : 0;}
          }
          if (message.id != null && message.hasOwnProperty('id'))
          {object.id = message.id;}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.title != null && message.hasOwnProperty('title'))
          {object.title = message.title;}
          if (message.name != null && message.hasOwnProperty('name'))
          {object.name = message.name;}
          if (message.salary != null && message.hasOwnProperty('salary'))
          {object.salary = options.json && !isFinite(message.salary) ? String(message.salary) : message.salary;}
          if (message.rank != null && message.hasOwnProperty('rank'))
          {object.rank = message.rank;}
          if (message.promotionDate != null && message.hasOwnProperty('promotionDate'))
          {object.promotionDate = message.promotionDate;}
          if (message.jobNumber != null && message.hasOwnProperty('jobNumber'))
          {object.jobNumber = message.jobNumber;}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (typeof message.createTimestamp === 'number')
          {object.createTimestamp = options.longs === String ? String(message.createTimestamp) : message.createTimestamp;}
          else
          {object.createTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.createTimestamp) : options.longs === Number ? new $util.LongBits(message.createTimestamp.low >>> 0, message.createTimestamp.high >>> 0).toNumber() : message.createTimestamp;}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (typeof message.updateTimestamp === 'number')
          {object.updateTimestamp = options.longs === String ? String(message.updateTimestamp) : message.updateTimestamp;}
          else
          {object.updateTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.updateTimestamp) : options.longs === Number ? new $util.LongBits(message.updateTimestamp.low >>> 0, message.updateTimestamp.high >>> 0).toNumber() : message.updateTimestamp;}}
          return object;
        };

        /**
                 * Converts this TeamUser to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.TeamUser
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        TeamUser.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TeamUser;
      })();

      enterprise.License = (function() {

        /**
                 * Properties of a License.
                 * @memberof merico.vdev.enterprise
                 * @interface ILicense
                 * @property {string|null} [id] License id
                 * @property {string|null} [teamId] License teamId
                 * @property {string|null} [teamLocalMachineId] License teamLocalMachineId
                 * @property {string|null} [version] License version
                 * @property {string|null} [key] License key
                 * @property {number|Long|null} [expiredTimestamp] License expiredTimestamp
                 * @property {merico.vdev.enterprise.License.ILicenseData|null} [data] License data
                 * @property {number|Long|null} [createTimestamp] License createTimestamp
                 * @property {number|Long|null} [updateTimestamp] License updateTimestamp
                 */

        /**
                 * Constructs a new License.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a License.
                 * @implements ILicense
                 * @constructor
                 * @param {merico.vdev.enterprise.ILicense=} [properties] Properties to set
                 */
        function License(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * License id.
                 * @member {string} id
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.id = '';

        /**
                 * License teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.teamId = '';

        /**
                 * License teamLocalMachineId.
                 * @member {string} teamLocalMachineId
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.teamLocalMachineId = '';

        /**
                 * License version.
                 * @member {string} version
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.version = '';

        /**
                 * License key.
                 * @member {string} key
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.key = '';

        /**
                 * License expiredTimestamp.
                 * @member {number|Long} expiredTimestamp
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.expiredTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * License data.
                 * @member {merico.vdev.enterprise.License.ILicenseData|null|undefined} data
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.data = null;

        /**
                 * License createTimestamp.
                 * @member {number|Long} createTimestamp
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.createTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * License updateTimestamp.
                 * @member {number|Long} updateTimestamp
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 */
        License.prototype.updateTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * Creates a new License instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {merico.vdev.enterprise.ILicense=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.License} License instance
                 */
        License.create = function create(properties) {
          return new License(properties);
        };

        /**
                 * Encodes the specified License message. Does not implicitly {@link merico.vdev.enterprise.License.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {merico.vdev.enterprise.ILicense} message License message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        License.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.id != null && message.hasOwnProperty('id'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamId);}
          if (message.teamLocalMachineId != null && message.hasOwnProperty('teamLocalMachineId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.teamLocalMachineId);}
          if (message.version != null && message.hasOwnProperty('version'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.version);}
          if (message.key != null && message.hasOwnProperty('key'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.key);}
          if (message.expiredTimestamp != null && message.hasOwnProperty('expiredTimestamp'))
          {writer.uint32(/* id 6, wireType 0 =*/48).int64(message.expiredTimestamp);}
          if (message.data != null && message.hasOwnProperty('data'))
          {$root.merico.vdev.enterprise.License.LicenseData.encode(message.data, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {writer.uint32(/* id 16, wireType 0 =*/128).int64(message.createTimestamp);}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {writer.uint32(/* id 17, wireType 0 =*/136).int64(message.updateTimestamp);}
          return writer;
        };

        /**
                 * Encodes the specified License message, length delimited. Does not implicitly {@link merico.vdev.enterprise.License.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {merico.vdev.enterprise.ILicense} message License message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        License.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a License message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.License} License
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        License.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.License();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.teamId = reader.string();
                break;
              case 3:
                message.teamLocalMachineId = reader.string();
                break;
              case 4:
                message.version = reader.string();
                break;
              case 5:
                message.key = reader.string();
                break;
              case 6:
                message.expiredTimestamp = reader.int64();
                break;
              case 15:
                message.data = $root.merico.vdev.enterprise.License.LicenseData.decode(reader, reader.uint32());
                break;
              case 16:
                message.createTimestamp = reader.int64();
                break;
              case 17:
                message.updateTimestamp = reader.int64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a License message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.License} License
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        License.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a License message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        License.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.id != null && message.hasOwnProperty('id'))
          {if (!$util.isString(message.id))
          {return 'id: string expected';}}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.teamLocalMachineId != null && message.hasOwnProperty('teamLocalMachineId'))
          {if (!$util.isString(message.teamLocalMachineId))
          {return 'teamLocalMachineId: string expected';}}
          if (message.version != null && message.hasOwnProperty('version'))
          {if (!$util.isString(message.version))
          {return 'version: string expected';}}
          if (message.key != null && message.hasOwnProperty('key'))
          {if (!$util.isString(message.key))
          {return 'key: string expected';}}
          if (message.expiredTimestamp != null && message.hasOwnProperty('expiredTimestamp'))
          {if (!$util.isInteger(message.expiredTimestamp) && !(message.expiredTimestamp && $util.isInteger(message.expiredTimestamp.low) && $util.isInteger(message.expiredTimestamp.high)))
          {return 'expiredTimestamp: integer|Long expected';}}
          if (message.data != null && message.hasOwnProperty('data')) {
            var error = $root.merico.vdev.enterprise.License.LicenseData.verify(message.data);
            if (error)
            {return 'data.' + error;}
          }
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (!$util.isInteger(message.createTimestamp) && !(message.createTimestamp && $util.isInteger(message.createTimestamp.low) && $util.isInteger(message.createTimestamp.high)))
          {return 'createTimestamp: integer|Long expected';}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (!$util.isInteger(message.updateTimestamp) && !(message.updateTimestamp && $util.isInteger(message.updateTimestamp.low) && $util.isInteger(message.updateTimestamp.high)))
          {return 'updateTimestamp: integer|Long expected';}}
          return null;
        };

        /**
                 * Creates a License message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.License} License
                 */
        License.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.License)
          {return object;}
          var message = new $root.merico.vdev.enterprise.License();
          if (object.id != null)
          {message.id = String(object.id);}
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.teamLocalMachineId != null)
          {message.teamLocalMachineId = String(object.teamLocalMachineId);}
          if (object.version != null)
          {message.version = String(object.version);}
          if (object.key != null)
          {message.key = String(object.key);}
          if (object.expiredTimestamp != null)
          {if ($util.Long)
          {(message.expiredTimestamp = $util.Long.fromValue(object.expiredTimestamp)).unsigned = false;}
          else if (typeof object.expiredTimestamp === 'string')
          {message.expiredTimestamp = parseInt(object.expiredTimestamp, 10);}
          else if (typeof object.expiredTimestamp === 'number')
          {message.expiredTimestamp = object.expiredTimestamp;}
          else if (typeof object.expiredTimestamp === 'object')
          {message.expiredTimestamp = new $util.LongBits(object.expiredTimestamp.low >>> 0, object.expiredTimestamp.high >>> 0).toNumber();}}
          if (object.data != null) {
            if (typeof object.data !== 'object')
            {throw TypeError('.merico.vdev.enterprise.License.data: object expected');}
            message.data = $root.merico.vdev.enterprise.License.LicenseData.fromObject(object.data);
          }
          if (object.createTimestamp != null)
          {if ($util.Long)
          {(message.createTimestamp = $util.Long.fromValue(object.createTimestamp)).unsigned = false;}
          else if (typeof object.createTimestamp === 'string')
          {message.createTimestamp = parseInt(object.createTimestamp, 10);}
          else if (typeof object.createTimestamp === 'number')
          {message.createTimestamp = object.createTimestamp;}
          else if (typeof object.createTimestamp === 'object')
          {message.createTimestamp = new $util.LongBits(object.createTimestamp.low >>> 0, object.createTimestamp.high >>> 0).toNumber();}}
          if (object.updateTimestamp != null)
          {if ($util.Long)
          {(message.updateTimestamp = $util.Long.fromValue(object.updateTimestamp)).unsigned = false;}
          else if (typeof object.updateTimestamp === 'string')
          {message.updateTimestamp = parseInt(object.updateTimestamp, 10);}
          else if (typeof object.updateTimestamp === 'number')
          {message.updateTimestamp = object.updateTimestamp;}
          else if (typeof object.updateTimestamp === 'object')
          {message.updateTimestamp = new $util.LongBits(object.updateTimestamp.low >>> 0, object.updateTimestamp.high >>> 0).toNumber();}}
          return message;
        };

        /**
                 * Creates a plain object from a License message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.License
                 * @static
                 * @param {merico.vdev.enterprise.License} message License
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        License.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.id = '';
            object.teamId = '';
            object.teamLocalMachineId = '';
            object.version = '';
            object.key = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.expiredTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.expiredTimestamp = options.longs === String ? '0' : 0;}
            object.data = null;
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.createTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.createTimestamp = options.longs === String ? '0' : 0;}
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.updateTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.updateTimestamp = options.longs === String ? '0' : 0;}
          }
          if (message.id != null && message.hasOwnProperty('id'))
          {object.id = message.id;}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.teamLocalMachineId != null && message.hasOwnProperty('teamLocalMachineId'))
          {object.teamLocalMachineId = message.teamLocalMachineId;}
          if (message.version != null && message.hasOwnProperty('version'))
          {object.version = message.version;}
          if (message.key != null && message.hasOwnProperty('key'))
          {object.key = message.key;}
          if (message.expiredTimestamp != null && message.hasOwnProperty('expiredTimestamp'))
          {if (typeof message.expiredTimestamp === 'number')
          {object.expiredTimestamp = options.longs === String ? String(message.expiredTimestamp) : message.expiredTimestamp;}
          else
          {object.expiredTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.expiredTimestamp) : options.longs === Number ? new $util.LongBits(message.expiredTimestamp.low >>> 0, message.expiredTimestamp.high >>> 0).toNumber() : message.expiredTimestamp;}}
          if (message.data != null && message.hasOwnProperty('data'))
          {object.data = $root.merico.vdev.enterprise.License.LicenseData.toObject(message.data, options);}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (typeof message.createTimestamp === 'number')
          {object.createTimestamp = options.longs === String ? String(message.createTimestamp) : message.createTimestamp;}
          else
          {object.createTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.createTimestamp) : options.longs === Number ? new $util.LongBits(message.createTimestamp.low >>> 0, message.createTimestamp.high >>> 0).toNumber() : message.createTimestamp;}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (typeof message.updateTimestamp === 'number')
          {object.updateTimestamp = options.longs === String ? String(message.updateTimestamp) : message.updateTimestamp;}
          else
          {object.updateTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.updateTimestamp) : options.longs === Number ? new $util.LongBits(message.updateTimestamp.low >>> 0, message.updateTimestamp.high >>> 0).toNumber() : message.updateTimestamp;}}
          return object;
        };

        /**
                 * Converts this License to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.License
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        License.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        License.LicenseData = (function() {

          /**
                     * Properties of a LicenseData.
                     * @memberof merico.vdev.enterprise.License
                     * @interface ILicenseData
                     * @property {Array.<merico.vdev.enterprise.ITeam>|null} [teams] LicenseData teams
                     * @property {Array.<merico.vdev.enterprise.ITeamUser>|null} [teamUsers] LicenseData teamUsers
                     * @property {Array.<merico.vdev.enterprise.License.LicenseData.IUserPack>|null} [users] LicenseData users
                     * @property {Array.<merico.vdev.enterprise.ITeamLocalMachine>|null} [teamLocalMachines] LicenseData teamLocalMachines
                     */

          /**
                     * Constructs a new LicenseData.
                     * @memberof merico.vdev.enterprise.License
                     * @classdesc Represents a LicenseData.
                     * @implements ILicenseData
                     * @constructor
                     * @param {merico.vdev.enterprise.License.ILicenseData=} [properties] Properties to set
                     */
          function LicenseData(properties) {
            this.teams = [];
            this.teamUsers = [];
            this.users = [];
            this.teamLocalMachines = [];
            if (properties)
            {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            {if (properties[keys[i]] != null)
            {this[keys[i]] = properties[keys[i]];}}}
          }

          /**
                     * LicenseData teams.
                     * @member {Array.<merico.vdev.enterprise.ITeam>} teams
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @instance
                     */
          LicenseData.prototype.teams = $util.emptyArray;

          /**
                     * LicenseData teamUsers.
                     * @member {Array.<merico.vdev.enterprise.ITeamUser>} teamUsers
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @instance
                     */
          LicenseData.prototype.teamUsers = $util.emptyArray;

          /**
                     * LicenseData users.
                     * @member {Array.<merico.vdev.enterprise.License.LicenseData.IUserPack>} users
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @instance
                     */
          LicenseData.prototype.users = $util.emptyArray;

          /**
                     * LicenseData teamLocalMachines.
                     * @member {Array.<merico.vdev.enterprise.ITeamLocalMachine>} teamLocalMachines
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @instance
                     */
          LicenseData.prototype.teamLocalMachines = $util.emptyArray;

          /**
                     * Creates a new LicenseData instance using the specified properties.
                     * @function create
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {merico.vdev.enterprise.License.ILicenseData=} [properties] Properties to set
                     * @returns {merico.vdev.enterprise.License.LicenseData} LicenseData instance
                     */
          LicenseData.create = function create(properties) {
            return new LicenseData(properties);
          };

          /**
                     * Encodes the specified LicenseData message. Does not implicitly {@link merico.vdev.enterprise.License.LicenseData.verify|verify} messages.
                     * @function encode
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {merico.vdev.enterprise.License.ILicenseData} message LicenseData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          LicenseData.encode = function encode(message, writer) {
            if (!writer)
            {writer = $Writer.create();}
            if (message.teams != null && message.teams.length)
            {for (var i = 0; i < message.teams.length; ++i)
            {$root.merico.vdev.enterprise.Team.encode(message.teams[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}}
            if (message.teamUsers != null && message.teamUsers.length)
            {for (var i = 0; i < message.teamUsers.length; ++i)
            {$root.merico.vdev.enterprise.TeamUser.encode(message.teamUsers[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}}
            if (message.users != null && message.users.length)
            {for (var i = 0; i < message.users.length; ++i)
            {$root.merico.vdev.enterprise.License.LicenseData.UserPack.encode(message.users[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}}
            if (message.teamLocalMachines != null && message.teamLocalMachines.length)
            {for (var i = 0; i < message.teamLocalMachines.length; ++i)
            {$root.merico.vdev.enterprise.TeamLocalMachine.encode(message.teamLocalMachines[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();}}
            return writer;
          };

          /**
                     * Encodes the specified LicenseData message, length delimited. Does not implicitly {@link merico.vdev.enterprise.License.LicenseData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {merico.vdev.enterprise.License.ILicenseData} message LicenseData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          LicenseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };

          /**
                     * Decodes a LicenseData message from the specified reader or buffer.
                     * @function decode
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {merico.vdev.enterprise.License.LicenseData} LicenseData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          LicenseData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
            {reader = $Reader.create(reader);}
            var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.License.LicenseData();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.teams && message.teams.length))
                  {message.teams = [];}
                  message.teams.push($root.merico.vdev.enterprise.Team.decode(reader, reader.uint32()));
                  break;
                case 2:
                  if (!(message.teamUsers && message.teamUsers.length))
                  {message.teamUsers = [];}
                  message.teamUsers.push($root.merico.vdev.enterprise.TeamUser.decode(reader, reader.uint32()));
                  break;
                case 3:
                  if (!(message.users && message.users.length))
                  {message.users = [];}
                  message.users.push($root.merico.vdev.enterprise.License.LicenseData.UserPack.decode(reader, reader.uint32()));
                  break;
                case 4:
                  if (!(message.teamLocalMachines && message.teamLocalMachines.length))
                  {message.teamLocalMachines = [];}
                  message.teamLocalMachines.push($root.merico.vdev.enterprise.TeamLocalMachine.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };

          /**
                     * Decodes a LicenseData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {merico.vdev.enterprise.License.LicenseData} LicenseData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          LicenseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
            {reader = new $Reader(reader);}
            return this.decode(reader, reader.uint32());
          };

          /**
                     * Verifies a LicenseData message.
                     * @function verify
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
          LicenseData.verify = function verify(message) {
            if (typeof message !== 'object' || message === null)
            {return 'object expected';}
            if (message.teams != null && message.hasOwnProperty('teams')) {
              if (!Array.isArray(message.teams))
              {return 'teams: array expected';}
              for (var i = 0; i < message.teams.length; ++i) {
                var error = $root.merico.vdev.enterprise.Team.verify(message.teams[i]);
                if (error)
                {return 'teams.' + error;}
              }
            }
            if (message.teamUsers != null && message.hasOwnProperty('teamUsers')) {
              if (!Array.isArray(message.teamUsers))
              {return 'teamUsers: array expected';}
              for (var i = 0; i < message.teamUsers.length; ++i) {
                var error = $root.merico.vdev.enterprise.TeamUser.verify(message.teamUsers[i]);
                if (error)
                {return 'teamUsers.' + error;}
              }
            }
            if (message.users != null && message.hasOwnProperty('users')) {
              if (!Array.isArray(message.users))
              {return 'users: array expected';}
              for (var i = 0; i < message.users.length; ++i) {
                var error = $root.merico.vdev.enterprise.License.LicenseData.UserPack.verify(message.users[i]);
                if (error)
                {return 'users.' + error;}
              }
            }
            if (message.teamLocalMachines != null && message.hasOwnProperty('teamLocalMachines')) {
              if (!Array.isArray(message.teamLocalMachines))
              {return 'teamLocalMachines: array expected';}
              for (var i = 0; i < message.teamLocalMachines.length; ++i) {
                var error = $root.merico.vdev.enterprise.TeamLocalMachine.verify(message.teamLocalMachines[i]);
                if (error)
                {return 'teamLocalMachines.' + error;}
              }
            }
            return null;
          };

          /**
                     * Creates a LicenseData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {merico.vdev.enterprise.License.LicenseData} LicenseData
                     */
          LicenseData.fromObject = function fromObject(object) {
            if (object instanceof $root.merico.vdev.enterprise.License.LicenseData)
            {return object;}
            var message = new $root.merico.vdev.enterprise.License.LicenseData();
            if (object.teams) {
              if (!Array.isArray(object.teams))
              {throw TypeError('.merico.vdev.enterprise.License.LicenseData.teams: array expected');}
              message.teams = [];
              for (var i = 0; i < object.teams.length; ++i) {
                if (typeof object.teams[i] !== 'object')
                {throw TypeError('.merico.vdev.enterprise.License.LicenseData.teams: object expected');}
                message.teams[i] = $root.merico.vdev.enterprise.Team.fromObject(object.teams[i]);
              }
            }
            if (object.teamUsers) {
              if (!Array.isArray(object.teamUsers))
              {throw TypeError('.merico.vdev.enterprise.License.LicenseData.teamUsers: array expected');}
              message.teamUsers = [];
              for (var i = 0; i < object.teamUsers.length; ++i) {
                if (typeof object.teamUsers[i] !== 'object')
                {throw TypeError('.merico.vdev.enterprise.License.LicenseData.teamUsers: object expected');}
                message.teamUsers[i] = $root.merico.vdev.enterprise.TeamUser.fromObject(object.teamUsers[i]);
              }
            }
            if (object.users) {
              if (!Array.isArray(object.users))
              {throw TypeError('.merico.vdev.enterprise.License.LicenseData.users: array expected');}
              message.users = [];
              for (var i = 0; i < object.users.length; ++i) {
                if (typeof object.users[i] !== 'object')
                {throw TypeError('.merico.vdev.enterprise.License.LicenseData.users: object expected');}
                message.users[i] = $root.merico.vdev.enterprise.License.LicenseData.UserPack.fromObject(object.users[i]);
              }
            }
            if (object.teamLocalMachines) {
              if (!Array.isArray(object.teamLocalMachines))
              {throw TypeError('.merico.vdev.enterprise.License.LicenseData.teamLocalMachines: array expected');}
              message.teamLocalMachines = [];
              for (var i = 0; i < object.teamLocalMachines.length; ++i) {
                if (typeof object.teamLocalMachines[i] !== 'object')
                {throw TypeError('.merico.vdev.enterprise.License.LicenseData.teamLocalMachines: object expected');}
                message.teamLocalMachines[i] = $root.merico.vdev.enterprise.TeamLocalMachine.fromObject(object.teamLocalMachines[i]);
              }
            }
            return message;
          };

          /**
                     * Creates a plain object from a LicenseData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @static
                     * @param {merico.vdev.enterprise.License.LicenseData} message LicenseData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
          LicenseData.toObject = function toObject(message, options) {
            if (!options)
            {options = {};}
            var object = {};
            if (options.arrays || options.defaults) {
              object.teams = [];
              object.teamUsers = [];
              object.users = [];
              object.teamLocalMachines = [];
            }
            if (message.teams && message.teams.length) {
              object.teams = [];
              for (var j = 0; j < message.teams.length; ++j)
              {object.teams[j] = $root.merico.vdev.enterprise.Team.toObject(message.teams[j], options);}
            }
            if (message.teamUsers && message.teamUsers.length) {
              object.teamUsers = [];
              for (var j = 0; j < message.teamUsers.length; ++j)
              {object.teamUsers[j] = $root.merico.vdev.enterprise.TeamUser.toObject(message.teamUsers[j], options);}
            }
            if (message.users && message.users.length) {
              object.users = [];
              for (var j = 0; j < message.users.length; ++j)
              {object.users[j] = $root.merico.vdev.enterprise.License.LicenseData.UserPack.toObject(message.users[j], options);}
            }
            if (message.teamLocalMachines && message.teamLocalMachines.length) {
              object.teamLocalMachines = [];
              for (var j = 0; j < message.teamLocalMachines.length; ++j)
              {object.teamLocalMachines[j] = $root.merico.vdev.enterprise.TeamLocalMachine.toObject(message.teamLocalMachines[j], options);}
            }
            return object;
          };

          /**
                     * Converts this LicenseData to JSON.
                     * @function toJSON
                     * @memberof merico.vdev.enterprise.License.LicenseData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
          LicenseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          LicenseData.UserPack = (function() {

            /**
                         * Properties of a UserPack.
                         * @memberof merico.vdev.enterprise.License.LicenseData
                         * @interface IUserPack
                         * @property {merico.vdev.user.IUser|null} [user] UserPack user
                         * @property {string|null} [passwordHash] UserPack passwordHash
                         * @property {number|Long|null} [createTimestamp] UserPack createTimestamp
                         * @property {number|Long|null} [updateTimestamp] UserPack updateTimestamp
                         */

            /**
                         * Constructs a new UserPack.
                         * @memberof merico.vdev.enterprise.License.LicenseData
                         * @classdesc Represents a UserPack.
                         * @implements IUserPack
                         * @constructor
                         * @param {merico.vdev.enterprise.License.LicenseData.IUserPack=} [properties] Properties to set
                         */
            function UserPack(properties) {
              if (properties)
              {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              {if (properties[keys[i]] != null)
              {this[keys[i]] = properties[keys[i]];}}}
            }

            /**
                         * UserPack user.
                         * @member {merico.vdev.user.IUser|null|undefined} user
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @instance
                         */
            UserPack.prototype.user = null;

            /**
                         * UserPack passwordHash.
                         * @member {string} passwordHash
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @instance
                         */
            UserPack.prototype.passwordHash = '';

            /**
                         * UserPack createTimestamp.
                         * @member {number|Long} createTimestamp
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @instance
                         */
            UserPack.prototype.createTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
                         * UserPack updateTimestamp.
                         * @member {number|Long} updateTimestamp
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @instance
                         */
            UserPack.prototype.updateTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
                         * Creates a new UserPack instance using the specified properties.
                         * @function create
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {merico.vdev.enterprise.License.LicenseData.IUserPack=} [properties] Properties to set
                         * @returns {merico.vdev.enterprise.License.LicenseData.UserPack} UserPack instance
                         */
            UserPack.create = function create(properties) {
              return new UserPack(properties);
            };

            /**
                         * Encodes the specified UserPack message. Does not implicitly {@link merico.vdev.enterprise.License.LicenseData.UserPack.verify|verify} messages.
                         * @function encode
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {merico.vdev.enterprise.License.LicenseData.IUserPack} message UserPack message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
            UserPack.encode = function encode(message, writer) {
              if (!writer)
              {writer = $Writer.create();}
              if (message.user != null && message.hasOwnProperty('user'))
              {$root.merico.vdev.user.User.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
              if (message.passwordHash != null && message.hasOwnProperty('passwordHash'))
              {writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwordHash);}
              if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
              {writer.uint32(/* id 16, wireType 0 =*/128).int64(message.createTimestamp);}
              if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
              {writer.uint32(/* id 17, wireType 0 =*/136).int64(message.updateTimestamp);}
              return writer;
            };

            /**
                         * Encodes the specified UserPack message, length delimited. Does not implicitly {@link merico.vdev.enterprise.License.LicenseData.UserPack.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {merico.vdev.enterprise.License.LicenseData.IUserPack} message UserPack message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
            UserPack.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };

            /**
                         * Decodes a UserPack message from the specified reader or buffer.
                         * @function decode
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {merico.vdev.enterprise.License.LicenseData.UserPack} UserPack
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
            UserPack.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
              {reader = $Reader.create(reader);}
              var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.License.LicenseData.UserPack();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.user = $root.merico.vdev.user.User.decode(reader, reader.uint32());
                    break;
                  case 2:
                    message.passwordHash = reader.string();
                    break;
                  case 16:
                    message.createTimestamp = reader.int64();
                    break;
                  case 17:
                    message.updateTimestamp = reader.int64();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };

            /**
                         * Decodes a UserPack message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {merico.vdev.enterprise.License.LicenseData.UserPack} UserPack
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
            UserPack.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
              {reader = new $Reader(reader);}
              return this.decode(reader, reader.uint32());
            };

            /**
                         * Verifies a UserPack message.
                         * @function verify
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
            UserPack.verify = function verify(message) {
              if (typeof message !== 'object' || message === null)
              {return 'object expected';}
              if (message.user != null && message.hasOwnProperty('user')) {
                var error = $root.merico.vdev.user.User.verify(message.user);
                if (error)
                {return 'user.' + error;}
              }
              if (message.passwordHash != null && message.hasOwnProperty('passwordHash'))
              {if (!$util.isString(message.passwordHash))
              {return 'passwordHash: string expected';}}
              if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
              {if (!$util.isInteger(message.createTimestamp) && !(message.createTimestamp && $util.isInteger(message.createTimestamp.low) && $util.isInteger(message.createTimestamp.high)))
              {return 'createTimestamp: integer|Long expected';}}
              if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
              {if (!$util.isInteger(message.updateTimestamp) && !(message.updateTimestamp && $util.isInteger(message.updateTimestamp.low) && $util.isInteger(message.updateTimestamp.high)))
              {return 'updateTimestamp: integer|Long expected';}}
              return null;
            };

            /**
                         * Creates a UserPack message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {merico.vdev.enterprise.License.LicenseData.UserPack} UserPack
                         */
            UserPack.fromObject = function fromObject(object) {
              if (object instanceof $root.merico.vdev.enterprise.License.LicenseData.UserPack)
              {return object;}
              var message = new $root.merico.vdev.enterprise.License.LicenseData.UserPack();
              if (object.user != null) {
                if (typeof object.user !== 'object')
                {throw TypeError('.merico.vdev.enterprise.License.LicenseData.UserPack.user: object expected');}
                message.user = $root.merico.vdev.user.User.fromObject(object.user);
              }
              if (object.passwordHash != null)
              {message.passwordHash = String(object.passwordHash);}
              if (object.createTimestamp != null)
              {if ($util.Long)
              {(message.createTimestamp = $util.Long.fromValue(object.createTimestamp)).unsigned = false;}
              else if (typeof object.createTimestamp === 'string')
              {message.createTimestamp = parseInt(object.createTimestamp, 10);}
              else if (typeof object.createTimestamp === 'number')
              {message.createTimestamp = object.createTimestamp;}
              else if (typeof object.createTimestamp === 'object')
              {message.createTimestamp = new $util.LongBits(object.createTimestamp.low >>> 0, object.createTimestamp.high >>> 0).toNumber();}}
              if (object.updateTimestamp != null)
              {if ($util.Long)
              {(message.updateTimestamp = $util.Long.fromValue(object.updateTimestamp)).unsigned = false;}
              else if (typeof object.updateTimestamp === 'string')
              {message.updateTimestamp = parseInt(object.updateTimestamp, 10);}
              else if (typeof object.updateTimestamp === 'number')
              {message.updateTimestamp = object.updateTimestamp;}
              else if (typeof object.updateTimestamp === 'object')
              {message.updateTimestamp = new $util.LongBits(object.updateTimestamp.low >>> 0, object.updateTimestamp.high >>> 0).toNumber();}}
              return message;
            };

            /**
                         * Creates a plain object from a UserPack message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @static
                         * @param {merico.vdev.enterprise.License.LicenseData.UserPack} message UserPack
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
            UserPack.toObject = function toObject(message, options) {
              if (!options)
              {options = {};}
              var object = {};
              if (options.defaults) {
                object.user = null;
                object.passwordHash = '';
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.createTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                {object.createTimestamp = options.longs === String ? '0' : 0;}
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.updateTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                {object.updateTimestamp = options.longs === String ? '0' : 0;}
              }
              if (message.user != null && message.hasOwnProperty('user'))
              {object.user = $root.merico.vdev.user.User.toObject(message.user, options);}
              if (message.passwordHash != null && message.hasOwnProperty('passwordHash'))
              {object.passwordHash = message.passwordHash;}
              if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
              {if (typeof message.createTimestamp === 'number')
              {object.createTimestamp = options.longs === String ? String(message.createTimestamp) : message.createTimestamp;}
              else
              {object.createTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.createTimestamp) : options.longs === Number ? new $util.LongBits(message.createTimestamp.low >>> 0, message.createTimestamp.high >>> 0).toNumber() : message.createTimestamp;}}
              if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
              {if (typeof message.updateTimestamp === 'number')
              {object.updateTimestamp = options.longs === String ? String(message.updateTimestamp) : message.updateTimestamp;}
              else
              {object.updateTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.updateTimestamp) : options.longs === Number ? new $util.LongBits(message.updateTimestamp.low >>> 0, message.updateTimestamp.high >>> 0).toNumber() : message.updateTimestamp;}}
              return object;
            };

            /**
                         * Converts this UserPack to JSON.
                         * @function toJSON
                         * @memberof merico.vdev.enterprise.License.LicenseData.UserPack
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
            UserPack.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UserPack;
          })();

          return LicenseData;
        })();

        return License;
      })();

      enterprise.TeamLocalMachine = (function() {

        /**
                 * Properties of a TeamLocalMachine.
                 * @memberof merico.vdev.enterprise
                 * @interface ITeamLocalMachine
                 * @property {string|null} [id] TeamLocalMachine id
                 * @property {string|null} [teamId] TeamLocalMachine teamId
                 * @property {string|null} [createUserId] TeamLocalMachine createUserId
                 * @property {string|null} [name] TeamLocalMachine name
                 * @property {string|null} [machineCode] TeamLocalMachine machineCode
                 * @property {number|Long|null} [createTimestamp] TeamLocalMachine createTimestamp
                 * @property {number|Long|null} [updateTimestamp] TeamLocalMachine updateTimestamp
                 */

        /**
                 * Constructs a new TeamLocalMachine.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a TeamLocalMachine.
                 * @implements ITeamLocalMachine
                 * @constructor
                 * @param {merico.vdev.enterprise.ITeamLocalMachine=} [properties] Properties to set
                 */
        function TeamLocalMachine(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * TeamLocalMachine id.
                 * @member {string} id
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.id = '';

        /**
                 * TeamLocalMachine teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.teamId = '';

        /**
                 * TeamLocalMachine createUserId.
                 * @member {string} createUserId
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.createUserId = '';

        /**
                 * TeamLocalMachine name.
                 * @member {string} name
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.name = '';

        /**
                 * TeamLocalMachine machineCode.
                 * @member {string} machineCode
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.machineCode = '';

        /**
                 * TeamLocalMachine createTimestamp.
                 * @member {number|Long} createTimestamp
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.createTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * TeamLocalMachine updateTimestamp.
                 * @member {number|Long} updateTimestamp
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 */
        TeamLocalMachine.prototype.updateTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * Creates a new TeamLocalMachine instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {merico.vdev.enterprise.ITeamLocalMachine=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.TeamLocalMachine} TeamLocalMachine instance
                 */
        TeamLocalMachine.create = function create(properties) {
          return new TeamLocalMachine(properties);
        };

        /**
                 * Encodes the specified TeamLocalMachine message. Does not implicitly {@link merico.vdev.enterprise.TeamLocalMachine.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {merico.vdev.enterprise.ITeamLocalMachine} message TeamLocalMachine message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TeamLocalMachine.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.id != null && message.hasOwnProperty('id'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamId);}
          if (message.name != null && message.hasOwnProperty('name'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.machineCode);}
          if (message.createUserId != null && message.hasOwnProperty('createUserId'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.createUserId);}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {writer.uint32(/* id 16, wireType 0 =*/128).int64(message.createTimestamp);}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {writer.uint32(/* id 17, wireType 0 =*/136).int64(message.updateTimestamp);}
          return writer;
        };

        /**
                 * Encodes the specified TeamLocalMachine message, length delimited. Does not implicitly {@link merico.vdev.enterprise.TeamLocalMachine.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {merico.vdev.enterprise.ITeamLocalMachine} message TeamLocalMachine message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TeamLocalMachine.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a TeamLocalMachine message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.TeamLocalMachine} TeamLocalMachine
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TeamLocalMachine.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.TeamLocalMachine();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.teamId = reader.string();
                break;
              case 5:
                message.createUserId = reader.string();
                break;
              case 3:
                message.name = reader.string();
                break;
              case 4:
                message.machineCode = reader.string();
                break;
              case 16:
                message.createTimestamp = reader.int64();
                break;
              case 17:
                message.updateTimestamp = reader.int64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a TeamLocalMachine message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.TeamLocalMachine} TeamLocalMachine
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TeamLocalMachine.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a TeamLocalMachine message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        TeamLocalMachine.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.id != null && message.hasOwnProperty('id'))
          {if (!$util.isString(message.id))
          {return 'id: string expected';}}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.createUserId != null && message.hasOwnProperty('createUserId'))
          {if (!$util.isString(message.createUserId))
          {return 'createUserId: string expected';}}
          if (message.name != null && message.hasOwnProperty('name'))
          {if (!$util.isString(message.name))
          {return 'name: string expected';}}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {if (!$util.isString(message.machineCode))
          {return 'machineCode: string expected';}}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (!$util.isInteger(message.createTimestamp) && !(message.createTimestamp && $util.isInteger(message.createTimestamp.low) && $util.isInteger(message.createTimestamp.high)))
          {return 'createTimestamp: integer|Long expected';}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (!$util.isInteger(message.updateTimestamp) && !(message.updateTimestamp && $util.isInteger(message.updateTimestamp.low) && $util.isInteger(message.updateTimestamp.high)))
          {return 'updateTimestamp: integer|Long expected';}}
          return null;
        };

        /**
                 * Creates a TeamLocalMachine message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.TeamLocalMachine} TeamLocalMachine
                 */
        TeamLocalMachine.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.TeamLocalMachine)
          {return object;}
          var message = new $root.merico.vdev.enterprise.TeamLocalMachine();
          if (object.id != null)
          {message.id = String(object.id);}
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.createUserId != null)
          {message.createUserId = String(object.createUserId);}
          if (object.name != null)
          {message.name = String(object.name);}
          if (object.machineCode != null)
          {message.machineCode = String(object.machineCode);}
          if (object.createTimestamp != null)
          {if ($util.Long)
          {(message.createTimestamp = $util.Long.fromValue(object.createTimestamp)).unsigned = false;}
          else if (typeof object.createTimestamp === 'string')
          {message.createTimestamp = parseInt(object.createTimestamp, 10);}
          else if (typeof object.createTimestamp === 'number')
          {message.createTimestamp = object.createTimestamp;}
          else if (typeof object.createTimestamp === 'object')
          {message.createTimestamp = new $util.LongBits(object.createTimestamp.low >>> 0, object.createTimestamp.high >>> 0).toNumber();}}
          if (object.updateTimestamp != null)
          {if ($util.Long)
          {(message.updateTimestamp = $util.Long.fromValue(object.updateTimestamp)).unsigned = false;}
          else if (typeof object.updateTimestamp === 'string')
          {message.updateTimestamp = parseInt(object.updateTimestamp, 10);}
          else if (typeof object.updateTimestamp === 'number')
          {message.updateTimestamp = object.updateTimestamp;}
          else if (typeof object.updateTimestamp === 'object')
          {message.updateTimestamp = new $util.LongBits(object.updateTimestamp.low >>> 0, object.updateTimestamp.high >>> 0).toNumber();}}
          return message;
        };

        /**
                 * Creates a plain object from a TeamLocalMachine message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @static
                 * @param {merico.vdev.enterprise.TeamLocalMachine} message TeamLocalMachine
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        TeamLocalMachine.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.id = '';
            object.teamId = '';
            object.name = '';
            object.machineCode = '';
            object.createUserId = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.createTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.createTimestamp = options.longs === String ? '0' : 0;}
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.updateTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.updateTimestamp = options.longs === String ? '0' : 0;}
          }
          if (message.id != null && message.hasOwnProperty('id'))
          {object.id = message.id;}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.name != null && message.hasOwnProperty('name'))
          {object.name = message.name;}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {object.machineCode = message.machineCode;}
          if (message.createUserId != null && message.hasOwnProperty('createUserId'))
          {object.createUserId = message.createUserId;}
          if (message.createTimestamp != null && message.hasOwnProperty('createTimestamp'))
          {if (typeof message.createTimestamp === 'number')
          {object.createTimestamp = options.longs === String ? String(message.createTimestamp) : message.createTimestamp;}
          else
          {object.createTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.createTimestamp) : options.longs === Number ? new $util.LongBits(message.createTimestamp.low >>> 0, message.createTimestamp.high >>> 0).toNumber() : message.createTimestamp;}}
          if (message.updateTimestamp != null && message.hasOwnProperty('updateTimestamp'))
          {if (typeof message.updateTimestamp === 'number')
          {object.updateTimestamp = options.longs === String ? String(message.updateTimestamp) : message.updateTimestamp;}
          else
          {object.updateTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.updateTimestamp) : options.longs === Number ? new $util.LongBits(message.updateTimestamp.low >>> 0, message.updateTimestamp.high >>> 0).toNumber() : message.updateTimestamp;}}
          return object;
        };

        /**
                 * Converts this TeamLocalMachine to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.TeamLocalMachine
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        TeamLocalMachine.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TeamLocalMachine;
      })();

      enterprise.Enterprise = (function() {

        /**
                 * Constructs a new Enterprise service.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents an Enterprise
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
        function Enterprise(rpcImpl, requestDelimited, responseDelimited) {
          $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (Enterprise.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Enterprise;

        /**
                 * Creates new Enterprise service using the specified rpc implementation.
                 * @function create
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Enterprise} RPC service. Useful where requests and/or responses are streamed.
                 */
        Enterprise.create = function create(rpcImpl, requestDelimited, responseDelimited) {
          return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getEnv}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetEnvCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetEnvResponse} [response] GetEnvResponse
                 */

        /**
                 * Calls GetEnv.
                 * @function getEnv
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetEnvRequest} request GetEnvRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetEnvCallback} callback Node-style callback called with the error, if any, and GetEnvResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getEnv = function getEnv(request, callback) {
          return this.rpcCall(getEnv, $root.merico.vdev.enterprise.GetEnvRequest, $root.merico.vdev.enterprise.GetEnvResponse, request, callback);
        }, 'name', { value: 'GetEnv' });

        /**
                 * Calls GetEnv.
                 * @function getEnv
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetEnvRequest} request GetEnvRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetEnvResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getRegisterStatusByTeam}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetRegisterStatusByTeamCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetRegisterStatusResponse} [response] GetRegisterStatusResponse
                 */

        /**
                 * Calls GetRegisterStatusByTeam.
                 * @function getRegisterStatusByTeam
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByTeamRequest} request GetRegisterStatusByTeamRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetRegisterStatusByTeamCallback} callback Node-style callback called with the error, if any, and GetRegisterStatusResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getRegisterStatusByTeam = function getRegisterStatusByTeam(request, callback) {
          return this.rpcCall(getRegisterStatusByTeam, $root.merico.vdev.enterprise.GetRegisterStatusByTeamRequest, $root.merico.vdev.enterprise.GetRegisterStatusResponse, request, callback);
        }, 'name', { value: 'GetRegisterStatusByTeam' });

        /**
                 * Calls GetRegisterStatusByTeam.
                 * @function getRegisterStatusByTeam
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByTeamRequest} request GetRegisterStatusByTeamRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetRegisterStatusResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getRegisterStatusByUserId}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetRegisterStatusByUserIdCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetRegisterStatusResponse} [response] GetRegisterStatusResponse
                 */

        /**
                 * Calls GetRegisterStatusByUserId.
                 * @function getRegisterStatusByUserId
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByUserIdRequest} request GetRegisterStatusByUserIdRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetRegisterStatusByUserIdCallback} callback Node-style callback called with the error, if any, and GetRegisterStatusResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getRegisterStatusByUserId = function getRegisterStatusByUserId(request, callback) {
          return this.rpcCall(getRegisterStatusByUserId, $root.merico.vdev.enterprise.GetRegisterStatusByUserIdRequest, $root.merico.vdev.enterprise.GetRegisterStatusResponse, request, callback);
        }, 'name', { value: 'GetRegisterStatusByUserId' });

        /**
                 * Calls GetRegisterStatusByUserId.
                 * @function getRegisterStatusByUserId
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByUserIdRequest} request GetRegisterStatusByUserIdRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetRegisterStatusResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getLocalStatus}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetLocalStatusCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetLocalStatusResponse} [response] GetLocalStatusResponse
                 */

        /**
                 * Calls GetLocalStatus.
                 * @function getLocalStatus
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLocalStatusRequest} request GetLocalStatusRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetLocalStatusCallback} callback Node-style callback called with the error, if any, and GetLocalStatusResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getLocalStatus = function getLocalStatus(request, callback) {
          return this.rpcCall(getLocalStatus, $root.merico.vdev.enterprise.GetLocalStatusRequest, $root.merico.vdev.enterprise.GetLocalStatusResponse, request, callback);
        }, 'name', { value: 'GetLocalStatus' });

        /**
                 * Calls GetLocalStatus.
                 * @function getLocalStatus
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLocalStatusRequest} request GetLocalStatusRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetLocalStatusResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getTeamUsersByUser}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetTeamUsersByUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetTeamUsersResponse} [response] GetTeamUsersResponse
                 */

        /**
                 * Calls GetTeamUsersByUser.
                 * @function getTeamUsersByUser
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUsersByUserRequest} request GetTeamUsersByUserRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetTeamUsersByUserCallback} callback Node-style callback called with the error, if any, and GetTeamUsersResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getTeamUsersByUser = function getTeamUsersByUser(request, callback) {
          return this.rpcCall(getTeamUsersByUser, $root.merico.vdev.enterprise.GetTeamUsersByUserRequest, $root.merico.vdev.enterprise.GetTeamUsersResponse, request, callback);
        }, 'name', { value: 'GetTeamUsersByUser' });

        /**
                 * Calls GetTeamUsersByUser.
                 * @function getTeamUsersByUser
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUsersByUserRequest} request GetTeamUsersByUserRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetTeamUsersResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getTeamUsersByTeam}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetTeamUsersByTeamCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetTeamUsersResponse} [response] GetTeamUsersResponse
                 */

        /**
                 * Calls GetTeamUsersByTeam.
                 * @function getTeamUsersByTeam
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUsersByTeamRequest} request GetTeamUsersByTeamRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetTeamUsersByTeamCallback} callback Node-style callback called with the error, if any, and GetTeamUsersResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getTeamUsersByTeam = function getTeamUsersByTeam(request, callback) {
          return this.rpcCall(getTeamUsersByTeam, $root.merico.vdev.enterprise.GetTeamUsersByTeamRequest, $root.merico.vdev.enterprise.GetTeamUsersResponse, request, callback);
        }, 'name', { value: 'GetTeamUsersByTeam' });

        /**
                 * Calls GetTeamUsersByTeam.
                 * @function getTeamUsersByTeam
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUsersByTeamRequest} request GetTeamUsersByTeamRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetTeamUsersResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#createTeam}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef CreateTeamCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.CreateTeamResponse} [response] CreateTeamResponse
                 */

        /**
                 * Calls CreateTeam.
                 * @function createTeam
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.ICreateTeamRequest} request CreateTeamRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.CreateTeamCallback} callback Node-style callback called with the error, if any, and CreateTeamResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.createTeam = function createTeam(request, callback) {
          return this.rpcCall(createTeam, $root.merico.vdev.enterprise.CreateTeamRequest, $root.merico.vdev.enterprise.CreateTeamResponse, request, callback);
        }, 'name', { value: 'CreateTeam' });

        /**
                 * Calls CreateTeam.
                 * @function createTeam
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.ICreateTeamRequest} request CreateTeamRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.CreateTeamResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#addTeamUser}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef AddTeamUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.AddTeamUserResponse} [response] AddTeamUserResponse
                 */

        /**
                 * Calls AddTeamUser.
                 * @function addTeamUser
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IAddTeamUserRequest} request AddTeamUserRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.AddTeamUserCallback} callback Node-style callback called with the error, if any, and AddTeamUserResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.addTeamUser = function addTeamUser(request, callback) {
          return this.rpcCall(addTeamUser, $root.merico.vdev.enterprise.AddTeamUserRequest, $root.merico.vdev.enterprise.AddTeamUserResponse, request, callback);
        }, 'name', { value: 'AddTeamUser' });

        /**
                 * Calls AddTeamUser.
                 * @function addTeamUser
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IAddTeamUserRequest} request AddTeamUserRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.AddTeamUserResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getLicenseOrCreate}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetLicenseOrCreateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetLicenseResponse} [response] GetLicenseResponse
                 */

        /**
                 * Calls GetLicenseOrCreate.
                 * @function getLicenseOrCreate
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLicenseOrCreateRequest} request GetLicenseOrCreateRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetLicenseOrCreateCallback} callback Node-style callback called with the error, if any, and GetLicenseResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getLicenseOrCreate = function getLicenseOrCreate(request, callback) {
          return this.rpcCall(getLicenseOrCreate, $root.merico.vdev.enterprise.GetLicenseOrCreateRequest, $root.merico.vdev.enterprise.GetLicenseResponse, request, callback);
        }, 'name', { value: 'GetLicenseOrCreate' });

        /**
                 * Calls GetLicenseOrCreate.
                 * @function getLicenseOrCreate
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLicenseOrCreateRequest} request GetLicenseOrCreateRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetLicenseResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getLicenseByLocalMachineId}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetLicenseByLocalMachineIdCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetLicenseResponse} [response] GetLicenseResponse
                 */

        /**
                 * Calls GetLicenseByLocalMachineId.
                 * @function getLicenseByLocalMachineId
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLicenseByLocalMachineIdRequest} request GetLicenseByLocalMachineIdRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetLicenseByLocalMachineIdCallback} callback Node-style callback called with the error, if any, and GetLicenseResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getLicenseByLocalMachineId = function getLicenseByLocalMachineId(request, callback) {
          return this.rpcCall(getLicenseByLocalMachineId, $root.merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest, $root.merico.vdev.enterprise.GetLicenseResponse, request, callback);
        }, 'name', { value: 'GetLicenseByLocalMachineId' });

        /**
                 * Calls GetLicenseByLocalMachineId.
                 * @function getLicenseByLocalMachineId
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLicenseByLocalMachineIdRequest} request GetLicenseByLocalMachineIdRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetLicenseResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#getLocalMachines}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef GetLocalMachinesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetLocalMachinesResponse} [response] GetLocalMachinesResponse
                 */

        /**
                 * Calls GetLocalMachines.
                 * @function getLocalMachines
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLocalMachinesRequest} request GetLocalMachinesRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.GetLocalMachinesCallback} callback Node-style callback called with the error, if any, and GetLocalMachinesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.getLocalMachines = function getLocalMachines(request, callback) {
          return this.rpcCall(getLocalMachines, $root.merico.vdev.enterprise.GetLocalMachinesRequest, $root.merico.vdev.enterprise.GetLocalMachinesResponse, request, callback);
        }, 'name', { value: 'GetLocalMachines' });

        /**
                 * Calls GetLocalMachines.
                 * @function getLocalMachines
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IGetLocalMachinesRequest} request GetLocalMachinesRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetLocalMachinesResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#uploadLicense}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef UploadLicenseCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.UploadLicenseResponse} [response] UploadLicenseResponse
                 */

        /**
                 * Calls UploadLicense.
                 * @function uploadLicense
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IUploadLicenseRequest} request UploadLicenseRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.UploadLicenseCallback} callback Node-style callback called with the error, if any, and UploadLicenseResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.uploadLicense = function uploadLicense(request, callback) {
          return this.rpcCall(uploadLicense, $root.merico.vdev.enterprise.UploadLicenseRequest, $root.merico.vdev.enterprise.UploadLicenseResponse, request, callback);
        }, 'name', { value: 'UploadLicense' });

        /**
                 * Calls UploadLicense.
                 * @function uploadLicense
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IUploadLicenseRequest} request UploadLicenseRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.UploadLicenseResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.Enterprise#listRanks}.
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @typedef ListRanksCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.ListRanksResponse} [response] ListRanksResponse
                 */

        /**
                 * Calls ListRanks.
                 * @function listRanks
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IListRanksRequest} request ListRanksRequest message or plain object
                 * @param {merico.vdev.enterprise.Enterprise.ListRanksCallback} callback Node-style callback called with the error, if any, and ListRanksResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(Enterprise.prototype.listRanks = function listRanks(request, callback) {
          return this.rpcCall(listRanks, $root.merico.vdev.enterprise.ListRanksRequest, $root.merico.vdev.enterprise.ListRanksResponse, request, callback);
        }, 'name', { value: 'ListRanks' });

        /**
                 * Calls ListRanks.
                 * @function listRanks
                 * @memberof merico.vdev.enterprise.Enterprise
                 * @instance
                 * @param {merico.vdev.enterprise.IListRanksRequest} request ListRanksRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.ListRanksResponse>} Promise
                 * @variation 2
                 */

        return Enterprise;
      })();

      enterprise.GetEnvRequest = (function() {

        /**
                 * Properties of a GetEnvRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetEnvRequest
                 */

        /**
                 * Constructs a new GetEnvRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetEnvRequest.
                 * @implements IGetEnvRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetEnvRequest=} [properties] Properties to set
                 */
        function GetEnvRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Creates a new GetEnvRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetEnvRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetEnvRequest} GetEnvRequest instance
                 */
        GetEnvRequest.create = function create(properties) {
          return new GetEnvRequest(properties);
        };

        /**
                 * Encodes the specified GetEnvRequest message. Does not implicitly {@link merico.vdev.enterprise.GetEnvRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetEnvRequest} message GetEnvRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetEnvRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          return writer;
        };

        /**
                 * Encodes the specified GetEnvRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetEnvRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetEnvRequest} message GetEnvRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetEnvRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetEnvRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetEnvRequest} GetEnvRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetEnvRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetEnvRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetEnvRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetEnvRequest} GetEnvRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetEnvRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetEnvRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetEnvRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          return null;
        };

        /**
                 * Creates a GetEnvRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetEnvRequest} GetEnvRequest
                 */
        GetEnvRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetEnvRequest)
          {return object;}
          return new $root.merico.vdev.enterprise.GetEnvRequest();
        };

        /**
                 * Creates a plain object from a GetEnvRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetEnvRequest} message GetEnvRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetEnvRequest.toObject = function toObject() {
          return {};
        };

        /**
                 * Converts this GetEnvRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetEnvRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetEnvRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetEnvRequest;
      })();

      enterprise.GetEnvResponse = (function() {

        /**
                 * Properties of a GetEnvResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetEnvResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetEnvResponse status
                 * @property {merico.vdev.enterprise.EnvRunType|null} [envRunType] GetEnvResponse envRunType
                 */

        /**
                 * Constructs a new GetEnvResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetEnvResponse.
                 * @implements IGetEnvResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetEnvResponse=} [properties] Properties to set
                 */
        function GetEnvResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetEnvResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @instance
                 */
        GetEnvResponse.prototype.status = null;

        /**
                 * GetEnvResponse envRunType.
                 * @member {merico.vdev.enterprise.EnvRunType} envRunType
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @instance
                 */
        GetEnvResponse.prototype.envRunType = 0;

        /**
                 * Creates a new GetEnvResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetEnvResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetEnvResponse} GetEnvResponse instance
                 */
        GetEnvResponse.create = function create(properties) {
          return new GetEnvResponse(properties);
        };

        /**
                 * Encodes the specified GetEnvResponse message. Does not implicitly {@link merico.vdev.enterprise.GetEnvResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetEnvResponse} message GetEnvResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetEnvResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.envRunType != null && message.hasOwnProperty('envRunType'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.envRunType);}
          return writer;
        };

        /**
                 * Encodes the specified GetEnvResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetEnvResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetEnvResponse} message GetEnvResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetEnvResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetEnvResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetEnvResponse} GetEnvResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetEnvResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetEnvResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.envRunType = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetEnvResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetEnvResponse} GetEnvResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetEnvResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetEnvResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetEnvResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.envRunType != null && message.hasOwnProperty('envRunType'))
          {switch (message.envRunType) {
            default:
              return 'envRunType: enum value expected';
            case 0:
            case 1:
              break;
          }}
          return null;
        };

        /**
                 * Creates a GetEnvResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetEnvResponse} GetEnvResponse
                 */
        GetEnvResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetEnvResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetEnvResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetEnvResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          switch (object.envRunType) {
            case 'ONLINE':
            case 0:
              message.envRunType = 0;
              break;
            case 'LOCAL':
            case 1:
              message.envRunType = 1;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetEnvResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetEnvResponse} message GetEnvResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetEnvResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.envRunType = options.enums === String ? 'ONLINE' : 0;
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.envRunType != null && message.hasOwnProperty('envRunType'))
          {object.envRunType = options.enums === String ? $root.merico.vdev.enterprise.EnvRunType[message.envRunType] : message.envRunType;}
          return object;
        };

        /**
                 * Converts this GetEnvResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetEnvResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetEnvResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetEnvResponse;
      })();

      enterprise.GetTeamUsersByUserRequest = (function() {

        /**
                 * Properties of a GetTeamUsersByUserRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUsersByUserRequest
                 * @property {string|null} [userId] GetTeamUsersByUserRequest userId
                 */

        /**
                 * Constructs a new GetTeamUsersByUserRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUsersByUserRequest.
                 * @implements IGetTeamUsersByUserRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUsersByUserRequest=} [properties] Properties to set
                 */
        function GetTeamUsersByUserRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUsersByUserRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @instance
                 */
        GetTeamUsersByUserRequest.prototype.userId = '';

        /**
                 * Creates a new GetTeamUsersByUserRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersByUserRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUsersByUserRequest} GetTeamUsersByUserRequest instance
                 */
        GetTeamUsersByUserRequest.create = function create(properties) {
          return new GetTeamUsersByUserRequest(properties);
        };

        /**
                 * Encodes the specified GetTeamUsersByUserRequest message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersByUserRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersByUserRequest} message GetTeamUsersByUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUsersByUserRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUsersByUserRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersByUserRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersByUserRequest} message GetTeamUsersByUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUsersByUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUsersByUserRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUsersByUserRequest} GetTeamUsersByUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUsersByUserRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUsersByUserRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUsersByUserRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUsersByUserRequest} GetTeamUsersByUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUsersByUserRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUsersByUserRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUsersByUserRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetTeamUsersByUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUsersByUserRequest} GetTeamUsersByUserRequest
                 */
        GetTeamUsersByUserRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUsersByUserRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUsersByUserRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUsersByUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUsersByUserRequest} message GetTeamUsersByUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUsersByUserRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.userId = '';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          return object;
        };

        /**
                 * Converts this GetTeamUsersByUserRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUsersByUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUsersByUserRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetTeamUsersByUserRequest;
      })();

      enterprise.GetTeamUsersByTeamRequest = (function() {

        /**
                 * Properties of a GetTeamUsersByTeamRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUsersByTeamRequest
                 * @property {string|null} [teamId] GetTeamUsersByTeamRequest teamId
                 */

        /**
                 * Constructs a new GetTeamUsersByTeamRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUsersByTeamRequest.
                 * @implements IGetTeamUsersByTeamRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUsersByTeamRequest=} [properties] Properties to set
                 */
        function GetTeamUsersByTeamRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUsersByTeamRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @instance
                 */
        GetTeamUsersByTeamRequest.prototype.teamId = '';

        /**
                 * Creates a new GetTeamUsersByTeamRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersByTeamRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUsersByTeamRequest} GetTeamUsersByTeamRequest instance
                 */
        GetTeamUsersByTeamRequest.create = function create(properties) {
          return new GetTeamUsersByTeamRequest(properties);
        };

        /**
                 * Encodes the specified GetTeamUsersByTeamRequest message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersByTeamRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersByTeamRequest} message GetTeamUsersByTeamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUsersByTeamRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUsersByTeamRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersByTeamRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersByTeamRequest} message GetTeamUsersByTeamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUsersByTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUsersByTeamRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUsersByTeamRequest} GetTeamUsersByTeamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUsersByTeamRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUsersByTeamRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUsersByTeamRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUsersByTeamRequest} GetTeamUsersByTeamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUsersByTeamRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUsersByTeamRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUsersByTeamRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetTeamUsersByTeamRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUsersByTeamRequest} GetTeamUsersByTeamRequest
                 */
        GetTeamUsersByTeamRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUsersByTeamRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUsersByTeamRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUsersByTeamRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUsersByTeamRequest} message GetTeamUsersByTeamRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUsersByTeamRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.teamId = '';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          return object;
        };

        /**
                 * Converts this GetTeamUsersByTeamRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUsersByTeamRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUsersByTeamRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetTeamUsersByTeamRequest;
      })();

      enterprise.GetTeamUsersResponse = (function() {

        /**
                 * Properties of a GetTeamUsersResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUsersResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetTeamUsersResponse status
                 * @property {Array.<merico.vdev.enterprise.GetTeamUsersResponse.ITeamPack>|null} [teamPacks] GetTeamUsersResponse teamPacks
                 */

        /**
                 * Constructs a new GetTeamUsersResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUsersResponse.
                 * @implements IGetTeamUsersResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUsersResponse=} [properties] Properties to set
                 */
        function GetTeamUsersResponse(properties) {
          this.teamPacks = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUsersResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @instance
                 */
        GetTeamUsersResponse.prototype.status = null;

        /**
                 * GetTeamUsersResponse teamPacks.
                 * @member {Array.<merico.vdev.enterprise.GetTeamUsersResponse.ITeamPack>} teamPacks
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @instance
                 */
        GetTeamUsersResponse.prototype.teamPacks = $util.emptyArray;

        /**
                 * Creates a new GetTeamUsersResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUsersResponse} GetTeamUsersResponse instance
                 */
        GetTeamUsersResponse.create = function create(properties) {
          return new GetTeamUsersResponse(properties);
        };

        /**
                 * Encodes the specified GetTeamUsersResponse message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersResponse} message GetTeamUsersResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUsersResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.teamPacks != null && message.teamPacks.length)
          {for (var i = 0; i < message.teamPacks.length; ++i)
          {$root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.encode(message.teamPacks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUsersResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUsersResponse} message GetTeamUsersResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUsersResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUsersResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUsersResponse} GetTeamUsersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUsersResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUsersResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                if (!(message.teamPacks && message.teamPacks.length))
                {message.teamPacks = [];}
                message.teamPacks.push($root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUsersResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUsersResponse} GetTeamUsersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUsersResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUsersResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUsersResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.teamPacks != null && message.hasOwnProperty('teamPacks')) {
            if (!Array.isArray(message.teamPacks))
            {return 'teamPacks: array expected';}
            for (var i = 0; i < message.teamPacks.length; ++i) {
              var error = $root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.verify(message.teamPacks[i]);
              if (error)
              {return 'teamPacks.' + error;}
            }
          }
          return null;
        };

        /**
                 * Creates a GetTeamUsersResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUsersResponse} GetTeamUsersResponse
                 */
        GetTeamUsersResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUsersResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUsersResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetTeamUsersResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.teamPacks) {
            if (!Array.isArray(object.teamPacks))
            {throw TypeError('.merico.vdev.enterprise.GetTeamUsersResponse.teamPacks: array expected');}
            message.teamPacks = [];
            for (var i = 0; i < object.teamPacks.length; ++i) {
              if (typeof object.teamPacks[i] !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUsersResponse.teamPacks: object expected');}
              message.teamPacks[i] = $root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.fromObject(object.teamPacks[i]);
            }
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUsersResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUsersResponse} message GetTeamUsersResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUsersResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.teamPacks = [];}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.teamPacks && message.teamPacks.length) {
            object.teamPacks = [];
            for (var j = 0; j < message.teamPacks.length; ++j)
            {object.teamPacks[j] = $root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.toObject(message.teamPacks[j], options);}
          }
          return object;
        };

        /**
                 * Converts this GetTeamUsersResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUsersResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetTeamUsersResponse.TeamPack = (function() {

          /**
                     * Properties of a TeamPack.
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                     * @interface ITeamPack
                     * @property {merico.vdev.enterprise.ITeam|null} [team] TeamPack team
                     * @property {merico.vdev.enterprise.ITeamUser|null} [teamUser] TeamPack teamUser
                     * @property {merico.vdev.user.IUser|null} [user] TeamPack user
                     */

          /**
                     * Constructs a new TeamPack.
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse
                     * @classdesc Represents a TeamPack.
                     * @implements ITeamPack
                     * @constructor
                     * @param {merico.vdev.enterprise.GetTeamUsersResponse.ITeamPack=} [properties] Properties to set
                     */
          function TeamPack(properties) {
            if (properties)
            {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            {if (properties[keys[i]] != null)
            {this[keys[i]] = properties[keys[i]];}}}
          }

          /**
                     * TeamPack team.
                     * @member {merico.vdev.enterprise.ITeam|null|undefined} team
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @instance
                     */
          TeamPack.prototype.team = null;

          /**
                     * TeamPack teamUser.
                     * @member {merico.vdev.enterprise.ITeamUser|null|undefined} teamUser
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @instance
                     */
          TeamPack.prototype.teamUser = null;

          /**
                     * TeamPack user.
                     * @member {merico.vdev.user.IUser|null|undefined} user
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @instance
                     */
          TeamPack.prototype.user = null;

          /**
                     * Creates a new TeamPack instance using the specified properties.
                     * @function create
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUsersResponse.ITeamPack=} [properties] Properties to set
                     * @returns {merico.vdev.enterprise.GetTeamUsersResponse.TeamPack} TeamPack instance
                     */
          TeamPack.create = function create(properties) {
            return new TeamPack(properties);
          };

          /**
                     * Encodes the specified TeamPack message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.verify|verify} messages.
                     * @function encode
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUsersResponse.ITeamPack} message TeamPack message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          TeamPack.encode = function encode(message, writer) {
            if (!writer)
            {writer = $Writer.create();}
            if (message.team != null && message.hasOwnProperty('team'))
            {$root.merico.vdev.enterprise.Team.encode(message.team, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
            if (message.teamUser != null && message.hasOwnProperty('teamUser'))
            {$root.merico.vdev.enterprise.TeamUser.encode(message.teamUser, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}
            if (message.user != null && message.hasOwnProperty('user'))
            {$root.merico.vdev.user.User.encode(message.user, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}
            return writer;
          };

          /**
                     * Encodes the specified TeamPack message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUsersResponse.ITeamPack} message TeamPack message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          TeamPack.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };

          /**
                     * Decodes a TeamPack message from the specified reader or buffer.
                     * @function decode
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {merico.vdev.enterprise.GetTeamUsersResponse.TeamPack} TeamPack
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          TeamPack.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
            {reader = $Reader.create(reader);}
            var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.team = $root.merico.vdev.enterprise.Team.decode(reader, reader.uint32());
                  break;
                case 2:
                  message.teamUser = $root.merico.vdev.enterprise.TeamUser.decode(reader, reader.uint32());
                  break;
                case 3:
                  message.user = $root.merico.vdev.user.User.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };

          /**
                     * Decodes a TeamPack message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {merico.vdev.enterprise.GetTeamUsersResponse.TeamPack} TeamPack
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          TeamPack.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
            {reader = new $Reader(reader);}
            return this.decode(reader, reader.uint32());
          };

          /**
                     * Verifies a TeamPack message.
                     * @function verify
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
          TeamPack.verify = function verify(message) {
            if (typeof message !== 'object' || message === null)
            {return 'object expected';}
            if (message.team != null && message.hasOwnProperty('team')) {
              var error = $root.merico.vdev.enterprise.Team.verify(message.team);
              if (error)
              {return 'team.' + error;}
            }
            if (message.teamUser != null && message.hasOwnProperty('teamUser')) {
              var error = $root.merico.vdev.enterprise.TeamUser.verify(message.teamUser);
              if (error)
              {return 'teamUser.' + error;}
            }
            if (message.user != null && message.hasOwnProperty('user')) {
              var error = $root.merico.vdev.user.User.verify(message.user);
              if (error)
              {return 'user.' + error;}
            }
            return null;
          };

          /**
                     * Creates a TeamPack message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {merico.vdev.enterprise.GetTeamUsersResponse.TeamPack} TeamPack
                     */
          TeamPack.fromObject = function fromObject(object) {
            if (object instanceof $root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack)
            {return object;}
            var message = new $root.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack();
            if (object.team != null) {
              if (typeof object.team !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.team: object expected');}
              message.team = $root.merico.vdev.enterprise.Team.fromObject(object.team);
            }
            if (object.teamUser != null) {
              if (typeof object.teamUser !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.teamUser: object expected');}
              message.teamUser = $root.merico.vdev.enterprise.TeamUser.fromObject(object.teamUser);
            }
            if (object.user != null) {
              if (typeof object.user !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUsersResponse.TeamPack.user: object expected');}
              message.user = $root.merico.vdev.user.User.fromObject(object.user);
            }
            return message;
          };

          /**
                     * Creates a plain object from a TeamPack message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUsersResponse.TeamPack} message TeamPack
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
          TeamPack.toObject = function toObject(message, options) {
            if (!options)
            {options = {};}
            var object = {};
            if (options.defaults) {
              object.team = null;
              object.teamUser = null;
              object.user = null;
            }
            if (message.team != null && message.hasOwnProperty('team'))
            {object.team = $root.merico.vdev.enterprise.Team.toObject(message.team, options);}
            if (message.teamUser != null && message.hasOwnProperty('teamUser'))
            {object.teamUser = $root.merico.vdev.enterprise.TeamUser.toObject(message.teamUser, options);}
            if (message.user != null && message.hasOwnProperty('user'))
            {object.user = $root.merico.vdev.user.User.toObject(message.user, options);}
            return object;
          };

          /**
                     * Converts this TeamPack to JSON.
                     * @function toJSON
                     * @memberof merico.vdev.enterprise.GetTeamUsersResponse.TeamPack
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
          TeamPack.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return TeamPack;
        })();

        return GetTeamUsersResponse;
      })();

      enterprise.CreateTeamRequest = (function() {

        /**
                 * Properties of a CreateTeamRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface ICreateTeamRequest
                 * @property {string|null} [userId] CreateTeamRequest userId
                 * @property {string|null} [name] CreateTeamRequest name
                 * @property {string|null} [numPartnerText] CreateTeamRequest numPartnerText
                 * @property {string|null} [title] CreateTeamRequest title
                 */

        /**
                 * Constructs a new CreateTeamRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a CreateTeamRequest.
                 * @implements ICreateTeamRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.ICreateTeamRequest=} [properties] Properties to set
                 */
        function CreateTeamRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * CreateTeamRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @instance
                 */
        CreateTeamRequest.prototype.userId = '';

        /**
                 * CreateTeamRequest name.
                 * @member {string} name
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @instance
                 */
        CreateTeamRequest.prototype.name = '';

        /**
                 * CreateTeamRequest numPartnerText.
                 * @member {string} numPartnerText
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @instance
                 */
        CreateTeamRequest.prototype.numPartnerText = '';

        /**
                 * CreateTeamRequest title.
                 * @member {string} title
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @instance
                 */
        CreateTeamRequest.prototype.title = '';

        /**
                 * Creates a new CreateTeamRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.ICreateTeamRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.CreateTeamRequest} CreateTeamRequest instance
                 */
        CreateTeamRequest.create = function create(properties) {
          return new CreateTeamRequest(properties);
        };

        /**
                 * Encodes the specified CreateTeamRequest message. Does not implicitly {@link merico.vdev.enterprise.CreateTeamRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.ICreateTeamRequest} message CreateTeamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CreateTeamRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.name != null && message.hasOwnProperty('name'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);}
          if (message.numPartnerText != null && message.hasOwnProperty('numPartnerText'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.numPartnerText);}
          if (message.title != null && message.hasOwnProperty('title'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.title);}
          return writer;
        };

        /**
                 * Encodes the specified CreateTeamRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.CreateTeamRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.ICreateTeamRequest} message CreateTeamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CreateTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a CreateTeamRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.CreateTeamRequest} CreateTeamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CreateTeamRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.CreateTeamRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.name = reader.string();
                break;
              case 3:
                message.numPartnerText = reader.string();
                break;
              case 4:
                message.title = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a CreateTeamRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.CreateTeamRequest} CreateTeamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CreateTeamRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a CreateTeamRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        CreateTeamRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.name != null && message.hasOwnProperty('name'))
          {if (!$util.isString(message.name))
          {return 'name: string expected';}}
          if (message.numPartnerText != null && message.hasOwnProperty('numPartnerText'))
          {if (!$util.isString(message.numPartnerText))
          {return 'numPartnerText: string expected';}}
          if (message.title != null && message.hasOwnProperty('title'))
          {if (!$util.isString(message.title))
          {return 'title: string expected';}}
          return null;
        };

        /**
                 * Creates a CreateTeamRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.CreateTeamRequest} CreateTeamRequest
                 */
        CreateTeamRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.CreateTeamRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.CreateTeamRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.name != null)
          {message.name = String(object.name);}
          if (object.numPartnerText != null)
          {message.numPartnerText = String(object.numPartnerText);}
          if (object.title != null)
          {message.title = String(object.title);}
          return message;
        };

        /**
                 * Creates a plain object from a CreateTeamRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.CreateTeamRequest} message CreateTeamRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        CreateTeamRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.name = '';
            object.numPartnerText = '';
            object.title = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.name != null && message.hasOwnProperty('name'))
          {object.name = message.name;}
          if (message.numPartnerText != null && message.hasOwnProperty('numPartnerText'))
          {object.numPartnerText = message.numPartnerText;}
          if (message.title != null && message.hasOwnProperty('title'))
          {object.title = message.title;}
          return object;
        };

        /**
                 * Converts this CreateTeamRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.CreateTeamRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        CreateTeamRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CreateTeamRequest;
      })();

      enterprise.CreateTeamResponse = (function() {

        /**
                 * Properties of a CreateTeamResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface ICreateTeamResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] CreateTeamResponse status
                 * @property {merico.vdev.enterprise.ITeam|null} [team] CreateTeamResponse team
                 * @property {merico.vdev.enterprise.ITeamUser|null} [teamUser] CreateTeamResponse teamUser
                 */

        /**
                 * Constructs a new CreateTeamResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a CreateTeamResponse.
                 * @implements ICreateTeamResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.ICreateTeamResponse=} [properties] Properties to set
                 */
        function CreateTeamResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * CreateTeamResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @instance
                 */
        CreateTeamResponse.prototype.status = null;

        /**
                 * CreateTeamResponse team.
                 * @member {merico.vdev.enterprise.ITeam|null|undefined} team
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @instance
                 */
        CreateTeamResponse.prototype.team = null;

        /**
                 * CreateTeamResponse teamUser.
                 * @member {merico.vdev.enterprise.ITeamUser|null|undefined} teamUser
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @instance
                 */
        CreateTeamResponse.prototype.teamUser = null;

        /**
                 * Creates a new CreateTeamResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {merico.vdev.enterprise.ICreateTeamResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.CreateTeamResponse} CreateTeamResponse instance
                 */
        CreateTeamResponse.create = function create(properties) {
          return new CreateTeamResponse(properties);
        };

        /**
                 * Encodes the specified CreateTeamResponse message. Does not implicitly {@link merico.vdev.enterprise.CreateTeamResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {merico.vdev.enterprise.ICreateTeamResponse} message CreateTeamResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CreateTeamResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.team != null && message.hasOwnProperty('team'))
          {$root.merico.vdev.enterprise.Team.encode(message.team, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}
          if (message.teamUser != null && message.hasOwnProperty('teamUser'))
          {$root.merico.vdev.enterprise.TeamUser.encode(message.teamUser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified CreateTeamResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.CreateTeamResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {merico.vdev.enterprise.ICreateTeamResponse} message CreateTeamResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CreateTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a CreateTeamResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.CreateTeamResponse} CreateTeamResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CreateTeamResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.CreateTeamResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.team = $root.merico.vdev.enterprise.Team.decode(reader, reader.uint32());
                break;
              case 3:
                message.teamUser = $root.merico.vdev.enterprise.TeamUser.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a CreateTeamResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.CreateTeamResponse} CreateTeamResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CreateTeamResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a CreateTeamResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        CreateTeamResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.team != null && message.hasOwnProperty('team')) {
            var error = $root.merico.vdev.enterprise.Team.verify(message.team);
            if (error)
            {return 'team.' + error;}
          }
          if (message.teamUser != null && message.hasOwnProperty('teamUser')) {
            var error = $root.merico.vdev.enterprise.TeamUser.verify(message.teamUser);
            if (error)
            {return 'teamUser.' + error;}
          }
          return null;
        };

        /**
                 * Creates a CreateTeamResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.CreateTeamResponse} CreateTeamResponse
                 */
        CreateTeamResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.CreateTeamResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.CreateTeamResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.CreateTeamResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.team != null) {
            if (typeof object.team !== 'object')
            {throw TypeError('.merico.vdev.enterprise.CreateTeamResponse.team: object expected');}
            message.team = $root.merico.vdev.enterprise.Team.fromObject(object.team);
          }
          if (object.teamUser != null) {
            if (typeof object.teamUser !== 'object')
            {throw TypeError('.merico.vdev.enterprise.CreateTeamResponse.teamUser: object expected');}
            message.teamUser = $root.merico.vdev.enterprise.TeamUser.fromObject(object.teamUser);
          }
          return message;
        };

        /**
                 * Creates a plain object from a CreateTeamResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @static
                 * @param {merico.vdev.enterprise.CreateTeamResponse} message CreateTeamResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        CreateTeamResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.team = null;
            object.teamUser = null;
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.team != null && message.hasOwnProperty('team'))
          {object.team = $root.merico.vdev.enterprise.Team.toObject(message.team, options);}
          if (message.teamUser != null && message.hasOwnProperty('teamUser'))
          {object.teamUser = $root.merico.vdev.enterprise.TeamUser.toObject(message.teamUser, options);}
          return object;
        };

        /**
                 * Converts this CreateTeamResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.CreateTeamResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        CreateTeamResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CreateTeamResponse;
      })();

      enterprise.AddTeamUserRequest = (function() {

        /**
                 * Properties of an AddTeamUserRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IAddTeamUserRequest
                 * @property {string|null} [teamId] AddTeamUserRequest teamId
                 * @property {Array.<string>|null} [emails] AddTeamUserRequest emails
                 * @property {string|null} [jobNumber] AddTeamUserRequest jobNumber
                 * @property {string|null} [name] AddTeamUserRequest name
                 * @property {string|null} [title] AddTeamUserRequest title
                 * @property {number|null} [salary] AddTeamUserRequest salary
                 * @property {string|null} [rank] AddTeamUserRequest rank
                 * @property {string|null} [promotionDate] AddTeamUserRequest promotionDate
                 */

        /**
                 * Constructs a new AddTeamUserRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents an AddTeamUserRequest.
                 * @implements IAddTeamUserRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IAddTeamUserRequest=} [properties] Properties to set
                 */
        function AddTeamUserRequest(properties) {
          this.emails = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AddTeamUserRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.teamId = '';

        /**
                 * AddTeamUserRequest emails.
                 * @member {Array.<string>} emails
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.emails = $util.emptyArray;

        /**
                 * AddTeamUserRequest jobNumber.
                 * @member {string} jobNumber
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.jobNumber = '';

        /**
                 * AddTeamUserRequest name.
                 * @member {string} name
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.name = '';

        /**
                 * AddTeamUserRequest title.
                 * @member {string} title
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.title = '';

        /**
                 * AddTeamUserRequest salary.
                 * @member {number} salary
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.salary = 0;

        /**
                 * AddTeamUserRequest rank.
                 * @member {string} rank
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.rank = '';

        /**
                 * AddTeamUserRequest promotionDate.
                 * @member {string} promotionDate
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 */
        AddTeamUserRequest.prototype.promotionDate = '';

        /**
                 * Creates a new AddTeamUserRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.IAddTeamUserRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.AddTeamUserRequest} AddTeamUserRequest instance
                 */
        AddTeamUserRequest.create = function create(properties) {
          return new AddTeamUserRequest(properties);
        };

        /**
                 * Encodes the specified AddTeamUserRequest message. Does not implicitly {@link merico.vdev.enterprise.AddTeamUserRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.IAddTeamUserRequest} message AddTeamUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddTeamUserRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          if (message.emails != null && message.emails.length)
          {for (var i = 0; i < message.emails.length; ++i)
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.emails[i]);}}
          if (message.name != null && message.hasOwnProperty('name'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);}
          if (message.salary != null && message.hasOwnProperty('salary'))
          {writer.uint32(/* id 4, wireType 5 =*/37).float(message.salary);}
          if (message.rank != null && message.hasOwnProperty('rank'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.rank);}
          if (message.promotionDate != null && message.hasOwnProperty('promotionDate'))
          {writer.uint32(/* id 6, wireType 2 =*/50).string(message.promotionDate);}
          if (message.title != null && message.hasOwnProperty('title'))
          {writer.uint32(/* id 7, wireType 2 =*/58).string(message.title);}
          if (message.jobNumber != null && message.hasOwnProperty('jobNumber'))
          {writer.uint32(/* id 8, wireType 2 =*/66).string(message.jobNumber);}
          return writer;
        };

        /**
                 * Encodes the specified AddTeamUserRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.AddTeamUserRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.IAddTeamUserRequest} message AddTeamUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddTeamUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AddTeamUserRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.AddTeamUserRequest} AddTeamUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddTeamUserRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.AddTeamUserRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              case 2:
                if (!(message.emails && message.emails.length))
                {message.emails = [];}
                message.emails.push(reader.string());
                break;
              case 8:
                message.jobNumber = reader.string();
                break;
              case 3:
                message.name = reader.string();
                break;
              case 7:
                message.title = reader.string();
                break;
              case 4:
                message.salary = reader.float();
                break;
              case 5:
                message.rank = reader.string();
                break;
              case 6:
                message.promotionDate = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AddTeamUserRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.AddTeamUserRequest} AddTeamUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddTeamUserRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AddTeamUserRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AddTeamUserRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.emails != null && message.hasOwnProperty('emails')) {
            if (!Array.isArray(message.emails))
            {return 'emails: array expected';}
            for (var i = 0; i < message.emails.length; ++i)
            {if (!$util.isString(message.emails[i]))
            {return 'emails: string[] expected';}}
          }
          if (message.jobNumber != null && message.hasOwnProperty('jobNumber'))
          {if (!$util.isString(message.jobNumber))
          {return 'jobNumber: string expected';}}
          if (message.name != null && message.hasOwnProperty('name'))
          {if (!$util.isString(message.name))
          {return 'name: string expected';}}
          if (message.title != null && message.hasOwnProperty('title'))
          {if (!$util.isString(message.title))
          {return 'title: string expected';}}
          if (message.salary != null && message.hasOwnProperty('salary'))
          {if (typeof message.salary !== 'number')
          {return 'salary: number expected';}}
          if (message.rank != null && message.hasOwnProperty('rank'))
          {if (!$util.isString(message.rank))
          {return 'rank: string expected';}}
          if (message.promotionDate != null && message.hasOwnProperty('promotionDate'))
          {if (!$util.isString(message.promotionDate))
          {return 'promotionDate: string expected';}}
          return null;
        };

        /**
                 * Creates an AddTeamUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.AddTeamUserRequest} AddTeamUserRequest
                 */
        AddTeamUserRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.AddTeamUserRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.AddTeamUserRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.emails) {
            if (!Array.isArray(object.emails))
            {throw TypeError('.merico.vdev.enterprise.AddTeamUserRequest.emails: array expected');}
            message.emails = [];
            for (var i = 0; i < object.emails.length; ++i)
            {message.emails[i] = String(object.emails[i]);}
          }
          if (object.jobNumber != null)
          {message.jobNumber = String(object.jobNumber);}
          if (object.name != null)
          {message.name = String(object.name);}
          if (object.title != null)
          {message.title = String(object.title);}
          if (object.salary != null)
          {message.salary = Number(object.salary);}
          if (object.rank != null)
          {message.rank = String(object.rank);}
          if (object.promotionDate != null)
          {message.promotionDate = String(object.promotionDate);}
          return message;
        };

        /**
                 * Creates a plain object from an AddTeamUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @static
                 * @param {merico.vdev.enterprise.AddTeamUserRequest} message AddTeamUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AddTeamUserRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.emails = [];}
          if (options.defaults) {
            object.teamId = '';
            object.name = '';
            object.salary = 0;
            object.rank = '';
            object.promotionDate = '';
            object.title = '';
            object.jobNumber = '';
          }
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.emails && message.emails.length) {
            object.emails = [];
            for (var j = 0; j < message.emails.length; ++j)
            {object.emails[j] = message.emails[j];}
          }
          if (message.name != null && message.hasOwnProperty('name'))
          {object.name = message.name;}
          if (message.salary != null && message.hasOwnProperty('salary'))
          {object.salary = options.json && !isFinite(message.salary) ? String(message.salary) : message.salary;}
          if (message.rank != null && message.hasOwnProperty('rank'))
          {object.rank = message.rank;}
          if (message.promotionDate != null && message.hasOwnProperty('promotionDate'))
          {object.promotionDate = message.promotionDate;}
          if (message.title != null && message.hasOwnProperty('title'))
          {object.title = message.title;}
          if (message.jobNumber != null && message.hasOwnProperty('jobNumber'))
          {object.jobNumber = message.jobNumber;}
          return object;
        };

        /**
                 * Converts this AddTeamUserRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.AddTeamUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AddTeamUserRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AddTeamUserRequest;
      })();

      enterprise.AddTeamUserResponse = (function() {

        /**
                 * Properties of an AddTeamUserResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IAddTeamUserResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] AddTeamUserResponse status
                 * @property {merico.vdev.enterprise.ITeamUser|null} [teamUser] AddTeamUserResponse teamUser
                 */

        /**
                 * Constructs a new AddTeamUserResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents an AddTeamUserResponse.
                 * @implements IAddTeamUserResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IAddTeamUserResponse=} [properties] Properties to set
                 */
        function AddTeamUserResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AddTeamUserResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @instance
                 */
        AddTeamUserResponse.prototype.status = null;

        /**
                 * AddTeamUserResponse teamUser.
                 * @member {merico.vdev.enterprise.ITeamUser|null|undefined} teamUser
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @instance
                 */
        AddTeamUserResponse.prototype.teamUser = null;

        /**
                 * Creates a new AddTeamUserResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {merico.vdev.enterprise.IAddTeamUserResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.AddTeamUserResponse} AddTeamUserResponse instance
                 */
        AddTeamUserResponse.create = function create(properties) {
          return new AddTeamUserResponse(properties);
        };

        /**
                 * Encodes the specified AddTeamUserResponse message. Does not implicitly {@link merico.vdev.enterprise.AddTeamUserResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {merico.vdev.enterprise.IAddTeamUserResponse} message AddTeamUserResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddTeamUserResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.teamUser != null && message.hasOwnProperty('teamUser'))
          {$root.merico.vdev.enterprise.TeamUser.encode(message.teamUser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified AddTeamUserResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.AddTeamUserResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {merico.vdev.enterprise.IAddTeamUserResponse} message AddTeamUserResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddTeamUserResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AddTeamUserResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.AddTeamUserResponse} AddTeamUserResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddTeamUserResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.AddTeamUserResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 3:
                message.teamUser = $root.merico.vdev.enterprise.TeamUser.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AddTeamUserResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.AddTeamUserResponse} AddTeamUserResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddTeamUserResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AddTeamUserResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AddTeamUserResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.teamUser != null && message.hasOwnProperty('teamUser')) {
            var error = $root.merico.vdev.enterprise.TeamUser.verify(message.teamUser);
            if (error)
            {return 'teamUser.' + error;}
          }
          return null;
        };

        /**
                 * Creates an AddTeamUserResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.AddTeamUserResponse} AddTeamUserResponse
                 */
        AddTeamUserResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.AddTeamUserResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.AddTeamUserResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.AddTeamUserResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.teamUser != null) {
            if (typeof object.teamUser !== 'object')
            {throw TypeError('.merico.vdev.enterprise.AddTeamUserResponse.teamUser: object expected');}
            message.teamUser = $root.merico.vdev.enterprise.TeamUser.fromObject(object.teamUser);
          }
          return message;
        };

        /**
                 * Creates a plain object from an AddTeamUserResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @static
                 * @param {merico.vdev.enterprise.AddTeamUserResponse} message AddTeamUserResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AddTeamUserResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.teamUser = null;
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.teamUser != null && message.hasOwnProperty('teamUser'))
          {object.teamUser = $root.merico.vdev.enterprise.TeamUser.toObject(message.teamUser, options);}
          return object;
        };

        /**
                 * Converts this AddTeamUserResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.AddTeamUserResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AddTeamUserResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AddTeamUserResponse;
      })();

      enterprise.GetRegisterStatusByTeamRequest = (function() {

        /**
                 * Properties of a GetRegisterStatusByTeamRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetRegisterStatusByTeamRequest
                 * @property {string|null} [teamId] GetRegisterStatusByTeamRequest teamId
                 */

        /**
                 * Constructs a new GetRegisterStatusByTeamRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetRegisterStatusByTeamRequest.
                 * @implements IGetRegisterStatusByTeamRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByTeamRequest=} [properties] Properties to set
                 */
        function GetRegisterStatusByTeamRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetRegisterStatusByTeamRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @instance
                 */
        GetRegisterStatusByTeamRequest.prototype.teamId = '';

        /**
                 * Creates a new GetRegisterStatusByTeamRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByTeamRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByTeamRequest} GetRegisterStatusByTeamRequest instance
                 */
        GetRegisterStatusByTeamRequest.create = function create(properties) {
          return new GetRegisterStatusByTeamRequest(properties);
        };

        /**
                 * Encodes the specified GetRegisterStatusByTeamRequest message. Does not implicitly {@link merico.vdev.enterprise.GetRegisterStatusByTeamRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByTeamRequest} message GetRegisterStatusByTeamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetRegisterStatusByTeamRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          return writer;
        };

        /**
                 * Encodes the specified GetRegisterStatusByTeamRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetRegisterStatusByTeamRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByTeamRequest} message GetRegisterStatusByTeamRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetRegisterStatusByTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetRegisterStatusByTeamRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByTeamRequest} GetRegisterStatusByTeamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetRegisterStatusByTeamRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetRegisterStatusByTeamRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetRegisterStatusByTeamRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByTeamRequest} GetRegisterStatusByTeamRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetRegisterStatusByTeamRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetRegisterStatusByTeamRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetRegisterStatusByTeamRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetRegisterStatusByTeamRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByTeamRequest} GetRegisterStatusByTeamRequest
                 */
        GetRegisterStatusByTeamRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetRegisterStatusByTeamRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetRegisterStatusByTeamRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetRegisterStatusByTeamRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetRegisterStatusByTeamRequest} message GetRegisterStatusByTeamRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetRegisterStatusByTeamRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.teamId = '';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          return object;
        };

        /**
                 * Converts this GetRegisterStatusByTeamRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByTeamRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetRegisterStatusByTeamRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetRegisterStatusByTeamRequest;
      })();

      enterprise.GetRegisterStatusByUserIdRequest = (function() {

        /**
                 * Properties of a GetRegisterStatusByUserIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetRegisterStatusByUserIdRequest
                 * @property {string|null} [teamId] GetRegisterStatusByUserIdRequest teamId
                 * @property {string|null} [userId] GetRegisterStatusByUserIdRequest userId
                 */

        /**
                 * Constructs a new GetRegisterStatusByUserIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetRegisterStatusByUserIdRequest.
                 * @implements IGetRegisterStatusByUserIdRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByUserIdRequest=} [properties] Properties to set
                 */
        function GetRegisterStatusByUserIdRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetRegisterStatusByUserIdRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @instance
                 */
        GetRegisterStatusByUserIdRequest.prototype.teamId = '';

        /**
                 * GetRegisterStatusByUserIdRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @instance
                 */
        GetRegisterStatusByUserIdRequest.prototype.userId = '';

        /**
                 * Creates a new GetRegisterStatusByUserIdRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByUserIdRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByUserIdRequest} GetRegisterStatusByUserIdRequest instance
                 */
        GetRegisterStatusByUserIdRequest.create = function create(properties) {
          return new GetRegisterStatusByUserIdRequest(properties);
        };

        /**
                 * Encodes the specified GetRegisterStatusByUserIdRequest message. Does not implicitly {@link merico.vdev.enterprise.GetRegisterStatusByUserIdRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByUserIdRequest} message GetRegisterStatusByUserIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetRegisterStatusByUserIdRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);}
          return writer;
        };

        /**
                 * Encodes the specified GetRegisterStatusByUserIdRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetRegisterStatusByUserIdRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusByUserIdRequest} message GetRegisterStatusByUserIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetRegisterStatusByUserIdRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetRegisterStatusByUserIdRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByUserIdRequest} GetRegisterStatusByUserIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetRegisterStatusByUserIdRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetRegisterStatusByUserIdRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              case 2:
                message.userId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetRegisterStatusByUserIdRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByUserIdRequest} GetRegisterStatusByUserIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetRegisterStatusByUserIdRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetRegisterStatusByUserIdRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetRegisterStatusByUserIdRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetRegisterStatusByUserIdRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetRegisterStatusByUserIdRequest} GetRegisterStatusByUserIdRequest
                 */
        GetRegisterStatusByUserIdRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetRegisterStatusByUserIdRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetRegisterStatusByUserIdRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.userId != null)
          {message.userId = String(object.userId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetRegisterStatusByUserIdRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetRegisterStatusByUserIdRequest} message GetRegisterStatusByUserIdRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetRegisterStatusByUserIdRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.teamId = '';
            object.userId = '';
          }
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          return object;
        };

        /**
                 * Converts this GetRegisterStatusByUserIdRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetRegisterStatusByUserIdRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetRegisterStatusByUserIdRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetRegisterStatusByUserIdRequest;
      })();

      enterprise.GetRegisterStatusResponse = (function() {

        /**
                 * Properties of a GetRegisterStatusResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetRegisterStatusResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetRegisterStatusResponse status
                 * @property {boolean|null} [canUse] GetRegisterStatusResponse canUse
                 */

        /**
                 * Constructs a new GetRegisterStatusResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetRegisterStatusResponse.
                 * @implements IGetRegisterStatusResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetRegisterStatusResponse=} [properties] Properties to set
                 */
        function GetRegisterStatusResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetRegisterStatusResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @instance
                 */
        GetRegisterStatusResponse.prototype.status = null;

        /**
                 * GetRegisterStatusResponse canUse.
                 * @member {boolean} canUse
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @instance
                 */
        GetRegisterStatusResponse.prototype.canUse = false;

        /**
                 * Creates a new GetRegisterStatusResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetRegisterStatusResponse} GetRegisterStatusResponse instance
                 */
        GetRegisterStatusResponse.create = function create(properties) {
          return new GetRegisterStatusResponse(properties);
        };

        /**
                 * Encodes the specified GetRegisterStatusResponse message. Does not implicitly {@link merico.vdev.enterprise.GetRegisterStatusResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusResponse} message GetRegisterStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetRegisterStatusResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.canUse != null && message.hasOwnProperty('canUse'))
          {writer.uint32(/* id 2, wireType 0 =*/16).bool(message.canUse);}
          return writer;
        };

        /**
                 * Encodes the specified GetRegisterStatusResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetRegisterStatusResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetRegisterStatusResponse} message GetRegisterStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetRegisterStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetRegisterStatusResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetRegisterStatusResponse} GetRegisterStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetRegisterStatusResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetRegisterStatusResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.canUse = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetRegisterStatusResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetRegisterStatusResponse} GetRegisterStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetRegisterStatusResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetRegisterStatusResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetRegisterStatusResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.canUse != null && message.hasOwnProperty('canUse'))
          {if (typeof message.canUse !== 'boolean')
          {return 'canUse: boolean expected';}}
          return null;
        };

        /**
                 * Creates a GetRegisterStatusResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetRegisterStatusResponse} GetRegisterStatusResponse
                 */
        GetRegisterStatusResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetRegisterStatusResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetRegisterStatusResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetRegisterStatusResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.canUse != null)
          {message.canUse = Boolean(object.canUse);}
          return message;
        };

        /**
                 * Creates a plain object from a GetRegisterStatusResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetRegisterStatusResponse} message GetRegisterStatusResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetRegisterStatusResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.canUse = false;
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.canUse != null && message.hasOwnProperty('canUse'))
          {object.canUse = message.canUse;}
          return object;
        };

        /**
                 * Converts this GetRegisterStatusResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetRegisterStatusResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetRegisterStatusResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetRegisterStatusResponse;
      })();

      enterprise.GetLocalStatusRequest = (function() {

        /**
                 * Properties of a GetLocalStatusRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLocalStatusRequest
                 */

        /**
                 * Constructs a new GetLocalStatusRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLocalStatusRequest.
                 * @implements IGetLocalStatusRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLocalStatusRequest=} [properties] Properties to set
                 */
        function GetLocalStatusRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Creates a new GetLocalStatusRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalStatusRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLocalStatusRequest} GetLocalStatusRequest instance
                 */
        GetLocalStatusRequest.create = function create(properties) {
          return new GetLocalStatusRequest(properties);
        };

        /**
                 * Encodes the specified GetLocalStatusRequest message. Does not implicitly {@link merico.vdev.enterprise.GetLocalStatusRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalStatusRequest} message GetLocalStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalStatusRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          return writer;
        };

        /**
                 * Encodes the specified GetLocalStatusRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLocalStatusRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalStatusRequest} message GetLocalStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLocalStatusRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLocalStatusRequest} GetLocalStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalStatusRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLocalStatusRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLocalStatusRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLocalStatusRequest} GetLocalStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalStatusRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLocalStatusRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLocalStatusRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          return null;
        };

        /**
                 * Creates a GetLocalStatusRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLocalStatusRequest} GetLocalStatusRequest
                 */
        GetLocalStatusRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLocalStatusRequest)
          {return object;}
          return new $root.merico.vdev.enterprise.GetLocalStatusRequest();
        };

        /**
                 * Creates a plain object from a GetLocalStatusRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetLocalStatusRequest} message GetLocalStatusRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLocalStatusRequest.toObject = function toObject() {
          return {};
        };

        /**
                 * Converts this GetLocalStatusRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLocalStatusRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLocalStatusRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLocalStatusRequest;
      })();

      enterprise.GetLocalStatusResponse = (function() {

        /**
                 * Properties of a GetLocalStatusResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLocalStatusResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetLocalStatusResponse status
                 * @property {merico.vdev.enterprise.ILicense|null} [license] GetLocalStatusResponse license
                 * @property {string|null} [machineCode] GetLocalStatusResponse machineCode
                 */

        /**
                 * Constructs a new GetLocalStatusResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLocalStatusResponse.
                 * @implements IGetLocalStatusResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLocalStatusResponse=} [properties] Properties to set
                 */
        function GetLocalStatusResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetLocalStatusResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @instance
                 */
        GetLocalStatusResponse.prototype.status = null;

        /**
                 * GetLocalStatusResponse license.
                 * @member {merico.vdev.enterprise.ILicense|null|undefined} license
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @instance
                 */
        GetLocalStatusResponse.prototype.license = null;

        /**
                 * GetLocalStatusResponse machineCode.
                 * @member {string} machineCode
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @instance
                 */
        GetLocalStatusResponse.prototype.machineCode = '';

        /**
                 * Creates a new GetLocalStatusResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalStatusResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLocalStatusResponse} GetLocalStatusResponse instance
                 */
        GetLocalStatusResponse.create = function create(properties) {
          return new GetLocalStatusResponse(properties);
        };

        /**
                 * Encodes the specified GetLocalStatusResponse message. Does not implicitly {@link merico.vdev.enterprise.GetLocalStatusResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalStatusResponse} message GetLocalStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalStatusResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.license != null && message.hasOwnProperty('license'))
          {$root.merico.vdev.enterprise.License.encode(message.license, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.machineCode);}
          return writer;
        };

        /**
                 * Encodes the specified GetLocalStatusResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLocalStatusResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalStatusResponse} message GetLocalStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLocalStatusResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLocalStatusResponse} GetLocalStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalStatusResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLocalStatusResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.license = $root.merico.vdev.enterprise.License.decode(reader, reader.uint32());
                break;
              case 3:
                message.machineCode = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLocalStatusResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLocalStatusResponse} GetLocalStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalStatusResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLocalStatusResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLocalStatusResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.license != null && message.hasOwnProperty('license')) {
            var error = $root.merico.vdev.enterprise.License.verify(message.license);
            if (error)
            {return 'license.' + error;}
          }
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {if (!$util.isString(message.machineCode))
          {return 'machineCode: string expected';}}
          return null;
        };

        /**
                 * Creates a GetLocalStatusResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLocalStatusResponse} GetLocalStatusResponse
                 */
        GetLocalStatusResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLocalStatusResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetLocalStatusResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetLocalStatusResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.license != null) {
            if (typeof object.license !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetLocalStatusResponse.license: object expected');}
            message.license = $root.merico.vdev.enterprise.License.fromObject(object.license);
          }
          if (object.machineCode != null)
          {message.machineCode = String(object.machineCode);}
          return message;
        };

        /**
                 * Creates a plain object from a GetLocalStatusResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetLocalStatusResponse} message GetLocalStatusResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLocalStatusResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.license = null;
            object.machineCode = '';
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.license != null && message.hasOwnProperty('license'))
          {object.license = $root.merico.vdev.enterprise.License.toObject(message.license, options);}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {object.machineCode = message.machineCode;}
          return object;
        };

        /**
                 * Converts this GetLocalStatusResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLocalStatusResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLocalStatusResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLocalStatusResponse;
      })();

      enterprise.GetLicenseOrCreateRequest = (function() {

        /**
                 * Properties of a GetLicenseOrCreateRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLicenseOrCreateRequest
                 * @property {string|null} [teamId] GetLicenseOrCreateRequest teamId
                 * @property {string|null} [userId] GetLicenseOrCreateRequest userId
                 * @property {string|null} [machineCode] GetLicenseOrCreateRequest machineCode
                 */

        /**
                 * Constructs a new GetLicenseOrCreateRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLicenseOrCreateRequest.
                 * @implements IGetLicenseOrCreateRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLicenseOrCreateRequest=} [properties] Properties to set
                 */
        function GetLicenseOrCreateRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetLicenseOrCreateRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @instance
                 */
        GetLicenseOrCreateRequest.prototype.teamId = '';

        /**
                 * GetLicenseOrCreateRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @instance
                 */
        GetLicenseOrCreateRequest.prototype.userId = '';

        /**
                 * GetLicenseOrCreateRequest machineCode.
                 * @member {string} machineCode
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @instance
                 */
        GetLicenseOrCreateRequest.prototype.machineCode = '';

        /**
                 * Creates a new GetLicenseOrCreateRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseOrCreateRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLicenseOrCreateRequest} GetLicenseOrCreateRequest instance
                 */
        GetLicenseOrCreateRequest.create = function create(properties) {
          return new GetLicenseOrCreateRequest(properties);
        };

        /**
                 * Encodes the specified GetLicenseOrCreateRequest message. Does not implicitly {@link merico.vdev.enterprise.GetLicenseOrCreateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseOrCreateRequest} message GetLicenseOrCreateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLicenseOrCreateRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.machineCode);}
          return writer;
        };

        /**
                 * Encodes the specified GetLicenseOrCreateRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLicenseOrCreateRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseOrCreateRequest} message GetLicenseOrCreateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLicenseOrCreateRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLicenseOrCreateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLicenseOrCreateRequest} GetLicenseOrCreateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLicenseOrCreateRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLicenseOrCreateRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              case 2:
                message.userId = reader.string();
                break;
              case 3:
                message.machineCode = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLicenseOrCreateRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLicenseOrCreateRequest} GetLicenseOrCreateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLicenseOrCreateRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLicenseOrCreateRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLicenseOrCreateRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {if (!$util.isString(message.machineCode))
          {return 'machineCode: string expected';}}
          return null;
        };

        /**
                 * Creates a GetLicenseOrCreateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLicenseOrCreateRequest} GetLicenseOrCreateRequest
                 */
        GetLicenseOrCreateRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLicenseOrCreateRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetLicenseOrCreateRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.machineCode != null)
          {message.machineCode = String(object.machineCode);}
          return message;
        };

        /**
                 * Creates a plain object from a GetLicenseOrCreateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetLicenseOrCreateRequest} message GetLicenseOrCreateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLicenseOrCreateRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.teamId = '';
            object.userId = '';
            object.machineCode = '';
          }
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.machineCode != null && message.hasOwnProperty('machineCode'))
          {object.machineCode = message.machineCode;}
          return object;
        };

        /**
                 * Converts this GetLicenseOrCreateRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLicenseOrCreateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLicenseOrCreateRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLicenseOrCreateRequest;
      })();

      enterprise.GetLicenseByLocalMachineIdRequest = (function() {

        /**
                 * Properties of a GetLicenseByLocalMachineIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLicenseByLocalMachineIdRequest
                 * @property {string|null} [localMachineId] GetLicenseByLocalMachineIdRequest localMachineId
                 */

        /**
                 * Constructs a new GetLicenseByLocalMachineIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLicenseByLocalMachineIdRequest.
                 * @implements IGetLicenseByLocalMachineIdRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLicenseByLocalMachineIdRequest=} [properties] Properties to set
                 */
        function GetLicenseByLocalMachineIdRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetLicenseByLocalMachineIdRequest localMachineId.
                 * @member {string} localMachineId
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @instance
                 */
        GetLicenseByLocalMachineIdRequest.prototype.localMachineId = '';

        /**
                 * Creates a new GetLicenseByLocalMachineIdRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseByLocalMachineIdRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest} GetLicenseByLocalMachineIdRequest instance
                 */
        GetLicenseByLocalMachineIdRequest.create = function create(properties) {
          return new GetLicenseByLocalMachineIdRequest(properties);
        };

        /**
                 * Encodes the specified GetLicenseByLocalMachineIdRequest message. Does not implicitly {@link merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseByLocalMachineIdRequest} message GetLicenseByLocalMachineIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLicenseByLocalMachineIdRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.localMachineId != null && message.hasOwnProperty('localMachineId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.localMachineId);}
          return writer;
        };

        /**
                 * Encodes the specified GetLicenseByLocalMachineIdRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseByLocalMachineIdRequest} message GetLicenseByLocalMachineIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLicenseByLocalMachineIdRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLicenseByLocalMachineIdRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest} GetLicenseByLocalMachineIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLicenseByLocalMachineIdRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.localMachineId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLicenseByLocalMachineIdRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest} GetLicenseByLocalMachineIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLicenseByLocalMachineIdRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLicenseByLocalMachineIdRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLicenseByLocalMachineIdRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.localMachineId != null && message.hasOwnProperty('localMachineId'))
          {if (!$util.isString(message.localMachineId))
          {return 'localMachineId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetLicenseByLocalMachineIdRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest} GetLicenseByLocalMachineIdRequest
                 */
        GetLicenseByLocalMachineIdRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest();
          if (object.localMachineId != null)
          {message.localMachineId = String(object.localMachineId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetLicenseByLocalMachineIdRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest} message GetLicenseByLocalMachineIdRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLicenseByLocalMachineIdRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.localMachineId = '';}
          if (message.localMachineId != null && message.hasOwnProperty('localMachineId'))
          {object.localMachineId = message.localMachineId;}
          return object;
        };

        /**
                 * Converts this GetLicenseByLocalMachineIdRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLicenseByLocalMachineIdRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLicenseByLocalMachineIdRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLicenseByLocalMachineIdRequest;
      })();

      enterprise.GetLicenseResponse = (function() {

        /**
                 * Properties of a GetLicenseResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLicenseResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetLicenseResponse status
                 * @property {string|null} [licenseSign] GetLicenseResponse licenseSign
                 * @property {merico.vdev.enterprise.ITeamLocalMachine|null} [localMachine] GetLicenseResponse localMachine
                 */

        /**
                 * Constructs a new GetLicenseResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLicenseResponse.
                 * @implements IGetLicenseResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLicenseResponse=} [properties] Properties to set
                 */
        function GetLicenseResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetLicenseResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @instance
                 */
        GetLicenseResponse.prototype.status = null;

        /**
                 * GetLicenseResponse licenseSign.
                 * @member {string} licenseSign
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @instance
                 */
        GetLicenseResponse.prototype.licenseSign = '';

        /**
                 * GetLicenseResponse localMachine.
                 * @member {merico.vdev.enterprise.ITeamLocalMachine|null|undefined} localMachine
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @instance
                 */
        GetLicenseResponse.prototype.localMachine = null;

        /**
                 * Creates a new GetLicenseResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLicenseResponse} GetLicenseResponse instance
                 */
        GetLicenseResponse.create = function create(properties) {
          return new GetLicenseResponse(properties);
        };

        /**
                 * Encodes the specified GetLicenseResponse message. Does not implicitly {@link merico.vdev.enterprise.GetLicenseResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseResponse} message GetLicenseResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLicenseResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.licenseSign != null && message.hasOwnProperty('licenseSign'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.licenseSign);}
          if (message.localMachine != null && message.hasOwnProperty('localMachine'))
          {$root.merico.vdev.enterprise.TeamLocalMachine.encode(message.localMachine, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified GetLicenseResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLicenseResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLicenseResponse} message GetLicenseResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLicenseResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLicenseResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLicenseResponse} GetLicenseResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLicenseResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLicenseResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.licenseSign = reader.string();
                break;
              case 3:
                message.localMachine = $root.merico.vdev.enterprise.TeamLocalMachine.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLicenseResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLicenseResponse} GetLicenseResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLicenseResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLicenseResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLicenseResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.licenseSign != null && message.hasOwnProperty('licenseSign'))
          {if (!$util.isString(message.licenseSign))
          {return 'licenseSign: string expected';}}
          if (message.localMachine != null && message.hasOwnProperty('localMachine')) {
            var error = $root.merico.vdev.enterprise.TeamLocalMachine.verify(message.localMachine);
            if (error)
            {return 'localMachine.' + error;}
          }
          return null;
        };

        /**
                 * Creates a GetLicenseResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLicenseResponse} GetLicenseResponse
                 */
        GetLicenseResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLicenseResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetLicenseResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetLicenseResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.licenseSign != null)
          {message.licenseSign = String(object.licenseSign);}
          if (object.localMachine != null) {
            if (typeof object.localMachine !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetLicenseResponse.localMachine: object expected');}
            message.localMachine = $root.merico.vdev.enterprise.TeamLocalMachine.fromObject(object.localMachine);
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetLicenseResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetLicenseResponse} message GetLicenseResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLicenseResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.licenseSign = '';
            object.localMachine = null;
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.licenseSign != null && message.hasOwnProperty('licenseSign'))
          {object.licenseSign = message.licenseSign;}
          if (message.localMachine != null && message.hasOwnProperty('localMachine'))
          {object.localMachine = $root.merico.vdev.enterprise.TeamLocalMachine.toObject(message.localMachine, options);}
          return object;
        };

        /**
                 * Converts this GetLicenseResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLicenseResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLicenseResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLicenseResponse;
      })();

      enterprise.GetLocalMachinesRequest = (function() {

        /**
                 * Properties of a GetLocalMachinesRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLocalMachinesRequest
                 * @property {string|null} [teamId] GetLocalMachinesRequest teamId
                 */

        /**
                 * Constructs a new GetLocalMachinesRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLocalMachinesRequest.
                 * @implements IGetLocalMachinesRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLocalMachinesRequest=} [properties] Properties to set
                 */
        function GetLocalMachinesRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetLocalMachinesRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @instance
                 */
        GetLocalMachinesRequest.prototype.teamId = '';

        /**
                 * Creates a new GetLocalMachinesRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalMachinesRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLocalMachinesRequest} GetLocalMachinesRequest instance
                 */
        GetLocalMachinesRequest.create = function create(properties) {
          return new GetLocalMachinesRequest(properties);
        };

        /**
                 * Encodes the specified GetLocalMachinesRequest message. Does not implicitly {@link merico.vdev.enterprise.GetLocalMachinesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalMachinesRequest} message GetLocalMachinesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalMachinesRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          return writer;
        };

        /**
                 * Encodes the specified GetLocalMachinesRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLocalMachinesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalMachinesRequest} message GetLocalMachinesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalMachinesRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLocalMachinesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLocalMachinesRequest} GetLocalMachinesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalMachinesRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLocalMachinesRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLocalMachinesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLocalMachinesRequest} GetLocalMachinesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalMachinesRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLocalMachinesRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLocalMachinesRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetLocalMachinesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLocalMachinesRequest} GetLocalMachinesRequest
                 */
        GetLocalMachinesRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLocalMachinesRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetLocalMachinesRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetLocalMachinesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetLocalMachinesRequest} message GetLocalMachinesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLocalMachinesRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.teamId = '';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          return object;
        };

        /**
                 * Converts this GetLocalMachinesRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLocalMachinesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLocalMachinesRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLocalMachinesRequest;
      })();

      enterprise.GetLocalMachinesResponse = (function() {

        /**
                 * Properties of a GetLocalMachinesResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetLocalMachinesResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetLocalMachinesResponse status
                 * @property {Array.<merico.vdev.enterprise.ITeamLocalMachine>|null} [localMachines] GetLocalMachinesResponse localMachines
                 */

        /**
                 * Constructs a new GetLocalMachinesResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetLocalMachinesResponse.
                 * @implements IGetLocalMachinesResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetLocalMachinesResponse=} [properties] Properties to set
                 */
        function GetLocalMachinesResponse(properties) {
          this.localMachines = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetLocalMachinesResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @instance
                 */
        GetLocalMachinesResponse.prototype.status = null;

        /**
                 * GetLocalMachinesResponse localMachines.
                 * @member {Array.<merico.vdev.enterprise.ITeamLocalMachine>} localMachines
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @instance
                 */
        GetLocalMachinesResponse.prototype.localMachines = $util.emptyArray;

        /**
                 * Creates a new GetLocalMachinesResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalMachinesResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetLocalMachinesResponse} GetLocalMachinesResponse instance
                 */
        GetLocalMachinesResponse.create = function create(properties) {
          return new GetLocalMachinesResponse(properties);
        };

        /**
                 * Encodes the specified GetLocalMachinesResponse message. Does not implicitly {@link merico.vdev.enterprise.GetLocalMachinesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalMachinesResponse} message GetLocalMachinesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalMachinesResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.localMachines != null && message.localMachines.length)
          {for (var i = 0; i < message.localMachines.length; ++i)
          {$root.merico.vdev.enterprise.TeamLocalMachine.encode(message.localMachines[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified GetLocalMachinesResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetLocalMachinesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetLocalMachinesResponse} message GetLocalMachinesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetLocalMachinesResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetLocalMachinesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetLocalMachinesResponse} GetLocalMachinesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalMachinesResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetLocalMachinesResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                if (!(message.localMachines && message.localMachines.length))
                {message.localMachines = [];}
                message.localMachines.push($root.merico.vdev.enterprise.TeamLocalMachine.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetLocalMachinesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetLocalMachinesResponse} GetLocalMachinesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetLocalMachinesResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetLocalMachinesResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetLocalMachinesResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.localMachines != null && message.hasOwnProperty('localMachines')) {
            if (!Array.isArray(message.localMachines))
            {return 'localMachines: array expected';}
            for (var i = 0; i < message.localMachines.length; ++i) {
              var error = $root.merico.vdev.enterprise.TeamLocalMachine.verify(message.localMachines[i]);
              if (error)
              {return 'localMachines.' + error;}
            }
          }
          return null;
        };

        /**
                 * Creates a GetLocalMachinesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetLocalMachinesResponse} GetLocalMachinesResponse
                 */
        GetLocalMachinesResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetLocalMachinesResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetLocalMachinesResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetLocalMachinesResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.localMachines) {
            if (!Array.isArray(object.localMachines))
            {throw TypeError('.merico.vdev.enterprise.GetLocalMachinesResponse.localMachines: array expected');}
            message.localMachines = [];
            for (var i = 0; i < object.localMachines.length; ++i) {
              if (typeof object.localMachines[i] !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetLocalMachinesResponse.localMachines: object expected');}
              message.localMachines[i] = $root.merico.vdev.enterprise.TeamLocalMachine.fromObject(object.localMachines[i]);
            }
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetLocalMachinesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetLocalMachinesResponse} message GetLocalMachinesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetLocalMachinesResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.localMachines = [];}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.localMachines && message.localMachines.length) {
            object.localMachines = [];
            for (var j = 0; j < message.localMachines.length; ++j)
            {object.localMachines[j] = $root.merico.vdev.enterprise.TeamLocalMachine.toObject(message.localMachines[j], options);}
          }
          return object;
        };

        /**
                 * Converts this GetLocalMachinesResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetLocalMachinesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetLocalMachinesResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLocalMachinesResponse;
      })();

      enterprise.UploadLicenseRequest = (function() {

        /**
                 * Properties of an UploadLicenseRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IUploadLicenseRequest
                 * @property {string|null} [licenseSign] UploadLicenseRequest licenseSign
                 */

        /**
                 * Constructs a new UploadLicenseRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents an UploadLicenseRequest.
                 * @implements IUploadLicenseRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IUploadLicenseRequest=} [properties] Properties to set
                 */
        function UploadLicenseRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UploadLicenseRequest licenseSign.
                 * @member {string} licenseSign
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @instance
                 */
        UploadLicenseRequest.prototype.licenseSign = '';

        /**
                 * Creates a new UploadLicenseRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {merico.vdev.enterprise.IUploadLicenseRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.UploadLicenseRequest} UploadLicenseRequest instance
                 */
        UploadLicenseRequest.create = function create(properties) {
          return new UploadLicenseRequest(properties);
        };

        /**
                 * Encodes the specified UploadLicenseRequest message. Does not implicitly {@link merico.vdev.enterprise.UploadLicenseRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {merico.vdev.enterprise.IUploadLicenseRequest} message UploadLicenseRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UploadLicenseRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.licenseSign != null && message.hasOwnProperty('licenseSign'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.licenseSign);}
          return writer;
        };

        /**
                 * Encodes the specified UploadLicenseRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.UploadLicenseRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {merico.vdev.enterprise.IUploadLicenseRequest} message UploadLicenseRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UploadLicenseRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UploadLicenseRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.UploadLicenseRequest} UploadLicenseRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UploadLicenseRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.UploadLicenseRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.licenseSign = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UploadLicenseRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.UploadLicenseRequest} UploadLicenseRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UploadLicenseRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UploadLicenseRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UploadLicenseRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.licenseSign != null && message.hasOwnProperty('licenseSign'))
          {if (!$util.isString(message.licenseSign))
          {return 'licenseSign: string expected';}}
          return null;
        };

        /**
                 * Creates an UploadLicenseRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.UploadLicenseRequest} UploadLicenseRequest
                 */
        UploadLicenseRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.UploadLicenseRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.UploadLicenseRequest();
          if (object.licenseSign != null)
          {message.licenseSign = String(object.licenseSign);}
          return message;
        };

        /**
                 * Creates a plain object from an UploadLicenseRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @static
                 * @param {merico.vdev.enterprise.UploadLicenseRequest} message UploadLicenseRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UploadLicenseRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.licenseSign = '';}
          if (message.licenseSign != null && message.hasOwnProperty('licenseSign'))
          {object.licenseSign = message.licenseSign;}
          return object;
        };

        /**
                 * Converts this UploadLicenseRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.UploadLicenseRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UploadLicenseRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UploadLicenseRequest;
      })();

      enterprise.UploadLicenseResponse = (function() {

        /**
                 * Properties of an UploadLicenseResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IUploadLicenseResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] UploadLicenseResponse status
                 * @property {merico.vdev.enterprise.ILicense|null} [license] UploadLicenseResponse license
                 * @property {string|null} [versionKey] UploadLicenseResponse versionKey
                 */

        /**
                 * Constructs a new UploadLicenseResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents an UploadLicenseResponse.
                 * @implements IUploadLicenseResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IUploadLicenseResponse=} [properties] Properties to set
                 */
        function UploadLicenseResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UploadLicenseResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @instance
                 */
        UploadLicenseResponse.prototype.status = null;

        /**
                 * UploadLicenseResponse license.
                 * @member {merico.vdev.enterprise.ILicense|null|undefined} license
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @instance
                 */
        UploadLicenseResponse.prototype.license = null;

        /**
                 * UploadLicenseResponse versionKey.
                 * @member {string} versionKey
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @instance
                 */
        UploadLicenseResponse.prototype.versionKey = '';

        /**
                 * Creates a new UploadLicenseResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.IUploadLicenseResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.UploadLicenseResponse} UploadLicenseResponse instance
                 */
        UploadLicenseResponse.create = function create(properties) {
          return new UploadLicenseResponse(properties);
        };

        /**
                 * Encodes the specified UploadLicenseResponse message. Does not implicitly {@link merico.vdev.enterprise.UploadLicenseResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.IUploadLicenseResponse} message UploadLicenseResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UploadLicenseResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.license != null && message.hasOwnProperty('license'))
          {$root.merico.vdev.enterprise.License.encode(message.license, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}
          if (message.versionKey != null && message.hasOwnProperty('versionKey'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.versionKey);}
          return writer;
        };

        /**
                 * Encodes the specified UploadLicenseResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.UploadLicenseResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.IUploadLicenseResponse} message UploadLicenseResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UploadLicenseResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UploadLicenseResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.UploadLicenseResponse} UploadLicenseResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UploadLicenseResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.UploadLicenseResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.license = $root.merico.vdev.enterprise.License.decode(reader, reader.uint32());
                break;
              case 3:
                message.versionKey = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UploadLicenseResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.UploadLicenseResponse} UploadLicenseResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UploadLicenseResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UploadLicenseResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UploadLicenseResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.license != null && message.hasOwnProperty('license')) {
            var error = $root.merico.vdev.enterprise.License.verify(message.license);
            if (error)
            {return 'license.' + error;}
          }
          if (message.versionKey != null && message.hasOwnProperty('versionKey'))
          {if (!$util.isString(message.versionKey))
          {return 'versionKey: string expected';}}
          return null;
        };

        /**
                 * Creates an UploadLicenseResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.UploadLicenseResponse} UploadLicenseResponse
                 */
        UploadLicenseResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.UploadLicenseResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.UploadLicenseResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.UploadLicenseResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.license != null) {
            if (typeof object.license !== 'object')
            {throw TypeError('.merico.vdev.enterprise.UploadLicenseResponse.license: object expected');}
            message.license = $root.merico.vdev.enterprise.License.fromObject(object.license);
          }
          if (object.versionKey != null)
          {message.versionKey = String(object.versionKey);}
          return message;
        };

        /**
                 * Creates a plain object from an UploadLicenseResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @static
                 * @param {merico.vdev.enterprise.UploadLicenseResponse} message UploadLicenseResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UploadLicenseResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.license = null;
            object.versionKey = '';
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.license != null && message.hasOwnProperty('license'))
          {object.license = $root.merico.vdev.enterprise.License.toObject(message.license, options);}
          if (message.versionKey != null && message.hasOwnProperty('versionKey'))
          {object.versionKey = message.versionKey;}
          return object;
        };

        /**
                 * Converts this UploadLicenseResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.UploadLicenseResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UploadLicenseResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UploadLicenseResponse;
      })();

      enterprise.ListRanksRequest = (function() {

        /**
                 * Properties of a ListRanksRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IListRanksRequest
                 */

        /**
                 * Constructs a new ListRanksRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a ListRanksRequest.
                 * @implements IListRanksRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IListRanksRequest=} [properties] Properties to set
                 */
        function ListRanksRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Creates a new ListRanksRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {merico.vdev.enterprise.IListRanksRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.ListRanksRequest} ListRanksRequest instance
                 */
        ListRanksRequest.create = function create(properties) {
          return new ListRanksRequest(properties);
        };

        /**
                 * Encodes the specified ListRanksRequest message. Does not implicitly {@link merico.vdev.enterprise.ListRanksRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {merico.vdev.enterprise.IListRanksRequest} message ListRanksRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListRanksRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          return writer;
        };

        /**
                 * Encodes the specified ListRanksRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.ListRanksRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {merico.vdev.enterprise.IListRanksRequest} message ListRanksRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListRanksRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ListRanksRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.ListRanksRequest} ListRanksRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListRanksRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.ListRanksRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ListRanksRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.ListRanksRequest} ListRanksRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListRanksRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ListRanksRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ListRanksRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          return null;
        };

        /**
                 * Creates a ListRanksRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.ListRanksRequest} ListRanksRequest
                 */
        ListRanksRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.ListRanksRequest)
          {return object;}
          return new $root.merico.vdev.enterprise.ListRanksRequest();
        };

        /**
                 * Creates a plain object from a ListRanksRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @static
                 * @param {merico.vdev.enterprise.ListRanksRequest} message ListRanksRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ListRanksRequest.toObject = function toObject() {
          return {};
        };

        /**
                 * Converts this ListRanksRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.ListRanksRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ListRanksRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ListRanksRequest;
      })();

      enterprise.ListRanksResponse = (function() {

        /**
                 * Properties of a ListRanksResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IListRanksResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] ListRanksResponse status
                 * @property {Array.<string>|null} [ranks] ListRanksResponse ranks
                 */

        /**
                 * Constructs a new ListRanksResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a ListRanksResponse.
                 * @implements IListRanksResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IListRanksResponse=} [properties] Properties to set
                 */
        function ListRanksResponse(properties) {
          this.ranks = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ListRanksResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @instance
                 */
        ListRanksResponse.prototype.status = null;

        /**
                 * ListRanksResponse ranks.
                 * @member {Array.<string>} ranks
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @instance
                 */
        ListRanksResponse.prototype.ranks = $util.emptyArray;

        /**
                 * Creates a new ListRanksResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {merico.vdev.enterprise.IListRanksResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.ListRanksResponse} ListRanksResponse instance
                 */
        ListRanksResponse.create = function create(properties) {
          return new ListRanksResponse(properties);
        };

        /**
                 * Encodes the specified ListRanksResponse message. Does not implicitly {@link merico.vdev.enterprise.ListRanksResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {merico.vdev.enterprise.IListRanksResponse} message ListRanksResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListRanksResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.ranks != null && message.ranks.length)
          {for (var i = 0; i < message.ranks.length; ++i)
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.ranks[i]);}}
          return writer;
        };

        /**
                 * Encodes the specified ListRanksResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.ListRanksResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {merico.vdev.enterprise.IListRanksResponse} message ListRanksResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListRanksResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ListRanksResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.ListRanksResponse} ListRanksResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListRanksResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.ListRanksResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 3:
                if (!(message.ranks && message.ranks.length))
                {message.ranks = [];}
                message.ranks.push(reader.string());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ListRanksResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.ListRanksResponse} ListRanksResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListRanksResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ListRanksResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ListRanksResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.ranks != null && message.hasOwnProperty('ranks')) {
            if (!Array.isArray(message.ranks))
            {return 'ranks: array expected';}
            for (var i = 0; i < message.ranks.length; ++i)
            {if (!$util.isString(message.ranks[i]))
            {return 'ranks: string[] expected';}}
          }
          return null;
        };

        /**
                 * Creates a ListRanksResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.ListRanksResponse} ListRanksResponse
                 */
        ListRanksResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.ListRanksResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.ListRanksResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.ListRanksResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.ranks) {
            if (!Array.isArray(object.ranks))
            {throw TypeError('.merico.vdev.enterprise.ListRanksResponse.ranks: array expected');}
            message.ranks = [];
            for (var i = 0; i < object.ranks.length; ++i)
            {message.ranks[i] = String(object.ranks[i]);}
          }
          return message;
        };

        /**
                 * Creates a plain object from a ListRanksResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @static
                 * @param {merico.vdev.enterprise.ListRanksResponse} message ListRanksResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ListRanksResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.ranks = [];}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.ranks && message.ranks.length) {
            object.ranks = [];
            for (var j = 0; j < message.ranks.length; ++j)
            {object.ranks[j] = message.ranks[j];}
          }
          return object;
        };

        /**
                 * Converts this ListRanksResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.ListRanksResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ListRanksResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ListRanksResponse;
      })();

      enterprise.TeamStatistics = (function() {

        /**
                 * Constructs a new TeamStatistics service.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a TeamStatistics
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
        function TeamStatistics(rpcImpl, requestDelimited, responseDelimited) {
          $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (TeamStatistics.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TeamStatistics;

        /**
                 * Creates new TeamStatistics service using the specified rpc implementation.
                 * @function create
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {TeamStatistics} RPC service. Useful where requests and/or responses are streamed.
                 */
        TeamStatistics.create = function create(rpcImpl, requestDelimited, responseDelimited) {
          return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
                 * Callback as used by {@link merico.vdev.enterprise.TeamStatistics#getTeamUserValuesGroupByMonth}.
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @typedef GetTeamUserValuesGroupByMonthCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse} [response] GetTeamUserValuesGroupByMonthResponse
                 */

        /**
                 * Calls GetTeamUserValuesGroupByMonth.
                 * @function getTeamUserValuesGroupByMonth
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthRequest} request GetTeamUserValuesGroupByMonthRequest message or plain object
                 * @param {merico.vdev.enterprise.TeamStatistics.GetTeamUserValuesGroupByMonthCallback} callback Node-style callback called with the error, if any, and GetTeamUserValuesGroupByMonthResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(TeamStatistics.prototype.getTeamUserValuesGroupByMonth = function getTeamUserValuesGroupByMonth(request, callback) {
          return this.rpcCall(getTeamUserValuesGroupByMonth, $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest, $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse, request, callback);
        }, 'name', { value: 'GetTeamUserValuesGroupByMonth' });

        /**
                 * Calls GetTeamUserValuesGroupByMonth.
                 * @function getTeamUserValuesGroupByMonth
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthRequest} request GetTeamUserValuesGroupByMonthRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.TeamStatistics#getTagsByReportId}.
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @typedef GetTagsByReportIdCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetTagsByReportIdResponse} [response] GetTagsByReportIdResponse
                 */

        /**
                 * Calls GetTagsByReportId.
                 * @function getTagsByReportId
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdRequest} request GetTagsByReportIdRequest message or plain object
                 * @param {merico.vdev.enterprise.TeamStatistics.GetTagsByReportIdCallback} callback Node-style callback called with the error, if any, and GetTagsByReportIdResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(TeamStatistics.prototype.getTagsByReportId = function getTagsByReportId(request, callback) {
          return this.rpcCall(getTagsByReportId, $root.merico.vdev.enterprise.GetTagsByReportIdRequest, $root.merico.vdev.enterprise.GetTagsByReportIdResponse, request, callback);
        }, 'name', { value: 'GetTagsByReportId' });

        /**
                 * Calls GetTagsByReportId.
                 * @function getTagsByReportId
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdRequest} request GetTagsByReportIdRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetTagsByReportIdResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.TeamStatistics#getTeamUserTagsByReportId}.
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @typedef GetTeamUserTagsByReportIdCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse} [response] GetTeamUserTagsByReportIdResponse
                 */

        /**
                 * Calls GetTeamUserTagsByReportId.
                 * @function getTeamUserTagsByReportId
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdRequest} request GetTeamUserTagsByReportIdRequest message or plain object
                 * @param {merico.vdev.enterprise.TeamStatistics.GetTeamUserTagsByReportIdCallback} callback Node-style callback called with the error, if any, and GetTeamUserTagsByReportIdResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(TeamStatistics.prototype.getTeamUserTagsByReportId = function getTeamUserTagsByReportId(request, callback) {
          return this.rpcCall(getTeamUserTagsByReportId, $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest, $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse, request, callback);
        }, 'name', { value: 'GetTeamUserTagsByReportId' });

        /**
                 * Calls GetTeamUserTagsByReportId.
                 * @function getTeamUserTagsByReportId
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdRequest} request GetTeamUserTagsByReportIdRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.enterprise.TeamStatistics#listTags}.
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @typedef ListTagsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.enterprise.ListTagsResponse} [response] ListTagsResponse
                 */

        /**
                 * Calls ListTags.
                 * @function listTags
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IListTagsRequest} request ListTagsRequest message or plain object
                 * @param {merico.vdev.enterprise.TeamStatistics.ListTagsCallback} callback Node-style callback called with the error, if any, and ListTagsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(TeamStatistics.prototype.listTags = function listTags(request, callback) {
          return this.rpcCall(listTags, $root.merico.vdev.enterprise.ListTagsRequest, $root.merico.vdev.enterprise.ListTagsResponse, request, callback);
        }, 'name', { value: 'ListTags' });

        /**
                 * Calls ListTags.
                 * @function listTags
                 * @memberof merico.vdev.enterprise.TeamStatistics
                 * @instance
                 * @param {merico.vdev.enterprise.IListTagsRequest} request ListTagsRequest message or plain object
                 * @returns {Promise<merico.vdev.enterprise.ListTagsResponse>} Promise
                 * @variation 2
                 */

        return TeamStatistics;
      })();

      enterprise.GetTeamUserValuesGroupByMonthRequest = (function() {

        /**
                 * Properties of a GetTeamUserValuesGroupByMonthRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUserValuesGroupByMonthRequest
                 * @property {string|null} [teamId] GetTeamUserValuesGroupByMonthRequest teamId
                 * @property {string|null} [startMonth] GetTeamUserValuesGroupByMonthRequest startMonth
                 * @property {string|null} [endMonth] GetTeamUserValuesGroupByMonthRequest endMonth
                 * @property {Array.<string>|null} [reportIds] GetTeamUserValuesGroupByMonthRequest reportIds
                 */

        /**
                 * Constructs a new GetTeamUserValuesGroupByMonthRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUserValuesGroupByMonthRequest.
                 * @implements IGetTeamUserValuesGroupByMonthRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthRequest=} [properties] Properties to set
                 */
        function GetTeamUserValuesGroupByMonthRequest(properties) {
          this.reportIds = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUserValuesGroupByMonthRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @instance
                 */
        GetTeamUserValuesGroupByMonthRequest.prototype.teamId = '';

        /**
                 * GetTeamUserValuesGroupByMonthRequest startMonth.
                 * @member {string} startMonth
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @instance
                 */
        GetTeamUserValuesGroupByMonthRequest.prototype.startMonth = '';

        /**
                 * GetTeamUserValuesGroupByMonthRequest endMonth.
                 * @member {string} endMonth
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @instance
                 */
        GetTeamUserValuesGroupByMonthRequest.prototype.endMonth = '';

        /**
                 * GetTeamUserValuesGroupByMonthRequest reportIds.
                 * @member {Array.<string>} reportIds
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @instance
                 */
        GetTeamUserValuesGroupByMonthRequest.prototype.reportIds = $util.emptyArray;

        /**
                 * Creates a new GetTeamUserValuesGroupByMonthRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest} GetTeamUserValuesGroupByMonthRequest instance
                 */
        GetTeamUserValuesGroupByMonthRequest.create = function create(properties) {
          return new GetTeamUserValuesGroupByMonthRequest(properties);
        };

        /**
                 * Encodes the specified GetTeamUserValuesGroupByMonthRequest message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthRequest} message GetTeamUserValuesGroupByMonthRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserValuesGroupByMonthRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          if (message.startMonth != null && message.hasOwnProperty('startMonth'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.startMonth);}
          if (message.endMonth != null && message.hasOwnProperty('endMonth'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.endMonth);}
          if (message.reportIds != null && message.reportIds.length)
          {for (var i = 0; i < message.reportIds.length; ++i)
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.reportIds[i]);}}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUserValuesGroupByMonthRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthRequest} message GetTeamUserValuesGroupByMonthRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserValuesGroupByMonthRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUserValuesGroupByMonthRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest} GetTeamUserValuesGroupByMonthRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserValuesGroupByMonthRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              case 2:
                message.startMonth = reader.string();
                break;
              case 3:
                message.endMonth = reader.string();
                break;
              case 4:
                if (!(message.reportIds && message.reportIds.length))
                {message.reportIds = [];}
                message.reportIds.push(reader.string());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUserValuesGroupByMonthRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest} GetTeamUserValuesGroupByMonthRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserValuesGroupByMonthRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUserValuesGroupByMonthRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUserValuesGroupByMonthRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.startMonth != null && message.hasOwnProperty('startMonth'))
          {if (!$util.isString(message.startMonth))
          {return 'startMonth: string expected';}}
          if (message.endMonth != null && message.hasOwnProperty('endMonth'))
          {if (!$util.isString(message.endMonth))
          {return 'endMonth: string expected';}}
          if (message.reportIds != null && message.hasOwnProperty('reportIds')) {
            if (!Array.isArray(message.reportIds))
            {return 'reportIds: array expected';}
            for (var i = 0; i < message.reportIds.length; ++i)
            {if (!$util.isString(message.reportIds[i]))
            {return 'reportIds: string[] expected';}}
          }
          return null;
        };

        /**
                 * Creates a GetTeamUserValuesGroupByMonthRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest} GetTeamUserValuesGroupByMonthRequest
                 */
        GetTeamUserValuesGroupByMonthRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.startMonth != null)
          {message.startMonth = String(object.startMonth);}
          if (object.endMonth != null)
          {message.endMonth = String(object.endMonth);}
          if (object.reportIds) {
            if (!Array.isArray(object.reportIds))
            {throw TypeError('.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest.reportIds: array expected');}
            message.reportIds = [];
            for (var i = 0; i < object.reportIds.length; ++i)
            {message.reportIds[i] = String(object.reportIds[i]);}
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUserValuesGroupByMonthRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest} message GetTeamUserValuesGroupByMonthRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUserValuesGroupByMonthRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.reportIds = [];}
          if (options.defaults) {
            object.teamId = '';
            object.startMonth = '';
            object.endMonth = '';
          }
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.startMonth != null && message.hasOwnProperty('startMonth'))
          {object.startMonth = message.startMonth;}
          if (message.endMonth != null && message.hasOwnProperty('endMonth'))
          {object.endMonth = message.endMonth;}
          if (message.reportIds && message.reportIds.length) {
            object.reportIds = [];
            for (var j = 0; j < message.reportIds.length; ++j)
            {object.reportIds[j] = message.reportIds[j];}
          }
          return object;
        };

        /**
                 * Converts this GetTeamUserValuesGroupByMonthRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUserValuesGroupByMonthRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetTeamUserValuesGroupByMonthRequest;
      })();

      enterprise.GetTeamUserValuesGroupByMonthResponse = (function() {

        /**
                 * Properties of a GetTeamUserValuesGroupByMonthResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUserValuesGroupByMonthResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetTeamUserValuesGroupByMonthResponse status
                 * @property {Array.<merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.IDeveloper>|null} [developers] GetTeamUserValuesGroupByMonthResponse developers
                 */

        /**
                 * Constructs a new GetTeamUserValuesGroupByMonthResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUserValuesGroupByMonthResponse.
                 * @implements IGetTeamUserValuesGroupByMonthResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthResponse=} [properties] Properties to set
                 */
        function GetTeamUserValuesGroupByMonthResponse(properties) {
          this.developers = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUserValuesGroupByMonthResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @instance
                 */
        GetTeamUserValuesGroupByMonthResponse.prototype.status = null;

        /**
                 * GetTeamUserValuesGroupByMonthResponse developers.
                 * @member {Array.<merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.IDeveloper>} developers
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @instance
                 */
        GetTeamUserValuesGroupByMonthResponse.prototype.developers = $util.emptyArray;

        /**
                 * Creates a new GetTeamUserValuesGroupByMonthResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse} GetTeamUserValuesGroupByMonthResponse instance
                 */
        GetTeamUserValuesGroupByMonthResponse.create = function create(properties) {
          return new GetTeamUserValuesGroupByMonthResponse(properties);
        };

        /**
                 * Encodes the specified GetTeamUserValuesGroupByMonthResponse message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthResponse} message GetTeamUserValuesGroupByMonthResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserValuesGroupByMonthResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.developers != null && message.developers.length)
          {for (var i = 0; i < message.developers.length; ++i)
          {$root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.encode(message.developers[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUserValuesGroupByMonthResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserValuesGroupByMonthResponse} message GetTeamUserValuesGroupByMonthResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserValuesGroupByMonthResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUserValuesGroupByMonthResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse} GetTeamUserValuesGroupByMonthResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserValuesGroupByMonthResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                if (!(message.developers && message.developers.length))
                {message.developers = [];}
                message.developers.push($root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUserValuesGroupByMonthResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse} GetTeamUserValuesGroupByMonthResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserValuesGroupByMonthResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUserValuesGroupByMonthResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUserValuesGroupByMonthResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.developers != null && message.hasOwnProperty('developers')) {
            if (!Array.isArray(message.developers))
            {return 'developers: array expected';}
            for (var i = 0; i < message.developers.length; ++i) {
              var error = $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.verify(message.developers[i]);
              if (error)
              {return 'developers.' + error;}
            }
          }
          return null;
        };

        /**
                 * Creates a GetTeamUserValuesGroupByMonthResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse} GetTeamUserValuesGroupByMonthResponse
                 */
        GetTeamUserValuesGroupByMonthResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.developers) {
            if (!Array.isArray(object.developers))
            {throw TypeError('.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.developers: array expected');}
            message.developers = [];
            for (var i = 0; i < object.developers.length; ++i) {
              if (typeof object.developers[i] !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.developers: object expected');}
              message.developers[i] = $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.fromObject(object.developers[i]);
            }
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUserValuesGroupByMonthResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse} message GetTeamUserValuesGroupByMonthResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUserValuesGroupByMonthResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.developers = [];}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.developers && message.developers.length) {
            object.developers = [];
            for (var j = 0; j < message.developers.length; ++j)
            {object.developers[j] = $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.toObject(message.developers[j], options);}
          }
          return object;
        };

        /**
                 * Converts this GetTeamUserValuesGroupByMonthResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUserValuesGroupByMonthResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetTeamUserValuesGroupByMonthResponse.Developer = (function() {

          /**
                     * Properties of a Developer.
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                     * @interface IDeveloper
                     * @property {merico.vdev.enterprise.ITeamUser|null} [teamUser] Developer teamUser
                     * @property {Array.<number>|null} [devPoints] Developer devPoints
                     */

          /**
                     * Constructs a new Developer.
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse
                     * @classdesc Represents a Developer.
                     * @implements IDeveloper
                     * @constructor
                     * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.IDeveloper=} [properties] Properties to set
                     */
          function Developer(properties) {
            this.devPoints = [];
            if (properties)
            {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            {if (properties[keys[i]] != null)
            {this[keys[i]] = properties[keys[i]];}}}
          }

          /**
                     * Developer teamUser.
                     * @member {merico.vdev.enterprise.ITeamUser|null|undefined} teamUser
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @instance
                     */
          Developer.prototype.teamUser = null;

          /**
                     * Developer devPoints.
                     * @member {Array.<number>} devPoints
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @instance
                     */
          Developer.prototype.devPoints = $util.emptyArray;

          /**
                     * Creates a new Developer instance using the specified properties.
                     * @function create
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.IDeveloper=} [properties] Properties to set
                     * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer} Developer instance
                     */
          Developer.create = function create(properties) {
            return new Developer(properties);
          };

          /**
                     * Encodes the specified Developer message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.verify|verify} messages.
                     * @function encode
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.IDeveloper} message Developer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          Developer.encode = function encode(message, writer) {
            if (!writer)
            {writer = $Writer.create();}
            if (message.teamUser != null && message.hasOwnProperty('teamUser'))
            {$root.merico.vdev.enterprise.TeamUser.encode(message.teamUser, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
            if (message.devPoints != null && message.devPoints.length) {
              writer.uint32(/* id 2, wireType 2 =*/18).fork();
              for (var i = 0; i < message.devPoints.length; ++i)
              {writer.float(message.devPoints[i]);}
              writer.ldelim();
            }
            return writer;
          };

          /**
                     * Encodes the specified Developer message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.IDeveloper} message Developer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          Developer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };

          /**
                     * Decodes a Developer message from the specified reader or buffer.
                     * @function decode
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer} Developer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          Developer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
            {reader = $Reader.create(reader);}
            var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.teamUser = $root.merico.vdev.enterprise.TeamUser.decode(reader, reader.uint32());
                  break;
                case 2:
                  if (!(message.devPoints && message.devPoints.length))
                  {message.devPoints = [];}
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                    {message.devPoints.push(reader.float());}
                  } else
                  {message.devPoints.push(reader.float());}
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };

          /**
                     * Decodes a Developer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer} Developer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          Developer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
            {reader = new $Reader(reader);}
            return this.decode(reader, reader.uint32());
          };

          /**
                     * Verifies a Developer message.
                     * @function verify
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
          Developer.verify = function verify(message) {
            if (typeof message !== 'object' || message === null)
            {return 'object expected';}
            if (message.teamUser != null && message.hasOwnProperty('teamUser')) {
              var error = $root.merico.vdev.enterprise.TeamUser.verify(message.teamUser);
              if (error)
              {return 'teamUser.' + error;}
            }
            if (message.devPoints != null && message.hasOwnProperty('devPoints')) {
              if (!Array.isArray(message.devPoints))
              {return 'devPoints: array expected';}
              for (var i = 0; i < message.devPoints.length; ++i)
              {if (typeof message.devPoints[i] !== 'number')
              {return 'devPoints: number[] expected';}}
            }
            return null;
          };

          /**
                     * Creates a Developer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer} Developer
                     */
          Developer.fromObject = function fromObject(object) {
            if (object instanceof $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer)
            {return object;}
            var message = new $root.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer();
            if (object.teamUser != null) {
              if (typeof object.teamUser !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.teamUser: object expected');}
              message.teamUser = $root.merico.vdev.enterprise.TeamUser.fromObject(object.teamUser);
            }
            if (object.devPoints) {
              if (!Array.isArray(object.devPoints))
              {throw TypeError('.merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer.devPoints: array expected');}
              message.devPoints = [];
              for (var i = 0; i < object.devPoints.length; ++i)
              {message.devPoints[i] = Number(object.devPoints[i]);}
            }
            return message;
          };

          /**
                     * Creates a plain object from a Developer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer} message Developer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
          Developer.toObject = function toObject(message, options) {
            if (!options)
            {options = {};}
            var object = {};
            if (options.arrays || options.defaults)
            {object.devPoints = [];}
            if (options.defaults)
            {object.teamUser = null;}
            if (message.teamUser != null && message.hasOwnProperty('teamUser'))
            {object.teamUser = $root.merico.vdev.enterprise.TeamUser.toObject(message.teamUser, options);}
            if (message.devPoints && message.devPoints.length) {
              object.devPoints = [];
              for (var j = 0; j < message.devPoints.length; ++j)
              {object.devPoints[j] = options.json && !isFinite(message.devPoints[j]) ? String(message.devPoints[j]) : message.devPoints[j];}
            }
            return object;
          };

          /**
                     * Converts this Developer to JSON.
                     * @function toJSON
                     * @memberof merico.vdev.enterprise.GetTeamUserValuesGroupByMonthResponse.Developer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
          Developer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Developer;
        })();

        return GetTeamUserValuesGroupByMonthResponse;
      })();

      enterprise.GetTagsByReportIdRequest = (function() {

        /**
                 * Properties of a GetTagsByReportIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTagsByReportIdRequest
                 * @property {string|null} [reportId] GetTagsByReportIdRequest reportId
                 */

        /**
                 * Constructs a new GetTagsByReportIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTagsByReportIdRequest.
                 * @implements IGetTagsByReportIdRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdRequest=} [properties] Properties to set
                 */
        function GetTagsByReportIdRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTagsByReportIdRequest reportId.
                 * @member {string} reportId
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @instance
                 */
        GetTagsByReportIdRequest.prototype.reportId = '';

        /**
                 * Creates a new GetTagsByReportIdRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdRequest} GetTagsByReportIdRequest instance
                 */
        GetTagsByReportIdRequest.create = function create(properties) {
          return new GetTagsByReportIdRequest(properties);
        };

        /**
                 * Encodes the specified GetTagsByReportIdRequest message. Does not implicitly {@link merico.vdev.enterprise.GetTagsByReportIdRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdRequest} message GetTagsByReportIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTagsByReportIdRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.reportId);}
          return writer;
        };

        /**
                 * Encodes the specified GetTagsByReportIdRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTagsByReportIdRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdRequest} message GetTagsByReportIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTagsByReportIdRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTagsByReportIdRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdRequest} GetTagsByReportIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTagsByReportIdRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTagsByReportIdRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.reportId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTagsByReportIdRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdRequest} GetTagsByReportIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTagsByReportIdRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTagsByReportIdRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTagsByReportIdRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetTagsByReportIdRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdRequest} GetTagsByReportIdRequest
                 */
        GetTagsByReportIdRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTagsByReportIdRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTagsByReportIdRequest();
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetTagsByReportIdRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetTagsByReportIdRequest} message GetTagsByReportIdRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTagsByReportIdRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.reportId = '';}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          return object;
        };

        /**
                 * Converts this GetTagsByReportIdRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTagsByReportIdRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetTagsByReportIdRequest;
      })();

      enterprise.GetTagsByReportIdResponse = (function() {

        /**
                 * Properties of a GetTagsByReportIdResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTagsByReportIdResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetTagsByReportIdResponse status
                 * @property {Object.<string,number>|null} [tagToPointMap] GetTagsByReportIdResponse tagToPointMap
                 */

        /**
                 * Constructs a new GetTagsByReportIdResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTagsByReportIdResponse.
                 * @implements IGetTagsByReportIdResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdResponse=} [properties] Properties to set
                 */
        function GetTagsByReportIdResponse(properties) {
          this.tagToPointMap = {};
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTagsByReportIdResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @instance
                 */
        GetTagsByReportIdResponse.prototype.status = null;

        /**
                 * GetTagsByReportIdResponse tagToPointMap.
                 * @member {Object.<string,number>} tagToPointMap
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @instance
                 */
        GetTagsByReportIdResponse.prototype.tagToPointMap = $util.emptyObject;

        /**
                 * Creates a new GetTagsByReportIdResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdResponse} GetTagsByReportIdResponse instance
                 */
        GetTagsByReportIdResponse.create = function create(properties) {
          return new GetTagsByReportIdResponse(properties);
        };

        /**
                 * Encodes the specified GetTagsByReportIdResponse message. Does not implicitly {@link merico.vdev.enterprise.GetTagsByReportIdResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdResponse} message GetTagsByReportIdResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTagsByReportIdResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.tagToPointMap != null && message.hasOwnProperty('tagToPointMap'))
          {for (var keys = Object.keys(message.tagToPointMap), i = 0; i < keys.length; ++i)
          {writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 5 =*/21).float(message.tagToPointMap[keys[i]]).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified GetTagsByReportIdResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTagsByReportIdResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTagsByReportIdResponse} message GetTagsByReportIdResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTagsByReportIdResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTagsByReportIdResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdResponse} GetTagsByReportIdResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTagsByReportIdResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTagsByReportIdResponse(); var key;
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                reader.skip().pos++;
                if (message.tagToPointMap === $util.emptyObject)
                {message.tagToPointMap = {};}
                key = reader.int32();
                reader.pos++;
                message.tagToPointMap[key] = reader.float();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTagsByReportIdResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdResponse} GetTagsByReportIdResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTagsByReportIdResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTagsByReportIdResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTagsByReportIdResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.tagToPointMap != null && message.hasOwnProperty('tagToPointMap')) {
            if (!$util.isObject(message.tagToPointMap))
            {return 'tagToPointMap: object expected';}
            var key = Object.keys(message.tagToPointMap);
            for (var i = 0; i < key.length; ++i) {
              if (!$util.key32Re.test(key[i]))
              {return 'tagToPointMap: integer key{k:int32} expected';}
              if (typeof message.tagToPointMap[key[i]] !== 'number')
              {return 'tagToPointMap: number{k:int32} expected';}
            }
          }
          return null;
        };

        /**
                 * Creates a GetTagsByReportIdResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTagsByReportIdResponse} GetTagsByReportIdResponse
                 */
        GetTagsByReportIdResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTagsByReportIdResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTagsByReportIdResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetTagsByReportIdResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.tagToPointMap) {
            if (typeof object.tagToPointMap !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetTagsByReportIdResponse.tagToPointMap: object expected');}
            message.tagToPointMap = {};
            for (var keys = Object.keys(object.tagToPointMap), i = 0; i < keys.length; ++i)
            {message.tagToPointMap[keys[i]] = Number(object.tagToPointMap[keys[i]]);}
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetTagsByReportIdResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetTagsByReportIdResponse} message GetTagsByReportIdResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTagsByReportIdResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.objects || options.defaults)
          {object.tagToPointMap = {};}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          var keys2;
          if (message.tagToPointMap && (keys2 = Object.keys(message.tagToPointMap)).length) {
            object.tagToPointMap = {};
            for (var j = 0; j < keys2.length; ++j)
            {object.tagToPointMap[keys2[j]] = options.json && !isFinite(message.tagToPointMap[keys2[j]]) ? String(message.tagToPointMap[keys2[j]]) : message.tagToPointMap[keys2[j]];}
          }
          return object;
        };

        /**
                 * Converts this GetTagsByReportIdResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTagsByReportIdResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTagsByReportIdResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetTagsByReportIdResponse;
      })();

      enterprise.GetTeamUserTagsByReportIdRequest = (function() {

        /**
                 * Properties of a GetTeamUserTagsByReportIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUserTagsByReportIdRequest
                 * @property {string|null} [teamId] GetTeamUserTagsByReportIdRequest teamId
                 * @property {string|null} [reportId] GetTeamUserTagsByReportIdRequest reportId
                 */

        /**
                 * Constructs a new GetTeamUserTagsByReportIdRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUserTagsByReportIdRequest.
                 * @implements IGetTeamUserTagsByReportIdRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdRequest=} [properties] Properties to set
                 */
        function GetTeamUserTagsByReportIdRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUserTagsByReportIdRequest teamId.
                 * @member {string} teamId
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @instance
                 */
        GetTeamUserTagsByReportIdRequest.prototype.teamId = '';

        /**
                 * GetTeamUserTagsByReportIdRequest reportId.
                 * @member {string} reportId
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @instance
                 */
        GetTeamUserTagsByReportIdRequest.prototype.reportId = '';

        /**
                 * Creates a new GetTeamUserTagsByReportIdRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest} GetTeamUserTagsByReportIdRequest instance
                 */
        GetTeamUserTagsByReportIdRequest.create = function create(properties) {
          return new GetTeamUserTagsByReportIdRequest(properties);
        };

        /**
                 * Encodes the specified GetTeamUserTagsByReportIdRequest message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdRequest} message GetTeamUserTagsByReportIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserTagsByReportIdRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamId);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.reportId);}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUserTagsByReportIdRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdRequest} message GetTeamUserTagsByReportIdRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserTagsByReportIdRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUserTagsByReportIdRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest} GetTeamUserTagsByReportIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserTagsByReportIdRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.teamId = reader.string();
                break;
              case 2:
                message.reportId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUserTagsByReportIdRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest} GetTeamUserTagsByReportIdRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserTagsByReportIdRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUserTagsByReportIdRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUserTagsByReportIdRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {if (!$util.isString(message.teamId))
          {return 'teamId: string expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetTeamUserTagsByReportIdRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest} GetTeamUserTagsByReportIdRequest
                 */
        GetTeamUserTagsByReportIdRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest();
          if (object.teamId != null)
          {message.teamId = String(object.teamId);}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUserTagsByReportIdRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest} message GetTeamUserTagsByReportIdRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUserTagsByReportIdRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.teamId = '';
            object.reportId = '';
          }
          if (message.teamId != null && message.hasOwnProperty('teamId'))
          {object.teamId = message.teamId;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          return object;
        };

        /**
                 * Converts this GetTeamUserTagsByReportIdRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUserTagsByReportIdRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetTeamUserTagsByReportIdRequest;
      })();

      enterprise.GetTeamUserTagsByReportIdResponse = (function() {

        /**
                 * Properties of a GetTeamUserTagsByReportIdResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IGetTeamUserTagsByReportIdResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] GetTeamUserTagsByReportIdResponse status
                 * @property {Array.<merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.IDeveloper>|null} [developers] GetTeamUserTagsByReportIdResponse developers
                 */

        /**
                 * Constructs a new GetTeamUserTagsByReportIdResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a GetTeamUserTagsByReportIdResponse.
                 * @implements IGetTeamUserTagsByReportIdResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdResponse=} [properties] Properties to set
                 */
        function GetTeamUserTagsByReportIdResponse(properties) {
          this.developers = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetTeamUserTagsByReportIdResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @instance
                 */
        GetTeamUserTagsByReportIdResponse.prototype.status = null;

        /**
                 * GetTeamUserTagsByReportIdResponse developers.
                 * @member {Array.<merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.IDeveloper>} developers
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @instance
                 */
        GetTeamUserTagsByReportIdResponse.prototype.developers = $util.emptyArray;

        /**
                 * Creates a new GetTeamUserTagsByReportIdResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse} GetTeamUserTagsByReportIdResponse instance
                 */
        GetTeamUserTagsByReportIdResponse.create = function create(properties) {
          return new GetTeamUserTagsByReportIdResponse(properties);
        };

        /**
                 * Encodes the specified GetTeamUserTagsByReportIdResponse message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdResponse} message GetTeamUserTagsByReportIdResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserTagsByReportIdResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.developers != null && message.developers.length)
          {for (var i = 0; i < message.developers.length; ++i)
          {$root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.encode(message.developers[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified GetTeamUserTagsByReportIdResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.IGetTeamUserTagsByReportIdResponse} message GetTeamUserTagsByReportIdResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetTeamUserTagsByReportIdResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetTeamUserTagsByReportIdResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse} GetTeamUserTagsByReportIdResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserTagsByReportIdResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                if (!(message.developers && message.developers.length))
                {message.developers = [];}
                message.developers.push($root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetTeamUserTagsByReportIdResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse} GetTeamUserTagsByReportIdResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetTeamUserTagsByReportIdResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetTeamUserTagsByReportIdResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetTeamUserTagsByReportIdResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.developers != null && message.hasOwnProperty('developers')) {
            if (!Array.isArray(message.developers))
            {return 'developers: array expected';}
            for (var i = 0; i < message.developers.length; ++i) {
              var error = $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.verify(message.developers[i]);
              if (error)
              {return 'developers.' + error;}
            }
          }
          return null;
        };

        /**
                 * Creates a GetTeamUserTagsByReportIdResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse} GetTeamUserTagsByReportIdResponse
                 */
        GetTeamUserTagsByReportIdResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.developers) {
            if (!Array.isArray(object.developers))
            {throw TypeError('.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.developers: array expected');}
            message.developers = [];
            for (var i = 0; i < object.developers.length; ++i) {
              if (typeof object.developers[i] !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.developers: object expected');}
              message.developers[i] = $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.fromObject(object.developers[i]);
            }
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetTeamUserTagsByReportIdResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @static
                 * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse} message GetTeamUserTagsByReportIdResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetTeamUserTagsByReportIdResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.developers = [];}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.developers && message.developers.length) {
            object.developers = [];
            for (var j = 0; j < message.developers.length; ++j)
            {object.developers[j] = $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.toObject(message.developers[j], options);}
          }
          return object;
        };

        /**
                 * Converts this GetTeamUserTagsByReportIdResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetTeamUserTagsByReportIdResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetTeamUserTagsByReportIdResponse.Developer = (function() {

          /**
                     * Properties of a Developer.
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                     * @interface IDeveloper
                     * @property {merico.vdev.enterprise.ITeamUser|null} [teamUser] Developer teamUser
                     * @property {Object.<string,number>|null} [tagToPointMap] Developer tagToPointMap
                     */

          /**
                     * Constructs a new Developer.
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse
                     * @classdesc Represents a Developer.
                     * @implements IDeveloper
                     * @constructor
                     * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.IDeveloper=} [properties] Properties to set
                     */
          function Developer(properties) {
            this.tagToPointMap = {};
            if (properties)
            {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            {if (properties[keys[i]] != null)
            {this[keys[i]] = properties[keys[i]];}}}
          }

          /**
                     * Developer teamUser.
                     * @member {merico.vdev.enterprise.ITeamUser|null|undefined} teamUser
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @instance
                     */
          Developer.prototype.teamUser = null;

          /**
                     * Developer tagToPointMap.
                     * @member {Object.<string,number>} tagToPointMap
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @instance
                     */
          Developer.prototype.tagToPointMap = $util.emptyObject;

          /**
                     * Creates a new Developer instance using the specified properties.
                     * @function create
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.IDeveloper=} [properties] Properties to set
                     * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer} Developer instance
                     */
          Developer.create = function create(properties) {
            return new Developer(properties);
          };

          /**
                     * Encodes the specified Developer message. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.verify|verify} messages.
                     * @function encode
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.IDeveloper} message Developer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          Developer.encode = function encode(message, writer) {
            if (!writer)
            {writer = $Writer.create();}
            if (message.teamUser != null && message.hasOwnProperty('teamUser'))
            {$root.merico.vdev.enterprise.TeamUser.encode(message.teamUser, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
            if (message.tagToPointMap != null && message.hasOwnProperty('tagToPointMap'))
            {for (var keys = Object.keys(message.tagToPointMap), i = 0; i < keys.length; ++i)
            {writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 5 =*/21).float(message.tagToPointMap[keys[i]]).ldelim();}}
            return writer;
          };

          /**
                     * Encodes the specified Developer message, length delimited. Does not implicitly {@link merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.IDeveloper} message Developer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          Developer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };

          /**
                     * Decodes a Developer message from the specified reader or buffer.
                     * @function decode
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer} Developer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          Developer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
            {reader = $Reader.create(reader);}
            var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer(); var key;
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.teamUser = $root.merico.vdev.enterprise.TeamUser.decode(reader, reader.uint32());
                  break;
                case 2:
                  reader.skip().pos++;
                  if (message.tagToPointMap === $util.emptyObject)
                  {message.tagToPointMap = {};}
                  key = reader.int32();
                  reader.pos++;
                  message.tagToPointMap[key] = reader.float();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };

          /**
                     * Decodes a Developer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer} Developer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          Developer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
            {reader = new $Reader(reader);}
            return this.decode(reader, reader.uint32());
          };

          /**
                     * Verifies a Developer message.
                     * @function verify
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
          Developer.verify = function verify(message) {
            if (typeof message !== 'object' || message === null)
            {return 'object expected';}
            if (message.teamUser != null && message.hasOwnProperty('teamUser')) {
              var error = $root.merico.vdev.enterprise.TeamUser.verify(message.teamUser);
              if (error)
              {return 'teamUser.' + error;}
            }
            if (message.tagToPointMap != null && message.hasOwnProperty('tagToPointMap')) {
              if (!$util.isObject(message.tagToPointMap))
              {return 'tagToPointMap: object expected';}
              var key = Object.keys(message.tagToPointMap);
              for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                {return 'tagToPointMap: integer key{k:int32} expected';}
                if (typeof message.tagToPointMap[key[i]] !== 'number')
                {return 'tagToPointMap: number{k:int32} expected';}
              }
            }
            return null;
          };

          /**
                     * Creates a Developer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer} Developer
                     */
          Developer.fromObject = function fromObject(object) {
            if (object instanceof $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer)
            {return object;}
            var message = new $root.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer();
            if (object.teamUser != null) {
              if (typeof object.teamUser !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.teamUser: object expected');}
              message.teamUser = $root.merico.vdev.enterprise.TeamUser.fromObject(object.teamUser);
            }
            if (object.tagToPointMap) {
              if (typeof object.tagToPointMap !== 'object')
              {throw TypeError('.merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer.tagToPointMap: object expected');}
              message.tagToPointMap = {};
              for (var keys = Object.keys(object.tagToPointMap), i = 0; i < keys.length; ++i)
              {message.tagToPointMap[keys[i]] = Number(object.tagToPointMap[keys[i]]);}
            }
            return message;
          };

          /**
                     * Creates a plain object from a Developer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @static
                     * @param {merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer} message Developer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
          Developer.toObject = function toObject(message, options) {
            if (!options)
            {options = {};}
            var object = {};
            if (options.objects || options.defaults)
            {object.tagToPointMap = {};}
            if (options.defaults)
            {object.teamUser = null;}
            if (message.teamUser != null && message.hasOwnProperty('teamUser'))
            {object.teamUser = $root.merico.vdev.enterprise.TeamUser.toObject(message.teamUser, options);}
            var keys2;
            if (message.tagToPointMap && (keys2 = Object.keys(message.tagToPointMap)).length) {
              object.tagToPointMap = {};
              for (var j = 0; j < keys2.length; ++j)
              {object.tagToPointMap[keys2[j]] = options.json && !isFinite(message.tagToPointMap[keys2[j]]) ? String(message.tagToPointMap[keys2[j]]) : message.tagToPointMap[keys2[j]];}
            }
            return object;
          };

          /**
                     * Converts this Developer to JSON.
                     * @function toJSON
                     * @memberof merico.vdev.enterprise.GetTeamUserTagsByReportIdResponse.Developer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
          Developer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Developer;
        })();

        return GetTeamUserTagsByReportIdResponse;
      })();

      enterprise.ListTagsRequest = (function() {

        /**
                 * Properties of a ListTagsRequest.
                 * @memberof merico.vdev.enterprise
                 * @interface IListTagsRequest
                 */

        /**
                 * Constructs a new ListTagsRequest.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a ListTagsRequest.
                 * @implements IListTagsRequest
                 * @constructor
                 * @param {merico.vdev.enterprise.IListTagsRequest=} [properties] Properties to set
                 */
        function ListTagsRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Creates a new ListTagsRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {merico.vdev.enterprise.IListTagsRequest=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.ListTagsRequest} ListTagsRequest instance
                 */
        ListTagsRequest.create = function create(properties) {
          return new ListTagsRequest(properties);
        };

        /**
                 * Encodes the specified ListTagsRequest message. Does not implicitly {@link merico.vdev.enterprise.ListTagsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {merico.vdev.enterprise.IListTagsRequest} message ListTagsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListTagsRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          return writer;
        };

        /**
                 * Encodes the specified ListTagsRequest message, length delimited. Does not implicitly {@link merico.vdev.enterprise.ListTagsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {merico.vdev.enterprise.IListTagsRequest} message ListTagsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListTagsRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ListTagsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.ListTagsRequest} ListTagsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListTagsRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.ListTagsRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ListTagsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.ListTagsRequest} ListTagsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListTagsRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ListTagsRequest message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ListTagsRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          return null;
        };

        /**
                 * Creates a ListTagsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.ListTagsRequest} ListTagsRequest
                 */
        ListTagsRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.ListTagsRequest)
          {return object;}
          return new $root.merico.vdev.enterprise.ListTagsRequest();
        };

        /**
                 * Creates a plain object from a ListTagsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @static
                 * @param {merico.vdev.enterprise.ListTagsRequest} message ListTagsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ListTagsRequest.toObject = function toObject() {
          return {};
        };

        /**
                 * Converts this ListTagsRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.ListTagsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ListTagsRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ListTagsRequest;
      })();

      enterprise.ListTagsResponse = (function() {

        /**
                 * Properties of a ListTagsResponse.
                 * @memberof merico.vdev.enterprise
                 * @interface IListTagsResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] ListTagsResponse status
                 * @property {Array.<merico.vdev.enterprise.ListTagsResponse.ITag>|null} [tags] ListTagsResponse tags
                 */

        /**
                 * Constructs a new ListTagsResponse.
                 * @memberof merico.vdev.enterprise
                 * @classdesc Represents a ListTagsResponse.
                 * @implements IListTagsResponse
                 * @constructor
                 * @param {merico.vdev.enterprise.IListTagsResponse=} [properties] Properties to set
                 */
        function ListTagsResponse(properties) {
          this.tags = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ListTagsResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @instance
                 */
        ListTagsResponse.prototype.status = null;

        /**
                 * ListTagsResponse tags.
                 * @member {Array.<merico.vdev.enterprise.ListTagsResponse.ITag>} tags
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @instance
                 */
        ListTagsResponse.prototype.tags = $util.emptyArray;

        /**
                 * Creates a new ListTagsResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {merico.vdev.enterprise.IListTagsResponse=} [properties] Properties to set
                 * @returns {merico.vdev.enterprise.ListTagsResponse} ListTagsResponse instance
                 */
        ListTagsResponse.create = function create(properties) {
          return new ListTagsResponse(properties);
        };

        /**
                 * Encodes the specified ListTagsResponse message. Does not implicitly {@link merico.vdev.enterprise.ListTagsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {merico.vdev.enterprise.IListTagsResponse} message ListTagsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListTagsResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.tags != null && message.tags.length)
          {for (var i = 0; i < message.tags.length; ++i)
          {$root.merico.vdev.enterprise.ListTagsResponse.Tag.encode(message.tags[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified ListTagsResponse message, length delimited. Does not implicitly {@link merico.vdev.enterprise.ListTagsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {merico.vdev.enterprise.IListTagsResponse} message ListTagsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ListTagsResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ListTagsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.enterprise.ListTagsResponse} ListTagsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListTagsResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.ListTagsResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                if (!(message.tags && message.tags.length))
                {message.tags = [];}
                message.tags.push($root.merico.vdev.enterprise.ListTagsResponse.Tag.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ListTagsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.enterprise.ListTagsResponse} ListTagsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ListTagsResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ListTagsResponse message.
                 * @function verify
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ListTagsResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.tags != null && message.hasOwnProperty('tags')) {
            if (!Array.isArray(message.tags))
            {return 'tags: array expected';}
            for (var i = 0; i < message.tags.length; ++i) {
              var error = $root.merico.vdev.enterprise.ListTagsResponse.Tag.verify(message.tags[i]);
              if (error)
              {return 'tags.' + error;}
            }
          }
          return null;
        };

        /**
                 * Creates a ListTagsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.enterprise.ListTagsResponse} ListTagsResponse
                 */
        ListTagsResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.enterprise.ListTagsResponse)
          {return object;}
          var message = new $root.merico.vdev.enterprise.ListTagsResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.enterprise.ListTagsResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          if (object.tags) {
            if (!Array.isArray(object.tags))
            {throw TypeError('.merico.vdev.enterprise.ListTagsResponse.tags: array expected');}
            message.tags = [];
            for (var i = 0; i < object.tags.length; ++i) {
              if (typeof object.tags[i] !== 'object')
              {throw TypeError('.merico.vdev.enterprise.ListTagsResponse.tags: object expected');}
              message.tags[i] = $root.merico.vdev.enterprise.ListTagsResponse.Tag.fromObject(object.tags[i]);
            }
          }
          return message;
        };

        /**
                 * Creates a plain object from a ListTagsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @static
                 * @param {merico.vdev.enterprise.ListTagsResponse} message ListTagsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ListTagsResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults)
          {object.tags = [];}
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          if (message.tags && message.tags.length) {
            object.tags = [];
            for (var j = 0; j < message.tags.length; ++j)
            {object.tags[j] = $root.merico.vdev.enterprise.ListTagsResponse.Tag.toObject(message.tags[j], options);}
          }
          return object;
        };

        /**
                 * Converts this ListTagsResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.enterprise.ListTagsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ListTagsResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ListTagsResponse.Tag = (function() {

          /**
                     * Properties of a Tag.
                     * @memberof merico.vdev.enterprise.ListTagsResponse
                     * @interface ITag
                     * @property {number|null} [tempId] Tag tempId
                     * @property {string|null} [tagName] Tag tagName
                     * @property {string|null} [tagNameCn] Tag tagNameCn
                     */

          /**
                     * Constructs a new Tag.
                     * @memberof merico.vdev.enterprise.ListTagsResponse
                     * @classdesc Represents a Tag.
                     * @implements ITag
                     * @constructor
                     * @param {merico.vdev.enterprise.ListTagsResponse.ITag=} [properties] Properties to set
                     */
          function Tag(properties) {
            if (properties)
            {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            {if (properties[keys[i]] != null)
            {this[keys[i]] = properties[keys[i]];}}}
          }

          /**
                     * Tag tempId.
                     * @member {number} tempId
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @instance
                     */
          Tag.prototype.tempId = 0;

          /**
                     * Tag tagName.
                     * @member {string} tagName
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @instance
                     */
          Tag.prototype.tagName = '';

          /**
                     * Tag tagNameCn.
                     * @member {string} tagNameCn
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @instance
                     */
          Tag.prototype.tagNameCn = '';

          /**
                     * Creates a new Tag instance using the specified properties.
                     * @function create
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {merico.vdev.enterprise.ListTagsResponse.ITag=} [properties] Properties to set
                     * @returns {merico.vdev.enterprise.ListTagsResponse.Tag} Tag instance
                     */
          Tag.create = function create(properties) {
            return new Tag(properties);
          };

          /**
                     * Encodes the specified Tag message. Does not implicitly {@link merico.vdev.enterprise.ListTagsResponse.Tag.verify|verify} messages.
                     * @function encode
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {merico.vdev.enterprise.ListTagsResponse.ITag} message Tag message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          Tag.encode = function encode(message, writer) {
            if (!writer)
            {writer = $Writer.create();}
            if (message.tempId != null && message.hasOwnProperty('tempId'))
            {writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tempId);}
            if (message.tagName != null && message.hasOwnProperty('tagName'))
            {writer.uint32(/* id 2, wireType 2 =*/18).string(message.tagName);}
            if (message.tagNameCn != null && message.hasOwnProperty('tagNameCn'))
            {writer.uint32(/* id 3, wireType 2 =*/26).string(message.tagNameCn);}
            return writer;
          };

          /**
                     * Encodes the specified Tag message, length delimited. Does not implicitly {@link merico.vdev.enterprise.ListTagsResponse.Tag.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {merico.vdev.enterprise.ListTagsResponse.ITag} message Tag message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
          Tag.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };

          /**
                     * Decodes a Tag message from the specified reader or buffer.
                     * @function decode
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {merico.vdev.enterprise.ListTagsResponse.Tag} Tag
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          Tag.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
            {reader = $Reader.create(reader);}
            var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.enterprise.ListTagsResponse.Tag();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.tempId = reader.int32();
                  break;
                case 2:
                  message.tagName = reader.string();
                  break;
                case 3:
                  message.tagNameCn = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };

          /**
                     * Decodes a Tag message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {merico.vdev.enterprise.ListTagsResponse.Tag} Tag
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
          Tag.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
            {reader = new $Reader(reader);}
            return this.decode(reader, reader.uint32());
          };

          /**
                     * Verifies a Tag message.
                     * @function verify
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
          Tag.verify = function verify(message) {
            if (typeof message !== 'object' || message === null)
            {return 'object expected';}
            if (message.tempId != null && message.hasOwnProperty('tempId'))
            {if (!$util.isInteger(message.tempId))
            {return 'tempId: integer expected';}}
            if (message.tagName != null && message.hasOwnProperty('tagName'))
            {if (!$util.isString(message.tagName))
            {return 'tagName: string expected';}}
            if (message.tagNameCn != null && message.hasOwnProperty('tagNameCn'))
            {if (!$util.isString(message.tagNameCn))
            {return 'tagNameCn: string expected';}}
            return null;
          };

          /**
                     * Creates a Tag message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {merico.vdev.enterprise.ListTagsResponse.Tag} Tag
                     */
          Tag.fromObject = function fromObject(object) {
            if (object instanceof $root.merico.vdev.enterprise.ListTagsResponse.Tag)
            {return object;}
            var message = new $root.merico.vdev.enterprise.ListTagsResponse.Tag();
            if (object.tempId != null)
            {message.tempId = object.tempId | 0;}
            if (object.tagName != null)
            {message.tagName = String(object.tagName);}
            if (object.tagNameCn != null)
            {message.tagNameCn = String(object.tagNameCn);}
            return message;
          };

          /**
                     * Creates a plain object from a Tag message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @static
                     * @param {merico.vdev.enterprise.ListTagsResponse.Tag} message Tag
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
          Tag.toObject = function toObject(message, options) {
            if (!options)
            {options = {};}
            var object = {};
            if (options.defaults) {
              object.tempId = 0;
              object.tagName = '';
              object.tagNameCn = '';
            }
            if (message.tempId != null && message.hasOwnProperty('tempId'))
            {object.tempId = message.tempId;}
            if (message.tagName != null && message.hasOwnProperty('tagName'))
            {object.tagName = message.tagName;}
            if (message.tagNameCn != null && message.hasOwnProperty('tagNameCn'))
            {object.tagNameCn = message.tagNameCn;}
            return object;
          };

          /**
                     * Converts this Tag to JSON.
                     * @function toJSON
                     * @memberof merico.vdev.enterprise.ListTagsResponse.Tag
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
          Tag.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Tag;
        })();

        return ListTagsResponse;
      })();

      return enterprise;
    })();

    vdev.user = (function() {

      /**
             * Namespace user.
             * @memberof merico.vdev
             * @namespace
             */
      var user = {};

      user.Link = (function() {

        /**
                 * Properties of a Link.
                 * @memberof merico.vdev.user
                 * @interface ILink
                 * @property {merico.vdev.user.Link.Type|null} [type] Link type
                 * @property {string|null} [url] Link url
                 * @property {string|null} [iconUrl] Link iconUrl
                 */

        /**
                 * Constructs a new Link.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a Link.
                 * @implements ILink
                 * @constructor
                 * @param {merico.vdev.user.ILink=} [properties] Properties to set
                 */
        function Link(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Link type.
                 * @member {merico.vdev.user.Link.Type} type
                 * @memberof merico.vdev.user.Link
                 * @instance
                 */
        Link.prototype.type = 0;

        /**
                 * Link url.
                 * @member {string} url
                 * @memberof merico.vdev.user.Link
                 * @instance
                 */
        Link.prototype.url = '';

        /**
                 * Link iconUrl.
                 * @member {string} iconUrl
                 * @memberof merico.vdev.user.Link
                 * @instance
                 */
        Link.prototype.iconUrl = '';

        /**
                 * Creates a new Link instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {merico.vdev.user.ILink=} [properties] Properties to set
                 * @returns {merico.vdev.user.Link} Link instance
                 */
        Link.create = function create(properties) {
          return new Link(properties);
        };

        /**
                 * Encodes the specified Link message. Does not implicitly {@link merico.vdev.user.Link.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {merico.vdev.user.ILink} message Link message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        Link.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.type != null && message.hasOwnProperty('type'))
          {writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);}
          if (message.url != null && message.hasOwnProperty('url'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);}
          if (message.iconUrl != null && message.hasOwnProperty('iconUrl'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.iconUrl);}
          return writer;
        };

        /**
                 * Encodes the specified Link message, length delimited. Does not implicitly {@link merico.vdev.user.Link.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {merico.vdev.user.ILink} message Link message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        Link.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a Link message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.Link} Link
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        Link.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.Link();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.type = reader.int32();
                break;
              case 2:
                message.url = reader.string();
                break;
              case 3:
                message.iconUrl = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a Link message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.Link} Link
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        Link.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a Link message.
                 * @function verify
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        Link.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.type != null && message.hasOwnProperty('type'))
          {switch (message.type) {
            default:
              return 'type: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 10:
            case 20:
            case 21:
            case 22:
            case 30:
            case 31:
              break;
          }}
          if (message.url != null && message.hasOwnProperty('url'))
          {if (!$util.isString(message.url))
          {return 'url: string expected';}}
          if (message.iconUrl != null && message.hasOwnProperty('iconUrl'))
          {if (!$util.isString(message.iconUrl))
          {return 'iconUrl: string expected';}}
          return null;
        };

        /**
                 * Creates a Link message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.Link} Link
                 */
        Link.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.Link)
          {return object;}
          var message = new $root.merico.vdev.user.Link();
          switch (object.type) {
            case 'WEB':
            case 0:
              message.type = 0;
              break;
            case 'GITHUB':
            case 1:
              message.type = 1;
              break;
            case 'GITLAB':
            case 2:
              message.type = 2;
              break;
            case 'BITBUCKET':
            case 3:
              message.type = 3;
              break;
            case 'GITEE':
            case 10:
              message.type = 10;
              break;
            case 'FACEBOOK':
            case 20:
              message.type = 20;
              break;
            case 'TWITTER':
            case 21:
              message.type = 21;
              break;
            case 'SKYPE':
            case 22:
              message.type = 22;
              break;
            case 'WECHAT':
            case 30:
              message.type = 30;
              break;
            case 'WEIBO':
            case 31:
              message.type = 31;
              break;
          }
          if (object.url != null)
          {message.url = String(object.url);}
          if (object.iconUrl != null)
          {message.iconUrl = String(object.iconUrl);}
          return message;
        };

        /**
                 * Creates a plain object from a Link message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.Link
                 * @static
                 * @param {merico.vdev.user.Link} message Link
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        Link.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.type = options.enums === String ? 'WEB' : 0;
            object.url = '';
            object.iconUrl = '';
          }
          if (message.type != null && message.hasOwnProperty('type'))
          {object.type = options.enums === String ? $root.merico.vdev.user.Link.Type[message.type] : message.type;}
          if (message.url != null && message.hasOwnProperty('url'))
          {object.url = message.url;}
          if (message.iconUrl != null && message.hasOwnProperty('iconUrl'))
          {object.iconUrl = message.iconUrl;}
          return object;
        };

        /**
                 * Converts this Link to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.Link
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        Link.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
                 * Type enum.
                 * @name merico.vdev.user.Link.Type
                 * @enum {string}
                 * @property {number} WEB=0 WEB value
                 * @property {number} GITHUB=1 GITHUB value
                 * @property {number} GITLAB=2 GITLAB value
                 * @property {number} BITBUCKET=3 BITBUCKET value
                 * @property {number} GITEE=10 GITEE value
                 * @property {number} FACEBOOK=20 FACEBOOK value
                 * @property {number} TWITTER=21 TWITTER value
                 * @property {number} SKYPE=22 SKYPE value
                 * @property {number} WECHAT=30 WECHAT value
                 * @property {number} WEIBO=31 WEIBO value
                 */
        Link.Type = (function() {
          var valuesById = {}; var values = Object.create(valuesById);
          values[valuesById[0] = 'WEB'] = 0;
          values[valuesById[1] = 'GITHUB'] = 1;
          values[valuesById[2] = 'GITLAB'] = 2;
          values[valuesById[3] = 'BITBUCKET'] = 3;
          values[valuesById[10] = 'GITEE'] = 10;
          values[valuesById[20] = 'FACEBOOK'] = 20;
          values[valuesById[21] = 'TWITTER'] = 21;
          values[valuesById[22] = 'SKYPE'] = 22;
          values[valuesById[30] = 'WECHAT'] = 30;
          values[valuesById[31] = 'WEIBO'] = 31;
          return values;
        })();

        return Link;
      })();

      user.User = (function() {

        /**
                 * Properties of a User.
                 * @memberof merico.vdev.user
                 * @interface IUser
                 * @property {string|null} [userId] User userId
                 * @property {string|null} [username] User username
                 * @property {string|null} [fullName] User fullName
                 * @property {string|null} [primaryEmail] User primaryEmail
                 * @property {Array.<string>|null} [emails] User emails
                 * @property {string|null} [phoneNumber] User phoneNumber
                 * @property {string|null} [location] User location
                 * @property {Array.<merico.vdev.user.ILink>|null} [links] User links
                 * @property {string|null} [bio] User bio
                 */

        /**
                 * Constructs a new User.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a User.
                 * @implements IUser
                 * @constructor
                 * @param {merico.vdev.user.IUser=} [properties] Properties to set
                 */
        function User(properties) {
          this.emails = [];
          this.links = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * User userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.userId = '';

        /**
                 * User username.
                 * @member {string} username
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.username = '';

        /**
                 * User fullName.
                 * @member {string} fullName
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.fullName = '';

        /**
                 * User primaryEmail.
                 * @member {string} primaryEmail
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.primaryEmail = '';

        /**
                 * User emails.
                 * @member {Array.<string>} emails
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.emails = $util.emptyArray;

        /**
                 * User phoneNumber.
                 * @member {string} phoneNumber
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.phoneNumber = '';

        /**
                 * User location.
                 * @member {string} location
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.location = '';

        /**
                 * User links.
                 * @member {Array.<merico.vdev.user.ILink>} links
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.links = $util.emptyArray;

        /**
                 * User bio.
                 * @member {string} bio
                 * @memberof merico.vdev.user.User
                 * @instance
                 */
        User.prototype.bio = '';

        /**
                 * Creates a new User instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {merico.vdev.user.IUser=} [properties] Properties to set
                 * @returns {merico.vdev.user.User} User instance
                 */
        User.create = function create(properties) {
          return new User(properties);
        };

        /**
                 * Encodes the specified User message. Does not implicitly {@link merico.vdev.user.User.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {merico.vdev.user.IUser} message User message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        User.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.username != null && message.hasOwnProperty('username'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);}
          if (message.fullName != null && message.hasOwnProperty('fullName'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.fullName);}
          if (message.primaryEmail != null && message.hasOwnProperty('primaryEmail'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.primaryEmail);}
          if (message.emails != null && message.emails.length)
          {for (var i = 0; i < message.emails.length; ++i)
          {writer.uint32(/* id 10, wireType 2 =*/82).string(message.emails[i]);}}
          if (message.phoneNumber != null && message.hasOwnProperty('phoneNumber'))
          {writer.uint32(/* id 11, wireType 2 =*/90).string(message.phoneNumber);}
          if (message.location != null && message.hasOwnProperty('location'))
          {writer.uint32(/* id 12, wireType 2 =*/98).string(message.location);}
          if (message.links != null && message.links.length)
          {for (var i = 0; i < message.links.length; ++i)
          {$root.merico.vdev.user.Link.encode(message.links[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();}}
          if (message.bio != null && message.hasOwnProperty('bio'))
          {writer.uint32(/* id 21, wireType 2 =*/170).string(message.bio);}
          return writer;
        };

        /**
                 * Encodes the specified User message, length delimited. Does not implicitly {@link merico.vdev.user.User.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {merico.vdev.user.IUser} message User message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        User.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a User message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.User} User
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        User.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.User();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.username = reader.string();
                break;
              case 3:
                message.fullName = reader.string();
                break;
              case 4:
                message.primaryEmail = reader.string();
                break;
              case 10:
                if (!(message.emails && message.emails.length))
                {message.emails = [];}
                message.emails.push(reader.string());
                break;
              case 11:
                message.phoneNumber = reader.string();
                break;
              case 12:
                message.location = reader.string();
                break;
              case 20:
                if (!(message.links && message.links.length))
                {message.links = [];}
                message.links.push($root.merico.vdev.user.Link.decode(reader, reader.uint32()));
                break;
              case 21:
                message.bio = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a User message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.User} User
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        User.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a User message.
                 * @function verify
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        User.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.username != null && message.hasOwnProperty('username'))
          {if (!$util.isString(message.username))
          {return 'username: string expected';}}
          if (message.fullName != null && message.hasOwnProperty('fullName'))
          {if (!$util.isString(message.fullName))
          {return 'fullName: string expected';}}
          if (message.primaryEmail != null && message.hasOwnProperty('primaryEmail'))
          {if (!$util.isString(message.primaryEmail))
          {return 'primaryEmail: string expected';}}
          if (message.emails != null && message.hasOwnProperty('emails')) {
            if (!Array.isArray(message.emails))
            {return 'emails: array expected';}
            for (var i = 0; i < message.emails.length; ++i)
            {if (!$util.isString(message.emails[i]))
            {return 'emails: string[] expected';}}
          }
          if (message.phoneNumber != null && message.hasOwnProperty('phoneNumber'))
          {if (!$util.isString(message.phoneNumber))
          {return 'phoneNumber: string expected';}}
          if (message.location != null && message.hasOwnProperty('location'))
          {if (!$util.isString(message.location))
          {return 'location: string expected';}}
          if (message.links != null && message.hasOwnProperty('links')) {
            if (!Array.isArray(message.links))
            {return 'links: array expected';}
            for (var i = 0; i < message.links.length; ++i) {
              var error = $root.merico.vdev.user.Link.verify(message.links[i]);
              if (error)
              {return 'links.' + error;}
            }
          }
          if (message.bio != null && message.hasOwnProperty('bio'))
          {if (!$util.isString(message.bio))
          {return 'bio: string expected';}}
          return null;
        };

        /**
                 * Creates a User message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.User} User
                 */
        User.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.User)
          {return object;}
          var message = new $root.merico.vdev.user.User();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.username != null)
          {message.username = String(object.username);}
          if (object.fullName != null)
          {message.fullName = String(object.fullName);}
          if (object.primaryEmail != null)
          {message.primaryEmail = String(object.primaryEmail);}
          if (object.emails) {
            if (!Array.isArray(object.emails))
            {throw TypeError('.merico.vdev.user.User.emails: array expected');}
            message.emails = [];
            for (var i = 0; i < object.emails.length; ++i)
            {message.emails[i] = String(object.emails[i]);}
          }
          if (object.phoneNumber != null)
          {message.phoneNumber = String(object.phoneNumber);}
          if (object.location != null)
          {message.location = String(object.location);}
          if (object.links) {
            if (!Array.isArray(object.links))
            {throw TypeError('.merico.vdev.user.User.links: array expected');}
            message.links = [];
            for (var i = 0; i < object.links.length; ++i) {
              if (typeof object.links[i] !== 'object')
              {throw TypeError('.merico.vdev.user.User.links: object expected');}
              message.links[i] = $root.merico.vdev.user.Link.fromObject(object.links[i]);
            }
          }
          if (object.bio != null)
          {message.bio = String(object.bio);}
          return message;
        };

        /**
                 * Creates a plain object from a User message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.User
                 * @static
                 * @param {merico.vdev.user.User} message User
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        User.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults) {
            object.emails = [];
            object.links = [];
          }
          if (options.defaults) {
            object.userId = '';
            object.username = '';
            object.fullName = '';
            object.primaryEmail = '';
            object.phoneNumber = '';
            object.location = '';
            object.bio = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.username != null && message.hasOwnProperty('username'))
          {object.username = message.username;}
          if (message.fullName != null && message.hasOwnProperty('fullName'))
          {object.fullName = message.fullName;}
          if (message.primaryEmail != null && message.hasOwnProperty('primaryEmail'))
          {object.primaryEmail = message.primaryEmail;}
          if (message.emails && message.emails.length) {
            object.emails = [];
            for (var j = 0; j < message.emails.length; ++j)
            {object.emails[j] = message.emails[j];}
          }
          if (message.phoneNumber != null && message.hasOwnProperty('phoneNumber'))
          {object.phoneNumber = message.phoneNumber;}
          if (message.location != null && message.hasOwnProperty('location'))
          {object.location = message.location;}
          if (message.links && message.links.length) {
            object.links = [];
            for (var j = 0; j < message.links.length; ++j)
            {object.links[j] = $root.merico.vdev.user.Link.toObject(message.links[j], options);}
          }
          if (message.bio != null && message.hasOwnProperty('bio'))
          {object.bio = message.bio;}
          return object;
        };

        /**
                 * Converts this User to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.User
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        User.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return User;
      })();

      user.GetUserRequest = (function() {

        /**
                 * Properties of a GetUserRequest.
                 * @memberof merico.vdev.user
                 * @interface IGetUserRequest
                 * @property {string|null} [userId] GetUserRequest userId
                 */

        /**
                 * Constructs a new GetUserRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a GetUserRequest.
                 * @implements IGetUserRequest
                 * @constructor
                 * @param {merico.vdev.user.IGetUserRequest=} [properties] Properties to set
                 */
        function GetUserRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetUserRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.GetUserRequest
                 * @instance
                 */
        GetUserRequest.prototype.userId = '';

        /**
                 * Creates a new GetUserRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {merico.vdev.user.IGetUserRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.GetUserRequest} GetUserRequest instance
                 */
        GetUserRequest.create = function create(properties) {
          return new GetUserRequest(properties);
        };

        /**
                 * Encodes the specified GetUserRequest message. Does not implicitly {@link merico.vdev.user.GetUserRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {merico.vdev.user.IGetUserRequest} message GetUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetUserRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          return writer;
        };

        /**
                 * Encodes the specified GetUserRequest message, length delimited. Does not implicitly {@link merico.vdev.user.GetUserRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {merico.vdev.user.IGetUserRequest} message GetUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetUserRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.GetUserRequest} GetUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetUserRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.GetUserRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetUserRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.GetUserRequest} GetUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetUserRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetUserRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetUserRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          return null;
        };

        /**
                 * Creates a GetUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.GetUserRequest} GetUserRequest
                 */
        GetUserRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.GetUserRequest)
          {return object;}
          var message = new $root.merico.vdev.user.GetUserRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          return message;
        };

        /**
                 * Creates a plain object from a GetUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.GetUserRequest
                 * @static
                 * @param {merico.vdev.user.GetUserRequest} message GetUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetUserRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.userId = '';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          return object;
        };

        /**
                 * Converts this GetUserRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.GetUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetUserRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetUserRequest;
      })();

      user.GetUserResponse = (function() {

        /**
                 * Properties of a GetUserResponse.
                 * @memberof merico.vdev.user
                 * @interface IGetUserResponse
                 * @property {boolean|null} [success] GetUserResponse success
                 * @property {merico.vdev.ErrorMessage|null} [error] GetUserResponse error
                 * @property {merico.vdev.user.IUser|null} [user] GetUserResponse user
                 */

        /**
                 * Constructs a new GetUserResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a GetUserResponse.
                 * @implements IGetUserResponse
                 * @constructor
                 * @param {merico.vdev.user.IGetUserResponse=} [properties] Properties to set
                 */
        function GetUserResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetUserResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.GetUserResponse
                 * @instance
                 */
        GetUserResponse.prototype.success = false;

        /**
                 * GetUserResponse error.
                 * @member {merico.vdev.ErrorMessage} error
                 * @memberof merico.vdev.user.GetUserResponse
                 * @instance
                 */
        GetUserResponse.prototype.error = 0;

        /**
                 * GetUserResponse user.
                 * @member {merico.vdev.user.IUser|null|undefined} user
                 * @memberof merico.vdev.user.GetUserResponse
                 * @instance
                 */
        GetUserResponse.prototype.user = null;

        /**
                 * Creates a new GetUserResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {merico.vdev.user.IGetUserResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.GetUserResponse} GetUserResponse instance
                 */
        GetUserResponse.create = function create(properties) {
          return new GetUserResponse(properties);
        };

        /**
                 * Encodes the specified GetUserResponse message. Does not implicitly {@link merico.vdev.user.GetUserResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {merico.vdev.user.IGetUserResponse} message GetUserResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetUserResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.error != null && message.hasOwnProperty('error'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.error);}
          if (message.user != null && message.hasOwnProperty('user'))
          {$root.merico.vdev.user.User.encode(message.user, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified GetUserResponse message, length delimited. Does not implicitly {@link merico.vdev.user.GetUserResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {merico.vdev.user.IGetUserResponse} message GetUserResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetUserResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetUserResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.GetUserResponse} GetUserResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetUserResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.GetUserResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.error = reader.int32();
                break;
              case 3:
                message.user = $root.merico.vdev.user.User.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetUserResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.GetUserResponse} GetUserResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetUserResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetUserResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetUserResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.error != null && message.hasOwnProperty('error'))
          {switch (message.error) {
            default:
              return 'error: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          if (message.user != null && message.hasOwnProperty('user')) {
            var error = $root.merico.vdev.user.User.verify(message.user);
            if (error)
            {return 'user.' + error;}
          }
          return null;
        };

        /**
                 * Creates a GetUserResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.GetUserResponse} GetUserResponse
                 */
        GetUserResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.GetUserResponse)
          {return object;}
          var message = new $root.merico.vdev.user.GetUserResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.error) {
            case 'EMPTY':
            case 0:
              message.error = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.error = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.error = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.error = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.error = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.error = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.error = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.error = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.error = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.error = 9;
              break;
          }
          if (object.user != null) {
            if (typeof object.user !== 'object')
            {throw TypeError('.merico.vdev.user.GetUserResponse.user: object expected');}
            message.user = $root.merico.vdev.user.User.fromObject(object.user);
          }
          return message;
        };

        /**
                 * Creates a plain object from a GetUserResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.GetUserResponse
                 * @static
                 * @param {merico.vdev.user.GetUserResponse} message GetUserResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetUserResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.error = options.enums === String ? 'EMPTY' : 0;
            object.user = null;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.error != null && message.hasOwnProperty('error'))
          {object.error = options.enums === String ? $root.merico.vdev.ErrorMessage[message.error] : message.error;}
          if (message.user != null && message.hasOwnProperty('user'))
          {object.user = $root.merico.vdev.user.User.toObject(message.user, options);}
          return object;
        };

        /**
                 * Converts this GetUserResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.GetUserResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetUserResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetUserResponse;
      })();

      user.UpdateUsernameRequest = (function() {

        /**
                 * Properties of an UpdateUsernameRequest.
                 * @memberof merico.vdev.user
                 * @interface IUpdateUsernameRequest
                 * @property {string|null} [userId] UpdateUsernameRequest userId
                 * @property {string|null} [newName] UpdateUsernameRequest newName
                 */

        /**
                 * Constructs a new UpdateUsernameRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateUsernameRequest.
                 * @implements IUpdateUsernameRequest
                 * @constructor
                 * @param {merico.vdev.user.IUpdateUsernameRequest=} [properties] Properties to set
                 */
        function UpdateUsernameRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateUsernameRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @instance
                 */
        UpdateUsernameRequest.prototype.userId = '';

        /**
                 * UpdateUsernameRequest newName.
                 * @member {string} newName
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @instance
                 */
        UpdateUsernameRequest.prototype.newName = '';

        /**
                 * Creates a new UpdateUsernameRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateUsernameRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateUsernameRequest} UpdateUsernameRequest instance
                 */
        UpdateUsernameRequest.create = function create(properties) {
          return new UpdateUsernameRequest(properties);
        };

        /**
                 * Encodes the specified UpdateUsernameRequest message. Does not implicitly {@link merico.vdev.user.UpdateUsernameRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateUsernameRequest} message UpdateUsernameRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateUsernameRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.newName != null && message.hasOwnProperty('newName'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.newName);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateUsernameRequest message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateUsernameRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateUsernameRequest} message UpdateUsernameRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateUsernameRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateUsernameRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateUsernameRequest} UpdateUsernameRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateUsernameRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateUsernameRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.newName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateUsernameRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateUsernameRequest} UpdateUsernameRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateUsernameRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateUsernameRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateUsernameRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.newName != null && message.hasOwnProperty('newName'))
          {if (!$util.isString(message.newName))
          {return 'newName: string expected';}}
          return null;
        };

        /**
                 * Creates an UpdateUsernameRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateUsernameRequest} UpdateUsernameRequest
                 */
        UpdateUsernameRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateUsernameRequest)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateUsernameRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.newName != null)
          {message.newName = String(object.newName);}
          return message;
        };

        /**
                 * Creates a plain object from an UpdateUsernameRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @static
                 * @param {merico.vdev.user.UpdateUsernameRequest} message UpdateUsernameRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateUsernameRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.newName = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.newName != null && message.hasOwnProperty('newName'))
          {object.newName = message.newName;}
          return object;
        };

        /**
                 * Converts this UpdateUsernameRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateUsernameRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateUsernameRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateUsernameRequest;
      })();

      user.UpdateUsernameResponse = (function() {

        /**
                 * Properties of an UpdateUsernameResponse.
                 * @memberof merico.vdev.user
                 * @interface IUpdateUsernameResponse
                 * @property {boolean|null} [success] UpdateUsernameResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] UpdateUsernameResponse message
                 */

        /**
                 * Constructs a new UpdateUsernameResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateUsernameResponse.
                 * @implements IUpdateUsernameResponse
                 * @constructor
                 * @param {merico.vdev.user.IUpdateUsernameResponse=} [properties] Properties to set
                 */
        function UpdateUsernameResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateUsernameResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @instance
                 */
        UpdateUsernameResponse.prototype.success = false;

        /**
                 * UpdateUsernameResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @instance
                 */
        UpdateUsernameResponse.prototype.message = 0;

        /**
                 * Creates a new UpdateUsernameResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateUsernameResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateUsernameResponse} UpdateUsernameResponse instance
                 */
        UpdateUsernameResponse.create = function create(properties) {
          return new UpdateUsernameResponse(properties);
        };

        /**
                 * Encodes the specified UpdateUsernameResponse message. Does not implicitly {@link merico.vdev.user.UpdateUsernameResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateUsernameResponse} message UpdateUsernameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateUsernameResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateUsernameResponse message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateUsernameResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateUsernameResponse} message UpdateUsernameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateUsernameResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateUsernameResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateUsernameResponse} UpdateUsernameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateUsernameResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateUsernameResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateUsernameResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateUsernameResponse} UpdateUsernameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateUsernameResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateUsernameResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateUsernameResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an UpdateUsernameResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateUsernameResponse} UpdateUsernameResponse
                 */
        UpdateUsernameResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateUsernameResponse)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateUsernameResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an UpdateUsernameResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @static
                 * @param {merico.vdev.user.UpdateUsernameResponse} message UpdateUsernameResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateUsernameResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this UpdateUsernameResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateUsernameResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateUsernameResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateUsernameResponse;
      })();

      user.UpdateFullNameRequest = (function() {

        /**
                 * Properties of an UpdateFullNameRequest.
                 * @memberof merico.vdev.user
                 * @interface IUpdateFullNameRequest
                 * @property {string|null} [userId] UpdateFullNameRequest userId
                 * @property {string|null} [newName] UpdateFullNameRequest newName
                 */

        /**
                 * Constructs a new UpdateFullNameRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateFullNameRequest.
                 * @implements IUpdateFullNameRequest
                 * @constructor
                 * @param {merico.vdev.user.IUpdateFullNameRequest=} [properties] Properties to set
                 */
        function UpdateFullNameRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateFullNameRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @instance
                 */
        UpdateFullNameRequest.prototype.userId = '';

        /**
                 * UpdateFullNameRequest newName.
                 * @member {string} newName
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @instance
                 */
        UpdateFullNameRequest.prototype.newName = '';

        /**
                 * Creates a new UpdateFullNameRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateFullNameRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateFullNameRequest} UpdateFullNameRequest instance
                 */
        UpdateFullNameRequest.create = function create(properties) {
          return new UpdateFullNameRequest(properties);
        };

        /**
                 * Encodes the specified UpdateFullNameRequest message. Does not implicitly {@link merico.vdev.user.UpdateFullNameRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateFullNameRequest} message UpdateFullNameRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateFullNameRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.newName != null && message.hasOwnProperty('newName'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.newName);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateFullNameRequest message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateFullNameRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateFullNameRequest} message UpdateFullNameRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateFullNameRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateFullNameRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateFullNameRequest} UpdateFullNameRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateFullNameRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateFullNameRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.newName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateFullNameRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateFullNameRequest} UpdateFullNameRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateFullNameRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateFullNameRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateFullNameRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.newName != null && message.hasOwnProperty('newName'))
          {if (!$util.isString(message.newName))
          {return 'newName: string expected';}}
          return null;
        };

        /**
                 * Creates an UpdateFullNameRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateFullNameRequest} UpdateFullNameRequest
                 */
        UpdateFullNameRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateFullNameRequest)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateFullNameRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.newName != null)
          {message.newName = String(object.newName);}
          return message;
        };

        /**
                 * Creates a plain object from an UpdateFullNameRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @static
                 * @param {merico.vdev.user.UpdateFullNameRequest} message UpdateFullNameRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateFullNameRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.newName = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.newName != null && message.hasOwnProperty('newName'))
          {object.newName = message.newName;}
          return object;
        };

        /**
                 * Converts this UpdateFullNameRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateFullNameRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateFullNameRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateFullNameRequest;
      })();

      user.UpdateFullNameResponse = (function() {

        /**
                 * Properties of an UpdateFullNameResponse.
                 * @memberof merico.vdev.user
                 * @interface IUpdateFullNameResponse
                 * @property {boolean|null} [success] UpdateFullNameResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] UpdateFullNameResponse message
                 */

        /**
                 * Constructs a new UpdateFullNameResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateFullNameResponse.
                 * @implements IUpdateFullNameResponse
                 * @constructor
                 * @param {merico.vdev.user.IUpdateFullNameResponse=} [properties] Properties to set
                 */
        function UpdateFullNameResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateFullNameResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @instance
                 */
        UpdateFullNameResponse.prototype.success = false;

        /**
                 * UpdateFullNameResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @instance
                 */
        UpdateFullNameResponse.prototype.message = 0;

        /**
                 * Creates a new UpdateFullNameResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateFullNameResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateFullNameResponse} UpdateFullNameResponse instance
                 */
        UpdateFullNameResponse.create = function create(properties) {
          return new UpdateFullNameResponse(properties);
        };

        /**
                 * Encodes the specified UpdateFullNameResponse message. Does not implicitly {@link merico.vdev.user.UpdateFullNameResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateFullNameResponse} message UpdateFullNameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateFullNameResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateFullNameResponse message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateFullNameResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateFullNameResponse} message UpdateFullNameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateFullNameResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateFullNameResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateFullNameResponse} UpdateFullNameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateFullNameResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateFullNameResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateFullNameResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateFullNameResponse} UpdateFullNameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateFullNameResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateFullNameResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateFullNameResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an UpdateFullNameResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateFullNameResponse} UpdateFullNameResponse
                 */
        UpdateFullNameResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateFullNameResponse)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateFullNameResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an UpdateFullNameResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @static
                 * @param {merico.vdev.user.UpdateFullNameResponse} message UpdateFullNameResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateFullNameResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this UpdateFullNameResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateFullNameResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateFullNameResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateFullNameResponse;
      })();

      user.AddEmailRequest = (function() {

        /**
                 * Properties of an AddEmailRequest.
                 * @memberof merico.vdev.user
                 * @interface IAddEmailRequest
                 * @property {string|null} [userId] AddEmailRequest userId
                 * @property {string|null} [email] AddEmailRequest email
                 * @property {string|null} [token] AddEmailRequest token
                 */

        /**
                 * Constructs a new AddEmailRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an AddEmailRequest.
                 * @implements IAddEmailRequest
                 * @constructor
                 * @param {merico.vdev.user.IAddEmailRequest=} [properties] Properties to set
                 */
        function AddEmailRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AddEmailRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @instance
                 */
        AddEmailRequest.prototype.userId = '';

        /**
                 * AddEmailRequest email.
                 * @member {string} email
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @instance
                 */
        AddEmailRequest.prototype.email = '';

        /**
                 * AddEmailRequest token.
                 * @member {string} token
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @instance
                 */
        AddEmailRequest.prototype.token = '';

        /**
                 * Creates a new AddEmailRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {merico.vdev.user.IAddEmailRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.AddEmailRequest} AddEmailRequest instance
                 */
        AddEmailRequest.create = function create(properties) {
          return new AddEmailRequest(properties);
        };

        /**
                 * Encodes the specified AddEmailRequest message. Does not implicitly {@link merico.vdev.user.AddEmailRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {merico.vdev.user.IAddEmailRequest} message AddEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddEmailRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.email != null && message.hasOwnProperty('email'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);}
          if (message.token != null && message.hasOwnProperty('token'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);}
          return writer;
        };

        /**
                 * Encodes the specified AddEmailRequest message, length delimited. Does not implicitly {@link merico.vdev.user.AddEmailRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {merico.vdev.user.IAddEmailRequest} message AddEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddEmailRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AddEmailRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.AddEmailRequest} AddEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddEmailRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.AddEmailRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.email = reader.string();
                break;
              case 3:
                message.token = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AddEmailRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.AddEmailRequest} AddEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddEmailRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AddEmailRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AddEmailRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.email != null && message.hasOwnProperty('email'))
          {if (!$util.isString(message.email))
          {return 'email: string expected';}}
          if (message.token != null && message.hasOwnProperty('token'))
          {if (!$util.isString(message.token))
          {return 'token: string expected';}}
          return null;
        };

        /**
                 * Creates an AddEmailRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.AddEmailRequest} AddEmailRequest
                 */
        AddEmailRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.AddEmailRequest)
          {return object;}
          var message = new $root.merico.vdev.user.AddEmailRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.email != null)
          {message.email = String(object.email);}
          if (object.token != null)
          {message.token = String(object.token);}
          return message;
        };

        /**
                 * Creates a plain object from an AddEmailRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @static
                 * @param {merico.vdev.user.AddEmailRequest} message AddEmailRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AddEmailRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.email = '';
            object.token = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.email != null && message.hasOwnProperty('email'))
          {object.email = message.email;}
          if (message.token != null && message.hasOwnProperty('token'))
          {object.token = message.token;}
          return object;
        };

        /**
                 * Converts this AddEmailRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.AddEmailRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AddEmailRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AddEmailRequest;
      })();

      user.AddEmailResponse = (function() {

        /**
                 * Properties of an AddEmailResponse.
                 * @memberof merico.vdev.user
                 * @interface IAddEmailResponse
                 * @property {boolean|null} [success] AddEmailResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] AddEmailResponse message
                 */

        /**
                 * Constructs a new AddEmailResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an AddEmailResponse.
                 * @implements IAddEmailResponse
                 * @constructor
                 * @param {merico.vdev.user.IAddEmailResponse=} [properties] Properties to set
                 */
        function AddEmailResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AddEmailResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @instance
                 */
        AddEmailResponse.prototype.success = false;

        /**
                 * AddEmailResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @instance
                 */
        AddEmailResponse.prototype.message = 0;

        /**
                 * Creates a new AddEmailResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {merico.vdev.user.IAddEmailResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.AddEmailResponse} AddEmailResponse instance
                 */
        AddEmailResponse.create = function create(properties) {
          return new AddEmailResponse(properties);
        };

        /**
                 * Encodes the specified AddEmailResponse message. Does not implicitly {@link merico.vdev.user.AddEmailResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {merico.vdev.user.IAddEmailResponse} message AddEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddEmailResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified AddEmailResponse message, length delimited. Does not implicitly {@link merico.vdev.user.AddEmailResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {merico.vdev.user.IAddEmailResponse} message AddEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddEmailResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AddEmailResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.AddEmailResponse} AddEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddEmailResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.AddEmailResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AddEmailResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.AddEmailResponse} AddEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddEmailResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AddEmailResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AddEmailResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an AddEmailResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.AddEmailResponse} AddEmailResponse
                 */
        AddEmailResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.AddEmailResponse)
          {return object;}
          var message = new $root.merico.vdev.user.AddEmailResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an AddEmailResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @static
                 * @param {merico.vdev.user.AddEmailResponse} message AddEmailResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AddEmailResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this AddEmailResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.AddEmailResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AddEmailResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AddEmailResponse;
      })();

      user.RemoveEmailRequest = (function() {

        /**
                 * Properties of a RemoveEmailRequest.
                 * @memberof merico.vdev.user
                 * @interface IRemoveEmailRequest
                 * @property {string|null} [userId] RemoveEmailRequest userId
                 * @property {string|null} [email] RemoveEmailRequest email
                 */

        /**
                 * Constructs a new RemoveEmailRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a RemoveEmailRequest.
                 * @implements IRemoveEmailRequest
                 * @constructor
                 * @param {merico.vdev.user.IRemoveEmailRequest=} [properties] Properties to set
                 */
        function RemoveEmailRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * RemoveEmailRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @instance
                 */
        RemoveEmailRequest.prototype.userId = '';

        /**
                 * RemoveEmailRequest email.
                 * @member {string} email
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @instance
                 */
        RemoveEmailRequest.prototype.email = '';

        /**
                 * Creates a new RemoveEmailRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {merico.vdev.user.IRemoveEmailRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.RemoveEmailRequest} RemoveEmailRequest instance
                 */
        RemoveEmailRequest.create = function create(properties) {
          return new RemoveEmailRequest(properties);
        };

        /**
                 * Encodes the specified RemoveEmailRequest message. Does not implicitly {@link merico.vdev.user.RemoveEmailRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {merico.vdev.user.IRemoveEmailRequest} message RemoveEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveEmailRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.email != null && message.hasOwnProperty('email'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);}
          return writer;
        };

        /**
                 * Encodes the specified RemoveEmailRequest message, length delimited. Does not implicitly {@link merico.vdev.user.RemoveEmailRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {merico.vdev.user.IRemoveEmailRequest} message RemoveEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveEmailRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a RemoveEmailRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.RemoveEmailRequest} RemoveEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveEmailRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.RemoveEmailRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.email = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a RemoveEmailRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.RemoveEmailRequest} RemoveEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveEmailRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a RemoveEmailRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        RemoveEmailRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.email != null && message.hasOwnProperty('email'))
          {if (!$util.isString(message.email))
          {return 'email: string expected';}}
          return null;
        };

        /**
                 * Creates a RemoveEmailRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.RemoveEmailRequest} RemoveEmailRequest
                 */
        RemoveEmailRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.RemoveEmailRequest)
          {return object;}
          var message = new $root.merico.vdev.user.RemoveEmailRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.email != null)
          {message.email = String(object.email);}
          return message;
        };

        /**
                 * Creates a plain object from a RemoveEmailRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @static
                 * @param {merico.vdev.user.RemoveEmailRequest} message RemoveEmailRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        RemoveEmailRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.email = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.email != null && message.hasOwnProperty('email'))
          {object.email = message.email;}
          return object;
        };

        /**
                 * Converts this RemoveEmailRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.RemoveEmailRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        RemoveEmailRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RemoveEmailRequest;
      })();

      user.RemoveEmailResponse = (function() {

        /**
                 * Properties of a RemoveEmailResponse.
                 * @memberof merico.vdev.user
                 * @interface IRemoveEmailResponse
                 * @property {boolean|null} [success] RemoveEmailResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] RemoveEmailResponse message
                 */

        /**
                 * Constructs a new RemoveEmailResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a RemoveEmailResponse.
                 * @implements IRemoveEmailResponse
                 * @constructor
                 * @param {merico.vdev.user.IRemoveEmailResponse=} [properties] Properties to set
                 */
        function RemoveEmailResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * RemoveEmailResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @instance
                 */
        RemoveEmailResponse.prototype.success = false;

        /**
                 * RemoveEmailResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @instance
                 */
        RemoveEmailResponse.prototype.message = 0;

        /**
                 * Creates a new RemoveEmailResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {merico.vdev.user.IRemoveEmailResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.RemoveEmailResponse} RemoveEmailResponse instance
                 */
        RemoveEmailResponse.create = function create(properties) {
          return new RemoveEmailResponse(properties);
        };

        /**
                 * Encodes the specified RemoveEmailResponse message. Does not implicitly {@link merico.vdev.user.RemoveEmailResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {merico.vdev.user.IRemoveEmailResponse} message RemoveEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveEmailResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified RemoveEmailResponse message, length delimited. Does not implicitly {@link merico.vdev.user.RemoveEmailResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {merico.vdev.user.IRemoveEmailResponse} message RemoveEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveEmailResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a RemoveEmailResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.RemoveEmailResponse} RemoveEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveEmailResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.RemoveEmailResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a RemoveEmailResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.RemoveEmailResponse} RemoveEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveEmailResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a RemoveEmailResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        RemoveEmailResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates a RemoveEmailResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.RemoveEmailResponse} RemoveEmailResponse
                 */
        RemoveEmailResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.RemoveEmailResponse)
          {return object;}
          var message = new $root.merico.vdev.user.RemoveEmailResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from a RemoveEmailResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @static
                 * @param {merico.vdev.user.RemoveEmailResponse} message RemoveEmailResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        RemoveEmailResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this RemoveEmailResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.RemoveEmailResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        RemoveEmailResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RemoveEmailResponse;
      })();

      user.SetPrimaryEmailRequest = (function() {

        /**
                 * Properties of a SetPrimaryEmailRequest.
                 * @memberof merico.vdev.user
                 * @interface ISetPrimaryEmailRequest
                 * @property {string|null} [userId] SetPrimaryEmailRequest userId
                 * @property {string|null} [email] SetPrimaryEmailRequest email
                 */

        /**
                 * Constructs a new SetPrimaryEmailRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a SetPrimaryEmailRequest.
                 * @implements ISetPrimaryEmailRequest
                 * @constructor
                 * @param {merico.vdev.user.ISetPrimaryEmailRequest=} [properties] Properties to set
                 */
        function SetPrimaryEmailRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * SetPrimaryEmailRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @instance
                 */
        SetPrimaryEmailRequest.prototype.userId = '';

        /**
                 * SetPrimaryEmailRequest email.
                 * @member {string} email
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @instance
                 */
        SetPrimaryEmailRequest.prototype.email = '';

        /**
                 * Creates a new SetPrimaryEmailRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {merico.vdev.user.ISetPrimaryEmailRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.SetPrimaryEmailRequest} SetPrimaryEmailRequest instance
                 */
        SetPrimaryEmailRequest.create = function create(properties) {
          return new SetPrimaryEmailRequest(properties);
        };

        /**
                 * Encodes the specified SetPrimaryEmailRequest message. Does not implicitly {@link merico.vdev.user.SetPrimaryEmailRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {merico.vdev.user.ISetPrimaryEmailRequest} message SetPrimaryEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SetPrimaryEmailRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.email != null && message.hasOwnProperty('email'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);}
          return writer;
        };

        /**
                 * Encodes the specified SetPrimaryEmailRequest message, length delimited. Does not implicitly {@link merico.vdev.user.SetPrimaryEmailRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {merico.vdev.user.ISetPrimaryEmailRequest} message SetPrimaryEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SetPrimaryEmailRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a SetPrimaryEmailRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.SetPrimaryEmailRequest} SetPrimaryEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SetPrimaryEmailRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.SetPrimaryEmailRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.email = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a SetPrimaryEmailRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.SetPrimaryEmailRequest} SetPrimaryEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SetPrimaryEmailRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a SetPrimaryEmailRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        SetPrimaryEmailRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.email != null && message.hasOwnProperty('email'))
          {if (!$util.isString(message.email))
          {return 'email: string expected';}}
          return null;
        };

        /**
                 * Creates a SetPrimaryEmailRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.SetPrimaryEmailRequest} SetPrimaryEmailRequest
                 */
        SetPrimaryEmailRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.SetPrimaryEmailRequest)
          {return object;}
          var message = new $root.merico.vdev.user.SetPrimaryEmailRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.email != null)
          {message.email = String(object.email);}
          return message;
        };

        /**
                 * Creates a plain object from a SetPrimaryEmailRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @static
                 * @param {merico.vdev.user.SetPrimaryEmailRequest} message SetPrimaryEmailRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        SetPrimaryEmailRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.email = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.email != null && message.hasOwnProperty('email'))
          {object.email = message.email;}
          return object;
        };

        /**
                 * Converts this SetPrimaryEmailRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.SetPrimaryEmailRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        SetPrimaryEmailRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetPrimaryEmailRequest;
      })();

      user.SetPrimaryEmailResponse = (function() {

        /**
                 * Properties of a SetPrimaryEmailResponse.
                 * @memberof merico.vdev.user
                 * @interface ISetPrimaryEmailResponse
                 * @property {merico.vdev.ErrorMessage|null} [message] SetPrimaryEmailResponse message
                 */

        /**
                 * Constructs a new SetPrimaryEmailResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a SetPrimaryEmailResponse.
                 * @implements ISetPrimaryEmailResponse
                 * @constructor
                 * @param {merico.vdev.user.ISetPrimaryEmailResponse=} [properties] Properties to set
                 */
        function SetPrimaryEmailResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * SetPrimaryEmailResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @instance
                 */
        SetPrimaryEmailResponse.prototype.message = 0;

        /**
                 * Creates a new SetPrimaryEmailResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {merico.vdev.user.ISetPrimaryEmailResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.SetPrimaryEmailResponse} SetPrimaryEmailResponse instance
                 */
        SetPrimaryEmailResponse.create = function create(properties) {
          return new SetPrimaryEmailResponse(properties);
        };

        /**
                 * Encodes the specified SetPrimaryEmailResponse message. Does not implicitly {@link merico.vdev.user.SetPrimaryEmailResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {merico.vdev.user.ISetPrimaryEmailResponse} message SetPrimaryEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SetPrimaryEmailResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 1, wireType 0 =*/8).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified SetPrimaryEmailResponse message, length delimited. Does not implicitly {@link merico.vdev.user.SetPrimaryEmailResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {merico.vdev.user.ISetPrimaryEmailResponse} message SetPrimaryEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SetPrimaryEmailResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a SetPrimaryEmailResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.SetPrimaryEmailResponse} SetPrimaryEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SetPrimaryEmailResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.SetPrimaryEmailResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a SetPrimaryEmailResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.SetPrimaryEmailResponse} SetPrimaryEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SetPrimaryEmailResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a SetPrimaryEmailResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        SetPrimaryEmailResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates a SetPrimaryEmailResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.SetPrimaryEmailResponse} SetPrimaryEmailResponse
                 */
        SetPrimaryEmailResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.SetPrimaryEmailResponse)
          {return object;}
          var message = new $root.merico.vdev.user.SetPrimaryEmailResponse();
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from a SetPrimaryEmailResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @static
                 * @param {merico.vdev.user.SetPrimaryEmailResponse} message SetPrimaryEmailResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        SetPrimaryEmailResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.message = options.enums === String ? 'EMPTY' : 0;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this SetPrimaryEmailResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.SetPrimaryEmailResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        SetPrimaryEmailResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetPrimaryEmailResponse;
      })();

      user.UpdatePhoneNumberRequest = (function() {

        /**
                 * Properties of an UpdatePhoneNumberRequest.
                 * @memberof merico.vdev.user
                 * @interface IUpdatePhoneNumberRequest
                 * @property {string|null} [userId] UpdatePhoneNumberRequest userId
                 * @property {string|null} [newNumber] UpdatePhoneNumberRequest newNumber
                 */

        /**
                 * Constructs a new UpdatePhoneNumberRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdatePhoneNumberRequest.
                 * @implements IUpdatePhoneNumberRequest
                 * @constructor
                 * @param {merico.vdev.user.IUpdatePhoneNumberRequest=} [properties] Properties to set
                 */
        function UpdatePhoneNumberRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdatePhoneNumberRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @instance
                 */
        UpdatePhoneNumberRequest.prototype.userId = '';

        /**
                 * UpdatePhoneNumberRequest newNumber.
                 * @member {string} newNumber
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @instance
                 */
        UpdatePhoneNumberRequest.prototype.newNumber = '';

        /**
                 * Creates a new UpdatePhoneNumberRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {merico.vdev.user.IUpdatePhoneNumberRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdatePhoneNumberRequest} UpdatePhoneNumberRequest instance
                 */
        UpdatePhoneNumberRequest.create = function create(properties) {
          return new UpdatePhoneNumberRequest(properties);
        };

        /**
                 * Encodes the specified UpdatePhoneNumberRequest message. Does not implicitly {@link merico.vdev.user.UpdatePhoneNumberRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {merico.vdev.user.IUpdatePhoneNumberRequest} message UpdatePhoneNumberRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdatePhoneNumberRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.newNumber != null && message.hasOwnProperty('newNumber'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.newNumber);}
          return writer;
        };

        /**
                 * Encodes the specified UpdatePhoneNumberRequest message, length delimited. Does not implicitly {@link merico.vdev.user.UpdatePhoneNumberRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {merico.vdev.user.IUpdatePhoneNumberRequest} message UpdatePhoneNumberRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdatePhoneNumberRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdatePhoneNumberRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdatePhoneNumberRequest} UpdatePhoneNumberRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdatePhoneNumberRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdatePhoneNumberRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.newNumber = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdatePhoneNumberRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdatePhoneNumberRequest} UpdatePhoneNumberRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdatePhoneNumberRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdatePhoneNumberRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdatePhoneNumberRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.newNumber != null && message.hasOwnProperty('newNumber'))
          {if (!$util.isString(message.newNumber))
          {return 'newNumber: string expected';}}
          return null;
        };

        /**
                 * Creates an UpdatePhoneNumberRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdatePhoneNumberRequest} UpdatePhoneNumberRequest
                 */
        UpdatePhoneNumberRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdatePhoneNumberRequest)
          {return object;}
          var message = new $root.merico.vdev.user.UpdatePhoneNumberRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.newNumber != null)
          {message.newNumber = String(object.newNumber);}
          return message;
        };

        /**
                 * Creates a plain object from an UpdatePhoneNumberRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @static
                 * @param {merico.vdev.user.UpdatePhoneNumberRequest} message UpdatePhoneNumberRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdatePhoneNumberRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.newNumber = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.newNumber != null && message.hasOwnProperty('newNumber'))
          {object.newNumber = message.newNumber;}
          return object;
        };

        /**
                 * Converts this UpdatePhoneNumberRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdatePhoneNumberRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdatePhoneNumberRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdatePhoneNumberRequest;
      })();

      user.UpdatePhoneNumberResponse = (function() {

        /**
                 * Properties of an UpdatePhoneNumberResponse.
                 * @memberof merico.vdev.user
                 * @interface IUpdatePhoneNumberResponse
                 * @property {boolean|null} [success] UpdatePhoneNumberResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] UpdatePhoneNumberResponse message
                 */

        /**
                 * Constructs a new UpdatePhoneNumberResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdatePhoneNumberResponse.
                 * @implements IUpdatePhoneNumberResponse
                 * @constructor
                 * @param {merico.vdev.user.IUpdatePhoneNumberResponse=} [properties] Properties to set
                 */
        function UpdatePhoneNumberResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdatePhoneNumberResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @instance
                 */
        UpdatePhoneNumberResponse.prototype.success = false;

        /**
                 * UpdatePhoneNumberResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @instance
                 */
        UpdatePhoneNumberResponse.prototype.message = 0;

        /**
                 * Creates a new UpdatePhoneNumberResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {merico.vdev.user.IUpdatePhoneNumberResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdatePhoneNumberResponse} UpdatePhoneNumberResponse instance
                 */
        UpdatePhoneNumberResponse.create = function create(properties) {
          return new UpdatePhoneNumberResponse(properties);
        };

        /**
                 * Encodes the specified UpdatePhoneNumberResponse message. Does not implicitly {@link merico.vdev.user.UpdatePhoneNumberResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {merico.vdev.user.IUpdatePhoneNumberResponse} message UpdatePhoneNumberResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdatePhoneNumberResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified UpdatePhoneNumberResponse message, length delimited. Does not implicitly {@link merico.vdev.user.UpdatePhoneNumberResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {merico.vdev.user.IUpdatePhoneNumberResponse} message UpdatePhoneNumberResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdatePhoneNumberResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdatePhoneNumberResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdatePhoneNumberResponse} UpdatePhoneNumberResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdatePhoneNumberResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdatePhoneNumberResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdatePhoneNumberResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdatePhoneNumberResponse} UpdatePhoneNumberResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdatePhoneNumberResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdatePhoneNumberResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdatePhoneNumberResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an UpdatePhoneNumberResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdatePhoneNumberResponse} UpdatePhoneNumberResponse
                 */
        UpdatePhoneNumberResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdatePhoneNumberResponse)
          {return object;}
          var message = new $root.merico.vdev.user.UpdatePhoneNumberResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an UpdatePhoneNumberResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @static
                 * @param {merico.vdev.user.UpdatePhoneNumberResponse} message UpdatePhoneNumberResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdatePhoneNumberResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this UpdatePhoneNumberResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdatePhoneNumberResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdatePhoneNumberResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdatePhoneNumberResponse;
      })();

      user.UpdateLocationRequest = (function() {

        /**
                 * Properties of an UpdateLocationRequest.
                 * @memberof merico.vdev.user
                 * @interface IUpdateLocationRequest
                 * @property {string|null} [userId] UpdateLocationRequest userId
                 * @property {string|null} [newLocation] UpdateLocationRequest newLocation
                 */

        /**
                 * Constructs a new UpdateLocationRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateLocationRequest.
                 * @implements IUpdateLocationRequest
                 * @constructor
                 * @param {merico.vdev.user.IUpdateLocationRequest=} [properties] Properties to set
                 */
        function UpdateLocationRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateLocationRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @instance
                 */
        UpdateLocationRequest.prototype.userId = '';

        /**
                 * UpdateLocationRequest newLocation.
                 * @member {string} newLocation
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @instance
                 */
        UpdateLocationRequest.prototype.newLocation = '';

        /**
                 * Creates a new UpdateLocationRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateLocationRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateLocationRequest} UpdateLocationRequest instance
                 */
        UpdateLocationRequest.create = function create(properties) {
          return new UpdateLocationRequest(properties);
        };

        /**
                 * Encodes the specified UpdateLocationRequest message. Does not implicitly {@link merico.vdev.user.UpdateLocationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateLocationRequest} message UpdateLocationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateLocationRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.newLocation != null && message.hasOwnProperty('newLocation'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.newLocation);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateLocationRequest message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateLocationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateLocationRequest} message UpdateLocationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateLocationRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateLocationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateLocationRequest} UpdateLocationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateLocationRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateLocationRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.newLocation = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateLocationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateLocationRequest} UpdateLocationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateLocationRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateLocationRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateLocationRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.newLocation != null && message.hasOwnProperty('newLocation'))
          {if (!$util.isString(message.newLocation))
          {return 'newLocation: string expected';}}
          return null;
        };

        /**
                 * Creates an UpdateLocationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateLocationRequest} UpdateLocationRequest
                 */
        UpdateLocationRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateLocationRequest)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateLocationRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.newLocation != null)
          {message.newLocation = String(object.newLocation);}
          return message;
        };

        /**
                 * Creates a plain object from an UpdateLocationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @static
                 * @param {merico.vdev.user.UpdateLocationRequest} message UpdateLocationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateLocationRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.newLocation = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.newLocation != null && message.hasOwnProperty('newLocation'))
          {object.newLocation = message.newLocation;}
          return object;
        };

        /**
                 * Converts this UpdateLocationRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateLocationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateLocationRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateLocationRequest;
      })();

      user.UpdateLocationResponse = (function() {

        /**
                 * Properties of an UpdateLocationResponse.
                 * @memberof merico.vdev.user
                 * @interface IUpdateLocationResponse
                 * @property {boolean|null} [success] UpdateLocationResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] UpdateLocationResponse message
                 */

        /**
                 * Constructs a new UpdateLocationResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateLocationResponse.
                 * @implements IUpdateLocationResponse
                 * @constructor
                 * @param {merico.vdev.user.IUpdateLocationResponse=} [properties] Properties to set
                 */
        function UpdateLocationResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateLocationResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @instance
                 */
        UpdateLocationResponse.prototype.success = false;

        /**
                 * UpdateLocationResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @instance
                 */
        UpdateLocationResponse.prototype.message = 0;

        /**
                 * Creates a new UpdateLocationResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateLocationResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateLocationResponse} UpdateLocationResponse instance
                 */
        UpdateLocationResponse.create = function create(properties) {
          return new UpdateLocationResponse(properties);
        };

        /**
                 * Encodes the specified UpdateLocationResponse message. Does not implicitly {@link merico.vdev.user.UpdateLocationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateLocationResponse} message UpdateLocationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateLocationResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateLocationResponse message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateLocationResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateLocationResponse} message UpdateLocationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateLocationResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateLocationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateLocationResponse} UpdateLocationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateLocationResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateLocationResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateLocationResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateLocationResponse} UpdateLocationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateLocationResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateLocationResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateLocationResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an UpdateLocationResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateLocationResponse} UpdateLocationResponse
                 */
        UpdateLocationResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateLocationResponse)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateLocationResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an UpdateLocationResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @static
                 * @param {merico.vdev.user.UpdateLocationResponse} message UpdateLocationResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateLocationResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this UpdateLocationResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateLocationResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateLocationResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateLocationResponse;
      })();

      user.AddLinkRequest = (function() {

        /**
                 * Properties of an AddLinkRequest.
                 * @memberof merico.vdev.user
                 * @interface IAddLinkRequest
                 * @property {string|null} [userId] AddLinkRequest userId
                 * @property {merico.vdev.user.ILink|null} [link] AddLinkRequest link
                 */

        /**
                 * Constructs a new AddLinkRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an AddLinkRequest.
                 * @implements IAddLinkRequest
                 * @constructor
                 * @param {merico.vdev.user.IAddLinkRequest=} [properties] Properties to set
                 */
        function AddLinkRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AddLinkRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @instance
                 */
        AddLinkRequest.prototype.userId = '';

        /**
                 * AddLinkRequest link.
                 * @member {merico.vdev.user.ILink|null|undefined} link
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @instance
                 */
        AddLinkRequest.prototype.link = null;

        /**
                 * Creates a new AddLinkRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {merico.vdev.user.IAddLinkRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.AddLinkRequest} AddLinkRequest instance
                 */
        AddLinkRequest.create = function create(properties) {
          return new AddLinkRequest(properties);
        };

        /**
                 * Encodes the specified AddLinkRequest message. Does not implicitly {@link merico.vdev.user.AddLinkRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {merico.vdev.user.IAddLinkRequest} message AddLinkRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddLinkRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.link != null && message.hasOwnProperty('link'))
          {$root.merico.vdev.user.Link.encode(message.link, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified AddLinkRequest message, length delimited. Does not implicitly {@link merico.vdev.user.AddLinkRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {merico.vdev.user.IAddLinkRequest} message AddLinkRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddLinkRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AddLinkRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.AddLinkRequest} AddLinkRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddLinkRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.AddLinkRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.link = $root.merico.vdev.user.Link.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AddLinkRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.AddLinkRequest} AddLinkRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddLinkRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AddLinkRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AddLinkRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.link != null && message.hasOwnProperty('link')) {
            var error = $root.merico.vdev.user.Link.verify(message.link);
            if (error)
            {return 'link.' + error;}
          }
          return null;
        };

        /**
                 * Creates an AddLinkRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.AddLinkRequest} AddLinkRequest
                 */
        AddLinkRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.AddLinkRequest)
          {return object;}
          var message = new $root.merico.vdev.user.AddLinkRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.link != null) {
            if (typeof object.link !== 'object')
            {throw TypeError('.merico.vdev.user.AddLinkRequest.link: object expected');}
            message.link = $root.merico.vdev.user.Link.fromObject(object.link);
          }
          return message;
        };

        /**
                 * Creates a plain object from an AddLinkRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @static
                 * @param {merico.vdev.user.AddLinkRequest} message AddLinkRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AddLinkRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.link = null;
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.link != null && message.hasOwnProperty('link'))
          {object.link = $root.merico.vdev.user.Link.toObject(message.link, options);}
          return object;
        };

        /**
                 * Converts this AddLinkRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.AddLinkRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AddLinkRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AddLinkRequest;
      })();

      user.AddLinkResponse = (function() {

        /**
                 * Properties of an AddLinkResponse.
                 * @memberof merico.vdev.user
                 * @interface IAddLinkResponse
                 * @property {boolean|null} [success] AddLinkResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] AddLinkResponse message
                 */

        /**
                 * Constructs a new AddLinkResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an AddLinkResponse.
                 * @implements IAddLinkResponse
                 * @constructor
                 * @param {merico.vdev.user.IAddLinkResponse=} [properties] Properties to set
                 */
        function AddLinkResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AddLinkResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @instance
                 */
        AddLinkResponse.prototype.success = false;

        /**
                 * AddLinkResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @instance
                 */
        AddLinkResponse.prototype.message = 0;

        /**
                 * Creates a new AddLinkResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {merico.vdev.user.IAddLinkResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.AddLinkResponse} AddLinkResponse instance
                 */
        AddLinkResponse.create = function create(properties) {
          return new AddLinkResponse(properties);
        };

        /**
                 * Encodes the specified AddLinkResponse message. Does not implicitly {@link merico.vdev.user.AddLinkResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {merico.vdev.user.IAddLinkResponse} message AddLinkResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddLinkResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified AddLinkResponse message, length delimited. Does not implicitly {@link merico.vdev.user.AddLinkResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {merico.vdev.user.IAddLinkResponse} message AddLinkResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AddLinkResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AddLinkResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.AddLinkResponse} AddLinkResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddLinkResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.AddLinkResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AddLinkResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.AddLinkResponse} AddLinkResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AddLinkResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AddLinkResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AddLinkResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an AddLinkResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.AddLinkResponse} AddLinkResponse
                 */
        AddLinkResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.AddLinkResponse)
          {return object;}
          var message = new $root.merico.vdev.user.AddLinkResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an AddLinkResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @static
                 * @param {merico.vdev.user.AddLinkResponse} message AddLinkResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AddLinkResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this AddLinkResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.AddLinkResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AddLinkResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AddLinkResponse;
      })();

      user.RemoveLinkRequest = (function() {

        /**
                 * Properties of a RemoveLinkRequest.
                 * @memberof merico.vdev.user
                 * @interface IRemoveLinkRequest
                 * @property {string|null} [userId] RemoveLinkRequest userId
                 * @property {string|null} [linkUrl] RemoveLinkRequest linkUrl
                 */

        /**
                 * Constructs a new RemoveLinkRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a RemoveLinkRequest.
                 * @implements IRemoveLinkRequest
                 * @constructor
                 * @param {merico.vdev.user.IRemoveLinkRequest=} [properties] Properties to set
                 */
        function RemoveLinkRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * RemoveLinkRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @instance
                 */
        RemoveLinkRequest.prototype.userId = '';

        /**
                 * RemoveLinkRequest linkUrl.
                 * @member {string} linkUrl
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @instance
                 */
        RemoveLinkRequest.prototype.linkUrl = '';

        /**
                 * Creates a new RemoveLinkRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {merico.vdev.user.IRemoveLinkRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.RemoveLinkRequest} RemoveLinkRequest instance
                 */
        RemoveLinkRequest.create = function create(properties) {
          return new RemoveLinkRequest(properties);
        };

        /**
                 * Encodes the specified RemoveLinkRequest message. Does not implicitly {@link merico.vdev.user.RemoveLinkRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {merico.vdev.user.IRemoveLinkRequest} message RemoveLinkRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveLinkRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.linkUrl != null && message.hasOwnProperty('linkUrl'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.linkUrl);}
          return writer;
        };

        /**
                 * Encodes the specified RemoveLinkRequest message, length delimited. Does not implicitly {@link merico.vdev.user.RemoveLinkRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {merico.vdev.user.IRemoveLinkRequest} message RemoveLinkRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveLinkRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a RemoveLinkRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.RemoveLinkRequest} RemoveLinkRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveLinkRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.RemoveLinkRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.linkUrl = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a RemoveLinkRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.RemoveLinkRequest} RemoveLinkRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveLinkRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a RemoveLinkRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        RemoveLinkRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.linkUrl != null && message.hasOwnProperty('linkUrl'))
          {if (!$util.isString(message.linkUrl))
          {return 'linkUrl: string expected';}}
          return null;
        };

        /**
                 * Creates a RemoveLinkRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.RemoveLinkRequest} RemoveLinkRequest
                 */
        RemoveLinkRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.RemoveLinkRequest)
          {return object;}
          var message = new $root.merico.vdev.user.RemoveLinkRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.linkUrl != null)
          {message.linkUrl = String(object.linkUrl);}
          return message;
        };

        /**
                 * Creates a plain object from a RemoveLinkRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @static
                 * @param {merico.vdev.user.RemoveLinkRequest} message RemoveLinkRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        RemoveLinkRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.linkUrl = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.linkUrl != null && message.hasOwnProperty('linkUrl'))
          {object.linkUrl = message.linkUrl;}
          return object;
        };

        /**
                 * Converts this RemoveLinkRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.RemoveLinkRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        RemoveLinkRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RemoveLinkRequest;
      })();

      user.RemoveLinkResponse = (function() {

        /**
                 * Properties of a RemoveLinkResponse.
                 * @memberof merico.vdev.user
                 * @interface IRemoveLinkResponse
                 * @property {boolean|null} [success] RemoveLinkResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] RemoveLinkResponse message
                 */

        /**
                 * Constructs a new RemoveLinkResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a RemoveLinkResponse.
                 * @implements IRemoveLinkResponse
                 * @constructor
                 * @param {merico.vdev.user.IRemoveLinkResponse=} [properties] Properties to set
                 */
        function RemoveLinkResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * RemoveLinkResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @instance
                 */
        RemoveLinkResponse.prototype.success = false;

        /**
                 * RemoveLinkResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @instance
                 */
        RemoveLinkResponse.prototype.message = 0;

        /**
                 * Creates a new RemoveLinkResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {merico.vdev.user.IRemoveLinkResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.RemoveLinkResponse} RemoveLinkResponse instance
                 */
        RemoveLinkResponse.create = function create(properties) {
          return new RemoveLinkResponse(properties);
        };

        /**
                 * Encodes the specified RemoveLinkResponse message. Does not implicitly {@link merico.vdev.user.RemoveLinkResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {merico.vdev.user.IRemoveLinkResponse} message RemoveLinkResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveLinkResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified RemoveLinkResponse message, length delimited. Does not implicitly {@link merico.vdev.user.RemoveLinkResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {merico.vdev.user.IRemoveLinkResponse} message RemoveLinkResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RemoveLinkResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a RemoveLinkResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.RemoveLinkResponse} RemoveLinkResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveLinkResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.RemoveLinkResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a RemoveLinkResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.RemoveLinkResponse} RemoveLinkResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RemoveLinkResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a RemoveLinkResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        RemoveLinkResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates a RemoveLinkResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.RemoveLinkResponse} RemoveLinkResponse
                 */
        RemoveLinkResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.RemoveLinkResponse)
          {return object;}
          var message = new $root.merico.vdev.user.RemoveLinkResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from a RemoveLinkResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @static
                 * @param {merico.vdev.user.RemoveLinkResponse} message RemoveLinkResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        RemoveLinkResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this RemoveLinkResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.RemoveLinkResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        RemoveLinkResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RemoveLinkResponse;
      })();

      user.UpdateBioRequest = (function() {

        /**
                 * Properties of an UpdateBioRequest.
                 * @memberof merico.vdev.user
                 * @interface IUpdateBioRequest
                 * @property {string|null} [userId] UpdateBioRequest userId
                 * @property {string|null} [newBio] UpdateBioRequest newBio
                 */

        /**
                 * Constructs a new UpdateBioRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateBioRequest.
                 * @implements IUpdateBioRequest
                 * @constructor
                 * @param {merico.vdev.user.IUpdateBioRequest=} [properties] Properties to set
                 */
        function UpdateBioRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateBioRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @instance
                 */
        UpdateBioRequest.prototype.userId = '';

        /**
                 * UpdateBioRequest newBio.
                 * @member {string} newBio
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @instance
                 */
        UpdateBioRequest.prototype.newBio = '';

        /**
                 * Creates a new UpdateBioRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateBioRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateBioRequest} UpdateBioRequest instance
                 */
        UpdateBioRequest.create = function create(properties) {
          return new UpdateBioRequest(properties);
        };

        /**
                 * Encodes the specified UpdateBioRequest message. Does not implicitly {@link merico.vdev.user.UpdateBioRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateBioRequest} message UpdateBioRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateBioRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.newBio != null && message.hasOwnProperty('newBio'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.newBio);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateBioRequest message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateBioRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {merico.vdev.user.IUpdateBioRequest} message UpdateBioRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateBioRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateBioRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateBioRequest} UpdateBioRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateBioRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateBioRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.newBio = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateBioRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateBioRequest} UpdateBioRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateBioRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateBioRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateBioRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.newBio != null && message.hasOwnProperty('newBio'))
          {if (!$util.isString(message.newBio))
          {return 'newBio: string expected';}}
          return null;
        };

        /**
                 * Creates an UpdateBioRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateBioRequest} UpdateBioRequest
                 */
        UpdateBioRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateBioRequest)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateBioRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.newBio != null)
          {message.newBio = String(object.newBio);}
          return message;
        };

        /**
                 * Creates a plain object from an UpdateBioRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @static
                 * @param {merico.vdev.user.UpdateBioRequest} message UpdateBioRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateBioRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.newBio = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.newBio != null && message.hasOwnProperty('newBio'))
          {object.newBio = message.newBio;}
          return object;
        };

        /**
                 * Converts this UpdateBioRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateBioRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateBioRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateBioRequest;
      })();

      user.UpdateBioResponse = (function() {

        /**
                 * Properties of an UpdateBioResponse.
                 * @memberof merico.vdev.user
                 * @interface IUpdateBioResponse
                 * @property {boolean|null} [success] UpdateBioResponse success
                 * @property {merico.vdev.ErrorMessage|null} [message] UpdateBioResponse message
                 */

        /**
                 * Constructs a new UpdateBioResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents an UpdateBioResponse.
                 * @implements IUpdateBioResponse
                 * @constructor
                 * @param {merico.vdev.user.IUpdateBioResponse=} [properties] Properties to set
                 */
        function UpdateBioResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * UpdateBioResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @instance
                 */
        UpdateBioResponse.prototype.success = false;

        /**
                 * UpdateBioResponse message.
                 * @member {merico.vdev.ErrorMessage} message
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @instance
                 */
        UpdateBioResponse.prototype.message = 0;

        /**
                 * Creates a new UpdateBioResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateBioResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.UpdateBioResponse} UpdateBioResponse instance
                 */
        UpdateBioResponse.create = function create(properties) {
          return new UpdateBioResponse(properties);
        };

        /**
                 * Encodes the specified UpdateBioResponse message. Does not implicitly {@link merico.vdev.user.UpdateBioResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateBioResponse} message UpdateBioResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateBioResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified UpdateBioResponse message, length delimited. Does not implicitly {@link merico.vdev.user.UpdateBioResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {merico.vdev.user.IUpdateBioResponse} message UpdateBioResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        UpdateBioResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an UpdateBioResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.UpdateBioResponse} UpdateBioResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateBioResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.UpdateBioResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.message = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an UpdateBioResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.UpdateBioResponse} UpdateBioResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        UpdateBioResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an UpdateBioResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        UpdateBioResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.message != null && message.hasOwnProperty('message'))
          {switch (message.message) {
            default:
              return 'message: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates an UpdateBioResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.UpdateBioResponse} UpdateBioResponse
                 */
        UpdateBioResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.UpdateBioResponse)
          {return object;}
          var message = new $root.merico.vdev.user.UpdateBioResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.message) {
            case 'EMPTY':
            case 0:
              message.message = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.message = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.message = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.message = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.message = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.message = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.message = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.message = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.message = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.message = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from an UpdateBioResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @static
                 * @param {merico.vdev.user.UpdateBioResponse} message UpdateBioResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        UpdateBioResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.message = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = options.enums === String ? $root.merico.vdev.ErrorMessage[message.message] : message.message;}
          return object;
        };

        /**
                 * Converts this UpdateBioResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.UpdateBioResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        UpdateBioResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateBioResponse;
      })();

      user.UserInfo = (function() {

        /**
                 * Constructs a new UserInfo service.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a UserInfo
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
        function UserInfo(rpcImpl, requestDelimited, responseDelimited) {
          $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (UserInfo.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = UserInfo;

        /**
                 * Creates new UserInfo service using the specified rpc implementation.
                 * @function create
                 * @memberof merico.vdev.user.UserInfo
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {UserInfo} RPC service. Useful where requests and/or responses are streamed.
                 */
        UserInfo.create = function create(rpcImpl, requestDelimited, responseDelimited) {
          return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#getUser}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef GetUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.GetUserResponse} [response] GetUserResponse
                 */

        /**
                 * Calls GetUser.
                 * @function getUser
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IGetUserRequest} request GetUserRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.GetUserCallback} callback Node-style callback called with the error, if any, and GetUserResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.getUser = function getUser(request, callback) {
          return this.rpcCall(getUser, $root.merico.vdev.user.GetUserRequest, $root.merico.vdev.user.GetUserResponse, request, callback);
        }, 'name', { value: 'GetUser' });

        /**
                 * Calls GetUser.
                 * @function getUser
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IGetUserRequest} request GetUserRequest message or plain object
                 * @returns {Promise<merico.vdev.user.GetUserResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#updateUsername}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef UpdateUsernameCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.UpdateUsernameResponse} [response] UpdateUsernameResponse
                 */

        /**
                 * Calls UpdateUsername.
                 * @function updateUsername
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateUsernameRequest} request UpdateUsernameRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.UpdateUsernameCallback} callback Node-style callback called with the error, if any, and UpdateUsernameResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.updateUsername = function updateUsername(request, callback) {
          return this.rpcCall(updateUsername, $root.merico.vdev.user.UpdateUsernameRequest, $root.merico.vdev.user.UpdateUsernameResponse, request, callback);
        }, 'name', { value: 'UpdateUsername' });

        /**
                 * Calls UpdateUsername.
                 * @function updateUsername
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateUsernameRequest} request UpdateUsernameRequest message or plain object
                 * @returns {Promise<merico.vdev.user.UpdateUsernameResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#updateFullName}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef UpdateFullNameCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.UpdateFullNameResponse} [response] UpdateFullNameResponse
                 */

        /**
                 * Calls UpdateFullName.
                 * @function updateFullName
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateFullNameRequest} request UpdateFullNameRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.UpdateFullNameCallback} callback Node-style callback called with the error, if any, and UpdateFullNameResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.updateFullName = function updateFullName(request, callback) {
          return this.rpcCall(updateFullName, $root.merico.vdev.user.UpdateFullNameRequest, $root.merico.vdev.user.UpdateFullNameResponse, request, callback);
        }, 'name', { value: 'UpdateFullName' });

        /**
                 * Calls UpdateFullName.
                 * @function updateFullName
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateFullNameRequest} request UpdateFullNameRequest message or plain object
                 * @returns {Promise<merico.vdev.user.UpdateFullNameResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#addEmail}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef AddEmailCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.AddEmailResponse} [response] AddEmailResponse
                 */

        /**
                 * Calls AddEmail.
                 * @function addEmail
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IAddEmailRequest} request AddEmailRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.AddEmailCallback} callback Node-style callback called with the error, if any, and AddEmailResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.addEmail = function addEmail(request, callback) {
          return this.rpcCall(addEmail, $root.merico.vdev.user.AddEmailRequest, $root.merico.vdev.user.AddEmailResponse, request, callback);
        }, 'name', { value: 'AddEmail' });

        /**
                 * Calls AddEmail.
                 * @function addEmail
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IAddEmailRequest} request AddEmailRequest message or plain object
                 * @returns {Promise<merico.vdev.user.AddEmailResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#removeEmail}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef RemoveEmailCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.RemoveEmailResponse} [response] RemoveEmailResponse
                 */

        /**
                 * Calls RemoveEmail.
                 * @function removeEmail
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IRemoveEmailRequest} request RemoveEmailRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.RemoveEmailCallback} callback Node-style callback called with the error, if any, and RemoveEmailResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.removeEmail = function removeEmail(request, callback) {
          return this.rpcCall(removeEmail, $root.merico.vdev.user.RemoveEmailRequest, $root.merico.vdev.user.RemoveEmailResponse, request, callback);
        }, 'name', { value: 'RemoveEmail' });

        /**
                 * Calls RemoveEmail.
                 * @function removeEmail
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IRemoveEmailRequest} request RemoveEmailRequest message or plain object
                 * @returns {Promise<merico.vdev.user.RemoveEmailResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#setPrimaryEmail}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef SetPrimaryEmailCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.SetPrimaryEmailResponse} [response] SetPrimaryEmailResponse
                 */

        /**
                 * Calls SetPrimaryEmail.
                 * @function setPrimaryEmail
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.ISetPrimaryEmailRequest} request SetPrimaryEmailRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.SetPrimaryEmailCallback} callback Node-style callback called with the error, if any, and SetPrimaryEmailResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.setPrimaryEmail = function setPrimaryEmail(request, callback) {
          return this.rpcCall(setPrimaryEmail, $root.merico.vdev.user.SetPrimaryEmailRequest, $root.merico.vdev.user.SetPrimaryEmailResponse, request, callback);
        }, 'name', { value: 'SetPrimaryEmail' });

        /**
                 * Calls SetPrimaryEmail.
                 * @function setPrimaryEmail
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.ISetPrimaryEmailRequest} request SetPrimaryEmailRequest message or plain object
                 * @returns {Promise<merico.vdev.user.SetPrimaryEmailResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#updatePhoneNumber}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef UpdatePhoneNumberCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.UpdatePhoneNumberResponse} [response] UpdatePhoneNumberResponse
                 */

        /**
                 * Calls UpdatePhoneNumber.
                 * @function updatePhoneNumber
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdatePhoneNumberRequest} request UpdatePhoneNumberRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.UpdatePhoneNumberCallback} callback Node-style callback called with the error, if any, and UpdatePhoneNumberResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.updatePhoneNumber = function updatePhoneNumber(request, callback) {
          return this.rpcCall(updatePhoneNumber, $root.merico.vdev.user.UpdatePhoneNumberRequest, $root.merico.vdev.user.UpdatePhoneNumberResponse, request, callback);
        }, 'name', { value: 'UpdatePhoneNumber' });

        /**
                 * Calls UpdatePhoneNumber.
                 * @function updatePhoneNumber
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdatePhoneNumberRequest} request UpdatePhoneNumberRequest message or plain object
                 * @returns {Promise<merico.vdev.user.UpdatePhoneNumberResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#updateLocation}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef UpdateLocationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.UpdateLocationResponse} [response] UpdateLocationResponse
                 */

        /**
                 * Calls UpdateLocation.
                 * @function updateLocation
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateLocationRequest} request UpdateLocationRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.UpdateLocationCallback} callback Node-style callback called with the error, if any, and UpdateLocationResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.updateLocation = function updateLocation(request, callback) {
          return this.rpcCall(updateLocation, $root.merico.vdev.user.UpdateLocationRequest, $root.merico.vdev.user.UpdateLocationResponse, request, callback);
        }, 'name', { value: 'UpdateLocation' });

        /**
                 * Calls UpdateLocation.
                 * @function updateLocation
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateLocationRequest} request UpdateLocationRequest message or plain object
                 * @returns {Promise<merico.vdev.user.UpdateLocationResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#addLink}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef AddLinkCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.AddLinkResponse} [response] AddLinkResponse
                 */

        /**
                 * Calls AddLink.
                 * @function addLink
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IAddLinkRequest} request AddLinkRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.AddLinkCallback} callback Node-style callback called with the error, if any, and AddLinkResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.addLink = function addLink(request, callback) {
          return this.rpcCall(addLink, $root.merico.vdev.user.AddLinkRequest, $root.merico.vdev.user.AddLinkResponse, request, callback);
        }, 'name', { value: 'AddLink' });

        /**
                 * Calls AddLink.
                 * @function addLink
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IAddLinkRequest} request AddLinkRequest message or plain object
                 * @returns {Promise<merico.vdev.user.AddLinkResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#removeLink}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef RemoveLinkCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.RemoveLinkResponse} [response] RemoveLinkResponse
                 */

        /**
                 * Calls RemoveLink.
                 * @function removeLink
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IRemoveLinkRequest} request RemoveLinkRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.RemoveLinkCallback} callback Node-style callback called with the error, if any, and RemoveLinkResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.removeLink = function removeLink(request, callback) {
          return this.rpcCall(removeLink, $root.merico.vdev.user.RemoveLinkRequest, $root.merico.vdev.user.RemoveLinkResponse, request, callback);
        }, 'name', { value: 'RemoveLink' });

        /**
                 * Calls RemoveLink.
                 * @function removeLink
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IRemoveLinkRequest} request RemoveLinkRequest message or plain object
                 * @returns {Promise<merico.vdev.user.RemoveLinkResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserInfo#updateBio}.
                 * @memberof merico.vdev.user.UserInfo
                 * @typedef UpdateBioCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.UpdateBioResponse} [response] UpdateBioResponse
                 */

        /**
                 * Calls UpdateBio.
                 * @function updateBio
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateBioRequest} request UpdateBioRequest message or plain object
                 * @param {merico.vdev.user.UserInfo.UpdateBioCallback} callback Node-style callback called with the error, if any, and UpdateBioResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserInfo.prototype.updateBio = function updateBio(request, callback) {
          return this.rpcCall(updateBio, $root.merico.vdev.user.UpdateBioRequest, $root.merico.vdev.user.UpdateBioResponse, request, callback);
        }, 'name', { value: 'UpdateBio' });

        /**
                 * Calls UpdateBio.
                 * @function updateBio
                 * @memberof merico.vdev.user.UserInfo
                 * @instance
                 * @param {merico.vdev.user.IUpdateBioRequest} request UpdateBioRequest message or plain object
                 * @returns {Promise<merico.vdev.user.UpdateBioResponse>} Promise
                 * @variation 2
                 */

        return UserInfo;
      })();

      user.CheckUsernameRequest = (function() {

        /**
                 * Properties of a CheckUsernameRequest.
                 * @memberof merico.vdev.user
                 * @interface ICheckUsernameRequest
                 * @property {string|null} [username] CheckUsernameRequest username
                 */

        /**
                 * Constructs a new CheckUsernameRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a CheckUsernameRequest.
                 * @implements ICheckUsernameRequest
                 * @constructor
                 * @param {merico.vdev.user.ICheckUsernameRequest=} [properties] Properties to set
                 */
        function CheckUsernameRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * CheckUsernameRequest username.
                 * @member {string} username
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @instance
                 */
        CheckUsernameRequest.prototype.username = '';

        /**
                 * Creates a new CheckUsernameRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {merico.vdev.user.ICheckUsernameRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.CheckUsernameRequest} CheckUsernameRequest instance
                 */
        CheckUsernameRequest.create = function create(properties) {
          return new CheckUsernameRequest(properties);
        };

        /**
                 * Encodes the specified CheckUsernameRequest message. Does not implicitly {@link merico.vdev.user.CheckUsernameRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {merico.vdev.user.ICheckUsernameRequest} message CheckUsernameRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CheckUsernameRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.username != null && message.hasOwnProperty('username'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);}
          return writer;
        };

        /**
                 * Encodes the specified CheckUsernameRequest message, length delimited. Does not implicitly {@link merico.vdev.user.CheckUsernameRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {merico.vdev.user.ICheckUsernameRequest} message CheckUsernameRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CheckUsernameRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a CheckUsernameRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.CheckUsernameRequest} CheckUsernameRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CheckUsernameRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.CheckUsernameRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.username = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a CheckUsernameRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.CheckUsernameRequest} CheckUsernameRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CheckUsernameRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a CheckUsernameRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        CheckUsernameRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.username != null && message.hasOwnProperty('username'))
          {if (!$util.isString(message.username))
          {return 'username: string expected';}}
          return null;
        };

        /**
                 * Creates a CheckUsernameRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.CheckUsernameRequest} CheckUsernameRequest
                 */
        CheckUsernameRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.CheckUsernameRequest)
          {return object;}
          var message = new $root.merico.vdev.user.CheckUsernameRequest();
          if (object.username != null)
          {message.username = String(object.username);}
          return message;
        };

        /**
                 * Creates a plain object from a CheckUsernameRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @static
                 * @param {merico.vdev.user.CheckUsernameRequest} message CheckUsernameRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        CheckUsernameRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.username = '';}
          if (message.username != null && message.hasOwnProperty('username'))
          {object.username = message.username;}
          return object;
        };

        /**
                 * Converts this CheckUsernameRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.CheckUsernameRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        CheckUsernameRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CheckUsernameRequest;
      })();

      user.CheckUsernameResponse = (function() {

        /**
                 * Properties of a CheckUsernameResponse.
                 * @memberof merico.vdev.user
                 * @interface ICheckUsernameResponse
                 * @property {boolean|null} [taken] CheckUsernameResponse taken
                 */

        /**
                 * Constructs a new CheckUsernameResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a CheckUsernameResponse.
                 * @implements ICheckUsernameResponse
                 * @constructor
                 * @param {merico.vdev.user.ICheckUsernameResponse=} [properties] Properties to set
                 */
        function CheckUsernameResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * CheckUsernameResponse taken.
                 * @member {boolean} taken
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @instance
                 */
        CheckUsernameResponse.prototype.taken = false;

        /**
                 * Creates a new CheckUsernameResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {merico.vdev.user.ICheckUsernameResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.CheckUsernameResponse} CheckUsernameResponse instance
                 */
        CheckUsernameResponse.create = function create(properties) {
          return new CheckUsernameResponse(properties);
        };

        /**
                 * Encodes the specified CheckUsernameResponse message. Does not implicitly {@link merico.vdev.user.CheckUsernameResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {merico.vdev.user.ICheckUsernameResponse} message CheckUsernameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CheckUsernameResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.taken != null && message.hasOwnProperty('taken'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.taken);}
          return writer;
        };

        /**
                 * Encodes the specified CheckUsernameResponse message, length delimited. Does not implicitly {@link merico.vdev.user.CheckUsernameResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {merico.vdev.user.ICheckUsernameResponse} message CheckUsernameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CheckUsernameResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a CheckUsernameResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.CheckUsernameResponse} CheckUsernameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CheckUsernameResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.CheckUsernameResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.taken = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a CheckUsernameResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.CheckUsernameResponse} CheckUsernameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CheckUsernameResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a CheckUsernameResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        CheckUsernameResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.taken != null && message.hasOwnProperty('taken'))
          {if (typeof message.taken !== 'boolean')
          {return 'taken: boolean expected';}}
          return null;
        };

        /**
                 * Creates a CheckUsernameResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.CheckUsernameResponse} CheckUsernameResponse
                 */
        CheckUsernameResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.CheckUsernameResponse)
          {return object;}
          var message = new $root.merico.vdev.user.CheckUsernameResponse();
          if (object.taken != null)
          {message.taken = Boolean(object.taken);}
          return message;
        };

        /**
                 * Creates a plain object from a CheckUsernameResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @static
                 * @param {merico.vdev.user.CheckUsernameResponse} message CheckUsernameResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        CheckUsernameResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.taken = false;}
          if (message.taken != null && message.hasOwnProperty('taken'))
          {object.taken = message.taken;}
          return object;
        };

        /**
                 * Converts this CheckUsernameResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.CheckUsernameResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        CheckUsernameResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CheckUsernameResponse;
      })();

      user.VerifyEmailRequest = (function() {

        /**
                 * Properties of a VerifyEmailRequest.
                 * @memberof merico.vdev.user
                 * @interface IVerifyEmailRequest
                 * @property {string|null} [email] VerifyEmailRequest email
                 */

        /**
                 * Constructs a new VerifyEmailRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a VerifyEmailRequest.
                 * @implements IVerifyEmailRequest
                 * @constructor
                 * @param {merico.vdev.user.IVerifyEmailRequest=} [properties] Properties to set
                 */
        function VerifyEmailRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * VerifyEmailRequest email.
                 * @member {string} email
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @instance
                 */
        VerifyEmailRequest.prototype.email = '';

        /**
                 * Creates a new VerifyEmailRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {merico.vdev.user.IVerifyEmailRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.VerifyEmailRequest} VerifyEmailRequest instance
                 */
        VerifyEmailRequest.create = function create(properties) {
          return new VerifyEmailRequest(properties);
        };

        /**
                 * Encodes the specified VerifyEmailRequest message. Does not implicitly {@link merico.vdev.user.VerifyEmailRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {merico.vdev.user.IVerifyEmailRequest} message VerifyEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        VerifyEmailRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.email != null && message.hasOwnProperty('email'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.email);}
          return writer;
        };

        /**
                 * Encodes the specified VerifyEmailRequest message, length delimited. Does not implicitly {@link merico.vdev.user.VerifyEmailRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {merico.vdev.user.IVerifyEmailRequest} message VerifyEmailRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        VerifyEmailRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a VerifyEmailRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.VerifyEmailRequest} VerifyEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        VerifyEmailRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.VerifyEmailRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.email = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a VerifyEmailRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.VerifyEmailRequest} VerifyEmailRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        VerifyEmailRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a VerifyEmailRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        VerifyEmailRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.email != null && message.hasOwnProperty('email'))
          {if (!$util.isString(message.email))
          {return 'email: string expected';}}
          return null;
        };

        /**
                 * Creates a VerifyEmailRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.VerifyEmailRequest} VerifyEmailRequest
                 */
        VerifyEmailRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.VerifyEmailRequest)
          {return object;}
          var message = new $root.merico.vdev.user.VerifyEmailRequest();
          if (object.email != null)
          {message.email = String(object.email);}
          return message;
        };

        /**
                 * Creates a plain object from a VerifyEmailRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @static
                 * @param {merico.vdev.user.VerifyEmailRequest} message VerifyEmailRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        VerifyEmailRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.email = '';}
          if (message.email != null && message.hasOwnProperty('email'))
          {object.email = message.email;}
          return object;
        };

        /**
                 * Converts this VerifyEmailRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.VerifyEmailRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        VerifyEmailRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VerifyEmailRequest;
      })();

      user.VerifyEmailResponse = (function() {

        /**
                 * Properties of a VerifyEmailResponse.
                 * @memberof merico.vdev.user
                 * @interface IVerifyEmailResponse
                 * @property {boolean|null} [occupied] VerifyEmailResponse occupied
                 */

        /**
                 * Constructs a new VerifyEmailResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a VerifyEmailResponse.
                 * @implements IVerifyEmailResponse
                 * @constructor
                 * @param {merico.vdev.user.IVerifyEmailResponse=} [properties] Properties to set
                 */
        function VerifyEmailResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * VerifyEmailResponse occupied.
                 * @member {boolean} occupied
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @instance
                 */
        VerifyEmailResponse.prototype.occupied = false;

        /**
                 * Creates a new VerifyEmailResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {merico.vdev.user.IVerifyEmailResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.VerifyEmailResponse} VerifyEmailResponse instance
                 */
        VerifyEmailResponse.create = function create(properties) {
          return new VerifyEmailResponse(properties);
        };

        /**
                 * Encodes the specified VerifyEmailResponse message. Does not implicitly {@link merico.vdev.user.VerifyEmailResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {merico.vdev.user.IVerifyEmailResponse} message VerifyEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        VerifyEmailResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.occupied != null && message.hasOwnProperty('occupied'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.occupied);}
          return writer;
        };

        /**
                 * Encodes the specified VerifyEmailResponse message, length delimited. Does not implicitly {@link merico.vdev.user.VerifyEmailResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {merico.vdev.user.IVerifyEmailResponse} message VerifyEmailResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        VerifyEmailResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a VerifyEmailResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.VerifyEmailResponse} VerifyEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        VerifyEmailResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.VerifyEmailResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.occupied = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a VerifyEmailResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.VerifyEmailResponse} VerifyEmailResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        VerifyEmailResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a VerifyEmailResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        VerifyEmailResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.occupied != null && message.hasOwnProperty('occupied'))
          {if (typeof message.occupied !== 'boolean')
          {return 'occupied: boolean expected';}}
          return null;
        };

        /**
                 * Creates a VerifyEmailResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.VerifyEmailResponse} VerifyEmailResponse
                 */
        VerifyEmailResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.VerifyEmailResponse)
          {return object;}
          var message = new $root.merico.vdev.user.VerifyEmailResponse();
          if (object.occupied != null)
          {message.occupied = Boolean(object.occupied);}
          return message;
        };

        /**
                 * Creates a plain object from a VerifyEmailResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @static
                 * @param {merico.vdev.user.VerifyEmailResponse} message VerifyEmailResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        VerifyEmailResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.occupied = false;}
          if (message.occupied != null && message.hasOwnProperty('occupied'))
          {object.occupied = message.occupied;}
          return object;
        };

        /**
                 * Converts this VerifyEmailResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.VerifyEmailResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        VerifyEmailResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VerifyEmailResponse;
      })();

      user.Registrant = (function() {

        /**
                 * Properties of a Registrant.
                 * @memberof merico.vdev.user
                 * @interface IRegistrant
                 * @property {string|null} [username] Registrant username
                 * @property {string|null} [fullName] Registrant fullName
                 * @property {string|null} [password] Registrant password
                 * @property {string|null} [primaryEmail] Registrant primaryEmail
                 * @property {string|null} [token] Registrant token
                 */

        /**
                 * Constructs a new Registrant.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a Registrant.
                 * @implements IRegistrant
                 * @constructor
                 * @param {merico.vdev.user.IRegistrant=} [properties] Properties to set
                 */
        function Registrant(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Registrant username.
                 * @member {string} username
                 * @memberof merico.vdev.user.Registrant
                 * @instance
                 */
        Registrant.prototype.username = '';

        /**
                 * Registrant fullName.
                 * @member {string} fullName
                 * @memberof merico.vdev.user.Registrant
                 * @instance
                 */
        Registrant.prototype.fullName = '';

        /**
                 * Registrant password.
                 * @member {string} password
                 * @memberof merico.vdev.user.Registrant
                 * @instance
                 */
        Registrant.prototype.password = '';

        /**
                 * Registrant primaryEmail.
                 * @member {string} primaryEmail
                 * @memberof merico.vdev.user.Registrant
                 * @instance
                 */
        Registrant.prototype.primaryEmail = '';

        /**
                 * Registrant token.
                 * @member {string} token
                 * @memberof merico.vdev.user.Registrant
                 * @instance
                 */
        Registrant.prototype.token = '';

        /**
                 * Creates a new Registrant instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {merico.vdev.user.IRegistrant=} [properties] Properties to set
                 * @returns {merico.vdev.user.Registrant} Registrant instance
                 */
        Registrant.create = function create(properties) {
          return new Registrant(properties);
        };

        /**
                 * Encodes the specified Registrant message. Does not implicitly {@link merico.vdev.user.Registrant.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {merico.vdev.user.IRegistrant} message Registrant message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        Registrant.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.username != null && message.hasOwnProperty('username'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);}
          if (message.fullName != null && message.hasOwnProperty('fullName'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullName);}
          if (message.password != null && message.hasOwnProperty('password'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.password);}
          if (message.primaryEmail != null && message.hasOwnProperty('primaryEmail'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.primaryEmail);}
          if (message.token != null && message.hasOwnProperty('token'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.token);}
          return writer;
        };

        /**
                 * Encodes the specified Registrant message, length delimited. Does not implicitly {@link merico.vdev.user.Registrant.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {merico.vdev.user.IRegistrant} message Registrant message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        Registrant.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a Registrant message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.Registrant} Registrant
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        Registrant.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.Registrant();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.username = reader.string();
                break;
              case 2:
                message.fullName = reader.string();
                break;
              case 3:
                message.password = reader.string();
                break;
              case 4:
                message.primaryEmail = reader.string();
                break;
              case 5:
                message.token = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a Registrant message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.Registrant} Registrant
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        Registrant.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a Registrant message.
                 * @function verify
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        Registrant.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.username != null && message.hasOwnProperty('username'))
          {if (!$util.isString(message.username))
          {return 'username: string expected';}}
          if (message.fullName != null && message.hasOwnProperty('fullName'))
          {if (!$util.isString(message.fullName))
          {return 'fullName: string expected';}}
          if (message.password != null && message.hasOwnProperty('password'))
          {if (!$util.isString(message.password))
          {return 'password: string expected';}}
          if (message.primaryEmail != null && message.hasOwnProperty('primaryEmail'))
          {if (!$util.isString(message.primaryEmail))
          {return 'primaryEmail: string expected';}}
          if (message.token != null && message.hasOwnProperty('token'))
          {if (!$util.isString(message.token))
          {return 'token: string expected';}}
          return null;
        };

        /**
                 * Creates a Registrant message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.Registrant} Registrant
                 */
        Registrant.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.Registrant)
          {return object;}
          var message = new $root.merico.vdev.user.Registrant();
          if (object.username != null)
          {message.username = String(object.username);}
          if (object.fullName != null)
          {message.fullName = String(object.fullName);}
          if (object.password != null)
          {message.password = String(object.password);}
          if (object.primaryEmail != null)
          {message.primaryEmail = String(object.primaryEmail);}
          if (object.token != null)
          {message.token = String(object.token);}
          return message;
        };

        /**
                 * Creates a plain object from a Registrant message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.Registrant
                 * @static
                 * @param {merico.vdev.user.Registrant} message Registrant
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        Registrant.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.username = '';
            object.fullName = '';
            object.password = '';
            object.primaryEmail = '';
            object.token = '';
          }
          if (message.username != null && message.hasOwnProperty('username'))
          {object.username = message.username;}
          if (message.fullName != null && message.hasOwnProperty('fullName'))
          {object.fullName = message.fullName;}
          if (message.password != null && message.hasOwnProperty('password'))
          {object.password = message.password;}
          if (message.primaryEmail != null && message.hasOwnProperty('primaryEmail'))
          {object.primaryEmail = message.primaryEmail;}
          if (message.token != null && message.hasOwnProperty('token'))
          {object.token = message.token;}
          return object;
        };

        /**
                 * Converts this Registrant to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.Registrant
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        Registrant.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Registrant;
      })();

      user.RegisterResponse = (function() {

        /**
                 * Properties of a RegisterResponse.
                 * @memberof merico.vdev.user
                 * @interface IRegisterResponse
                 * @property {boolean|null} [success] RegisterResponse success
                 * @property {merico.vdev.ErrorMessage|null} [error] RegisterResponse error
                 * @property {string|null} [userId] RegisterResponse userId
                 */

        /**
                 * Constructs a new RegisterResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a RegisterResponse.
                 * @implements IRegisterResponse
                 * @constructor
                 * @param {merico.vdev.user.IRegisterResponse=} [properties] Properties to set
                 */
        function RegisterResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * RegisterResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.RegisterResponse
                 * @instance
                 */
        RegisterResponse.prototype.success = false;

        /**
                 * RegisterResponse error.
                 * @member {merico.vdev.ErrorMessage} error
                 * @memberof merico.vdev.user.RegisterResponse
                 * @instance
                 */
        RegisterResponse.prototype.error = 0;

        /**
                 * RegisterResponse userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.RegisterResponse
                 * @instance
                 */
        RegisterResponse.prototype.userId = '';

        /**
                 * Creates a new RegisterResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {merico.vdev.user.IRegisterResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.RegisterResponse} RegisterResponse instance
                 */
        RegisterResponse.create = function create(properties) {
          return new RegisterResponse(properties);
        };

        /**
                 * Encodes the specified RegisterResponse message. Does not implicitly {@link merico.vdev.user.RegisterResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {merico.vdev.user.IRegisterResponse} message RegisterResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RegisterResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.error != null && message.hasOwnProperty('error'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.error);}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);}
          return writer;
        };

        /**
                 * Encodes the specified RegisterResponse message, length delimited. Does not implicitly {@link merico.vdev.user.RegisterResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {merico.vdev.user.IRegisterResponse} message RegisterResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        RegisterResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a RegisterResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.RegisterResponse} RegisterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RegisterResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.RegisterResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.error = reader.int32();
                break;
              case 3:
                message.userId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a RegisterResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.RegisterResponse} RegisterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        RegisterResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a RegisterResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        RegisterResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.error != null && message.hasOwnProperty('error'))
          {switch (message.error) {
            default:
              return 'error: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          return null;
        };

        /**
                 * Creates a RegisterResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.RegisterResponse} RegisterResponse
                 */
        RegisterResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.RegisterResponse)
          {return object;}
          var message = new $root.merico.vdev.user.RegisterResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.error) {
            case 'EMPTY':
            case 0:
              message.error = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.error = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.error = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.error = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.error = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.error = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.error = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.error = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.error = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.error = 9;
              break;
          }
          if (object.userId != null)
          {message.userId = String(object.userId);}
          return message;
        };

        /**
                 * Creates a plain object from a RegisterResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.RegisterResponse
                 * @static
                 * @param {merico.vdev.user.RegisterResponse} message RegisterResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        RegisterResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.error = options.enums === String ? 'EMPTY' : 0;
            object.userId = '';
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.error != null && message.hasOwnProperty('error'))
          {object.error = options.enums === String ? $root.merico.vdev.ErrorMessage[message.error] : message.error;}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          return object;
        };

        /**
                 * Converts this RegisterResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.RegisterResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        RegisterResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegisterResponse;
      })();

      user.LoginRequest = (function() {

        /**
                 * Properties of a LoginRequest.
                 * @memberof merico.vdev.user
                 * @interface ILoginRequest
                 * @property {string|null} [username] LoginRequest username
                 * @property {string|null} [password] LoginRequest password
                 */

        /**
                 * Constructs a new LoginRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a LoginRequest.
                 * @implements ILoginRequest
                 * @constructor
                 * @param {merico.vdev.user.ILoginRequest=} [properties] Properties to set
                 */
        function LoginRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * LoginRequest username.
                 * @member {string} username
                 * @memberof merico.vdev.user.LoginRequest
                 * @instance
                 */
        LoginRequest.prototype.username = '';

        /**
                 * LoginRequest password.
                 * @member {string} password
                 * @memberof merico.vdev.user.LoginRequest
                 * @instance
                 */
        LoginRequest.prototype.password = '';

        /**
                 * Creates a new LoginRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {merico.vdev.user.ILoginRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.LoginRequest} LoginRequest instance
                 */
        LoginRequest.create = function create(properties) {
          return new LoginRequest(properties);
        };

        /**
                 * Encodes the specified LoginRequest message. Does not implicitly {@link merico.vdev.user.LoginRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {merico.vdev.user.ILoginRequest} message LoginRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LoginRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.username != null && message.hasOwnProperty('username'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);}
          if (message.password != null && message.hasOwnProperty('password'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);}
          return writer;
        };

        /**
                 * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link merico.vdev.user.LoginRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {merico.vdev.user.ILoginRequest} message LoginRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a LoginRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.LoginRequest} LoginRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LoginRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.LoginRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.username = reader.string();
                break;
              case 2:
                message.password = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a LoginRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.LoginRequest} LoginRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LoginRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a LoginRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        LoginRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.username != null && message.hasOwnProperty('username'))
          {if (!$util.isString(message.username))
          {return 'username: string expected';}}
          if (message.password != null && message.hasOwnProperty('password'))
          {if (!$util.isString(message.password))
          {return 'password: string expected';}}
          return null;
        };

        /**
                 * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.LoginRequest} LoginRequest
                 */
        LoginRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.LoginRequest)
          {return object;}
          var message = new $root.merico.vdev.user.LoginRequest();
          if (object.username != null)
          {message.username = String(object.username);}
          if (object.password != null)
          {message.password = String(object.password);}
          return message;
        };

        /**
                 * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.LoginRequest
                 * @static
                 * @param {merico.vdev.user.LoginRequest} message LoginRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        LoginRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.username = '';
            object.password = '';
          }
          if (message.username != null && message.hasOwnProperty('username'))
          {object.username = message.username;}
          if (message.password != null && message.hasOwnProperty('password'))
          {object.password = message.password;}
          return object;
        };

        /**
                 * Converts this LoginRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.LoginRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        LoginRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoginRequest;
      })();

      user.LoginResponse = (function() {

        /**
                 * Properties of a LoginResponse.
                 * @memberof merico.vdev.user
                 * @interface ILoginResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] LoginResponse status
                 * @property {merico.vdev.user.LoginResponse.SpecialErrorCode|null} [specialErrorCode] LoginResponse specialErrorCode
                 * @property {string|null} [userId] LoginResponse userId
                 */

        /**
                 * Constructs a new LoginResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a LoginResponse.
                 * @implements ILoginResponse
                 * @constructor
                 * @param {merico.vdev.user.ILoginResponse=} [properties] Properties to set
                 */
        function LoginResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * LoginResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.user.LoginResponse
                 * @instance
                 */
        LoginResponse.prototype.status = null;

        /**
                 * LoginResponse specialErrorCode.
                 * @member {merico.vdev.user.LoginResponse.SpecialErrorCode} specialErrorCode
                 * @memberof merico.vdev.user.LoginResponse
                 * @instance
                 */
        LoginResponse.prototype.specialErrorCode = 0;

        /**
                 * LoginResponse userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.LoginResponse
                 * @instance
                 */
        LoginResponse.prototype.userId = '';

        /**
                 * Creates a new LoginResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {merico.vdev.user.ILoginResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.LoginResponse} LoginResponse instance
                 */
        LoginResponse.create = function create(properties) {
          return new LoginResponse(properties);
        };

        /**
                 * Encodes the specified LoginResponse message. Does not implicitly {@link merico.vdev.user.LoginResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {merico.vdev.user.ILoginResponse} message LoginResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LoginResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);}
          if (message.specialErrorCode != null && message.hasOwnProperty('specialErrorCode'))
          {writer.uint32(/* id 14, wireType 0 =*/112).int32(message.specialErrorCode);}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified LoginResponse message, length delimited. Does not implicitly {@link merico.vdev.user.LoginResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {merico.vdev.user.ILoginResponse} message LoginResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LoginResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a LoginResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.LoginResponse} LoginResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LoginResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.LoginResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 15:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 14:
                message.specialErrorCode = reader.int32();
                break;
              case 3:
                message.userId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a LoginResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.LoginResponse} LoginResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LoginResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a LoginResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        LoginResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.specialErrorCode != null && message.hasOwnProperty('specialErrorCode'))
          {switch (message.specialErrorCode) {
            default:
              return 'specialErrorCode: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          return null;
        };

        /**
                 * Creates a LoginResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.LoginResponse} LoginResponse
                 */
        LoginResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.LoginResponse)
          {return object;}
          var message = new $root.merico.vdev.user.LoginResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.user.LoginResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          switch (object.specialErrorCode) {
            case 'SUCCESS':
            case 0:
              message.specialErrorCode = 0;
              break;
            case 'USERNAME_FORMAT_ERROR':
            case 1:
              message.specialErrorCode = 1;
              break;
            case 'USERNAME_NOT_FOUND':
            case 2:
              message.specialErrorCode = 2;
              break;
            case 'EMAIL_FORMAT_ERROR':
            case 3:
              message.specialErrorCode = 3;
              break;
            case 'EMAIL_NOT_FROUND':
            case 4:
              message.specialErrorCode = 4;
              break;
            case 'PASSWORD_FORMAT_ERROR':
            case 5:
              message.specialErrorCode = 5;
              break;
            case 'PASSWORD_ERROR':
            case 6:
              message.specialErrorCode = 6;
              break;
            case 'USER_FORBIDDEN':
            case 7:
              message.specialErrorCode = 7;
              break;
            case 'EMAIL_NOT_PRIMARY':
            case 8:
              message.specialErrorCode = 8;
              break;
            case 'PASSWORD_NOT_SET':
            case 9:
              message.specialErrorCode = 9;
              break;
          }
          if (object.userId != null)
          {message.userId = String(object.userId);}
          return message;
        };

        /**
                 * Creates a plain object from a LoginResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.LoginResponse
                 * @static
                 * @param {merico.vdev.user.LoginResponse} message LoginResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        LoginResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.specialErrorCode = options.enums === String ? 'SUCCESS' : 0;
            object.status = null;
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.specialErrorCode != null && message.hasOwnProperty('specialErrorCode'))
          {object.specialErrorCode = options.enums === String ? $root.merico.vdev.user.LoginResponse.SpecialErrorCode[message.specialErrorCode] : message.specialErrorCode;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          return object;
        };

        /**
                 * Converts this LoginResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.LoginResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        LoginResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
                 * SpecialErrorCode enum.
                 * @name merico.vdev.user.LoginResponse.SpecialErrorCode
                 * @enum {string}
                 * @property {number} SUCCESS=0 SUCCESS value
                 * @property {number} USERNAME_FORMAT_ERROR=1 USERNAME_FORMAT_ERROR value
                 * @property {number} USERNAME_NOT_FOUND=2 USERNAME_NOT_FOUND value
                 * @property {number} EMAIL_FORMAT_ERROR=3 EMAIL_FORMAT_ERROR value
                 * @property {number} EMAIL_NOT_FROUND=4 EMAIL_NOT_FROUND value
                 * @property {number} PASSWORD_FORMAT_ERROR=5 PASSWORD_FORMAT_ERROR value
                 * @property {number} PASSWORD_ERROR=6 PASSWORD_ERROR value
                 * @property {number} USER_FORBIDDEN=7 USER_FORBIDDEN value
                 * @property {number} EMAIL_NOT_PRIMARY=8 EMAIL_NOT_PRIMARY value
                 * @property {number} PASSWORD_NOT_SET=9 PASSWORD_NOT_SET value
                 */
        LoginResponse.SpecialErrorCode = (function() {
          var valuesById = {}; var values = Object.create(valuesById);
          values[valuesById[0] = 'SUCCESS'] = 0;
          values[valuesById[1] = 'USERNAME_FORMAT_ERROR'] = 1;
          values[valuesById[2] = 'USERNAME_NOT_FOUND'] = 2;
          values[valuesById[3] = 'EMAIL_FORMAT_ERROR'] = 3;
          values[valuesById[4] = 'EMAIL_NOT_FROUND'] = 4;
          values[valuesById[5] = 'PASSWORD_FORMAT_ERROR'] = 5;
          values[valuesById[6] = 'PASSWORD_ERROR'] = 6;
          values[valuesById[7] = 'USER_FORBIDDEN'] = 7;
          values[valuesById[8] = 'EMAIL_NOT_PRIMARY'] = 8;
          values[valuesById[9] = 'PASSWORD_NOT_SET'] = 9;
          return values;
        })();

        return LoginResponse;
      })();

      user.OAuthLoginRequest = (function() {

        /**
                 * Properties of a OAuthLoginRequest.
                 * @memberof merico.vdev.user
                 * @interface IOAuthLoginRequest
                 * @property {merico.vdev.user.Link.Type|null} [app] OAuthLoginRequest app
                 * @property {string|null} [appUserId] OAuthLoginRequest appUserId
                 * @property {string|null} [token] OAuthLoginRequest token
                 * @property {number|Long|null} [expiration] OAuthLoginRequest expiration
                 * @property {string|null} [refreshToken] OAuthLoginRequest refreshToken
                 */

        /**
                 * Constructs a new OAuthLoginRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a OAuthLoginRequest.
                 * @implements IOAuthLoginRequest
                 * @constructor
                 * @param {merico.vdev.user.IOAuthLoginRequest=} [properties] Properties to set
                 */
        function OAuthLoginRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * OAuthLoginRequest app.
                 * @member {merico.vdev.user.Link.Type} app
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @instance
                 */
        OAuthLoginRequest.prototype.app = 0;

        /**
                 * OAuthLoginRequest appUserId.
                 * @member {string} appUserId
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @instance
                 */
        OAuthLoginRequest.prototype.appUserId = '';

        /**
                 * OAuthLoginRequest token.
                 * @member {string} token
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @instance
                 */
        OAuthLoginRequest.prototype.token = '';

        /**
                 * OAuthLoginRequest expiration.
                 * @member {number|Long} expiration
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @instance
                 */
        OAuthLoginRequest.prototype.expiration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * OAuthLoginRequest refreshToken.
                 * @member {string} refreshToken
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @instance
                 */
        OAuthLoginRequest.prototype.refreshToken = '';

        /**
                 * Creates a new OAuthLoginRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {merico.vdev.user.IOAuthLoginRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.OAuthLoginRequest} OAuthLoginRequest instance
                 */
        OAuthLoginRequest.create = function create(properties) {
          return new OAuthLoginRequest(properties);
        };

        /**
                 * Encodes the specified OAuthLoginRequest message. Does not implicitly {@link merico.vdev.user.OAuthLoginRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {merico.vdev.user.IOAuthLoginRequest} message OAuthLoginRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        OAuthLoginRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.app != null && message.hasOwnProperty('app'))
          {writer.uint32(/* id 1, wireType 0 =*/8).int32(message.app);}
          if (message.appUserId != null && message.hasOwnProperty('appUserId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.appUserId);}
          if (message.token != null && message.hasOwnProperty('token'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);}
          if (message.expiration != null && message.hasOwnProperty('expiration'))
          {writer.uint32(/* id 4, wireType 0 =*/32).int64(message.expiration);}
          if (message.refreshToken != null && message.hasOwnProperty('refreshToken'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.refreshToken);}
          return writer;
        };

        /**
                 * Encodes the specified OAuthLoginRequest message, length delimited. Does not implicitly {@link merico.vdev.user.OAuthLoginRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {merico.vdev.user.IOAuthLoginRequest} message OAuthLoginRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        OAuthLoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a OAuthLoginRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.OAuthLoginRequest} OAuthLoginRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        OAuthLoginRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.OAuthLoginRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.app = reader.int32();
                break;
              case 2:
                message.appUserId = reader.string();
                break;
              case 3:
                message.token = reader.string();
                break;
              case 4:
                message.expiration = reader.int64();
                break;
              case 5:
                message.refreshToken = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a OAuthLoginRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.OAuthLoginRequest} OAuthLoginRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        OAuthLoginRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a OAuthLoginRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        OAuthLoginRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.app != null && message.hasOwnProperty('app'))
          {switch (message.app) {
            default:
              return 'app: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 10:
            case 20:
            case 21:
            case 22:
            case 30:
            case 31:
              break;
          }}
          if (message.appUserId != null && message.hasOwnProperty('appUserId'))
          {if (!$util.isString(message.appUserId))
          {return 'appUserId: string expected';}}
          if (message.token != null && message.hasOwnProperty('token'))
          {if (!$util.isString(message.token))
          {return 'token: string expected';}}
          if (message.expiration != null && message.hasOwnProperty('expiration'))
          {if (!$util.isInteger(message.expiration) && !(message.expiration && $util.isInteger(message.expiration.low) && $util.isInteger(message.expiration.high)))
          {return 'expiration: integer|Long expected';}}
          if (message.refreshToken != null && message.hasOwnProperty('refreshToken'))
          {if (!$util.isString(message.refreshToken))
          {return 'refreshToken: string expected';}}
          return null;
        };

        /**
                 * Creates a OAuthLoginRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.OAuthLoginRequest} OAuthLoginRequest
                 */
        OAuthLoginRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.OAuthLoginRequest)
          {return object;}
          var message = new $root.merico.vdev.user.OAuthLoginRequest();
          switch (object.app) {
            case 'WEB':
            case 0:
              message.app = 0;
              break;
            case 'GITHUB':
            case 1:
              message.app = 1;
              break;
            case 'GITLAB':
            case 2:
              message.app = 2;
              break;
            case 'BITBUCKET':
            case 3:
              message.app = 3;
              break;
            case 'GITEE':
            case 10:
              message.app = 10;
              break;
            case 'FACEBOOK':
            case 20:
              message.app = 20;
              break;
            case 'TWITTER':
            case 21:
              message.app = 21;
              break;
            case 'SKYPE':
            case 22:
              message.app = 22;
              break;
            case 'WECHAT':
            case 30:
              message.app = 30;
              break;
            case 'WEIBO':
            case 31:
              message.app = 31;
              break;
          }
          if (object.appUserId != null)
          {message.appUserId = String(object.appUserId);}
          if (object.token != null)
          {message.token = String(object.token);}
          if (object.expiration != null)
          {if ($util.Long)
          {(message.expiration = $util.Long.fromValue(object.expiration)).unsigned = false;}
          else if (typeof object.expiration === 'string')
          {message.expiration = parseInt(object.expiration, 10);}
          else if (typeof object.expiration === 'number')
          {message.expiration = object.expiration;}
          else if (typeof object.expiration === 'object')
          {message.expiration = new $util.LongBits(object.expiration.low >>> 0, object.expiration.high >>> 0).toNumber();}}
          if (object.refreshToken != null)
          {message.refreshToken = String(object.refreshToken);}
          return message;
        };

        /**
                 * Creates a plain object from a OAuthLoginRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @static
                 * @param {merico.vdev.user.OAuthLoginRequest} message OAuthLoginRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        OAuthLoginRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.app = options.enums === String ? 'WEB' : 0;
            object.appUserId = '';
            object.token = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.expiration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.expiration = options.longs === String ? '0' : 0;}
            object.refreshToken = '';
          }
          if (message.app != null && message.hasOwnProperty('app'))
          {object.app = options.enums === String ? $root.merico.vdev.user.Link.Type[message.app] : message.app;}
          if (message.appUserId != null && message.hasOwnProperty('appUserId'))
          {object.appUserId = message.appUserId;}
          if (message.token != null && message.hasOwnProperty('token'))
          {object.token = message.token;}
          if (message.expiration != null && message.hasOwnProperty('expiration'))
          {if (typeof message.expiration === 'number')
          {object.expiration = options.longs === String ? String(message.expiration) : message.expiration;}
          else
          {object.expiration = options.longs === String ? $util.Long.prototype.toString.call(message.expiration) : options.longs === Number ? new $util.LongBits(message.expiration.low >>> 0, message.expiration.high >>> 0).toNumber() : message.expiration;}}
          if (message.refreshToken != null && message.hasOwnProperty('refreshToken'))
          {object.refreshToken = message.refreshToken;}
          return object;
        };

        /**
                 * Converts this OAuthLoginRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.OAuthLoginRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        OAuthLoginRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return OAuthLoginRequest;
      })();

      user.OAuthLoginResponse = (function() {

        /**
                 * Properties of a OAuthLoginResponse.
                 * @memberof merico.vdev.user
                 * @interface IOAuthLoginResponse
                 * @property {boolean|null} [success] OAuthLoginResponse success
                 * @property {merico.vdev.ErrorMessage|null} [error] OAuthLoginResponse error
                 * @property {string|null} [userId] OAuthLoginResponse userId
                 */

        /**
                 * Constructs a new OAuthLoginResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a OAuthLoginResponse.
                 * @implements IOAuthLoginResponse
                 * @constructor
                 * @param {merico.vdev.user.IOAuthLoginResponse=} [properties] Properties to set
                 */
        function OAuthLoginResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * OAuthLoginResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @instance
                 */
        OAuthLoginResponse.prototype.success = false;

        /**
                 * OAuthLoginResponse error.
                 * @member {merico.vdev.ErrorMessage} error
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @instance
                 */
        OAuthLoginResponse.prototype.error = 0;

        /**
                 * OAuthLoginResponse userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @instance
                 */
        OAuthLoginResponse.prototype.userId = '';

        /**
                 * Creates a new OAuthLoginResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {merico.vdev.user.IOAuthLoginResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.OAuthLoginResponse} OAuthLoginResponse instance
                 */
        OAuthLoginResponse.create = function create(properties) {
          return new OAuthLoginResponse(properties);
        };

        /**
                 * Encodes the specified OAuthLoginResponse message. Does not implicitly {@link merico.vdev.user.OAuthLoginResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {merico.vdev.user.IOAuthLoginResponse} message OAuthLoginResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        OAuthLoginResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.error != null && message.hasOwnProperty('error'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.error);}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);}
          return writer;
        };

        /**
                 * Encodes the specified OAuthLoginResponse message, length delimited. Does not implicitly {@link merico.vdev.user.OAuthLoginResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {merico.vdev.user.IOAuthLoginResponse} message OAuthLoginResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        OAuthLoginResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a OAuthLoginResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.OAuthLoginResponse} OAuthLoginResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        OAuthLoginResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.OAuthLoginResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.error = reader.int32();
                break;
              case 3:
                message.userId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a OAuthLoginResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.OAuthLoginResponse} OAuthLoginResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        OAuthLoginResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a OAuthLoginResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        OAuthLoginResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.error != null && message.hasOwnProperty('error'))
          {switch (message.error) {
            default:
              return 'error: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          return null;
        };

        /**
                 * Creates a OAuthLoginResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.OAuthLoginResponse} OAuthLoginResponse
                 */
        OAuthLoginResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.OAuthLoginResponse)
          {return object;}
          var message = new $root.merico.vdev.user.OAuthLoginResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.error) {
            case 'EMPTY':
            case 0:
              message.error = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.error = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.error = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.error = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.error = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.error = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.error = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.error = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.error = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.error = 9;
              break;
          }
          if (object.userId != null)
          {message.userId = String(object.userId);}
          return message;
        };

        /**
                 * Creates a plain object from a OAuthLoginResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @static
                 * @param {merico.vdev.user.OAuthLoginResponse} message OAuthLoginResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        OAuthLoginResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.error = options.enums === String ? 'EMPTY' : 0;
            object.userId = '';
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.error != null && message.hasOwnProperty('error'))
          {object.error = options.enums === String ? $root.merico.vdev.ErrorMessage[message.error] : message.error;}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          return object;
        };

        /**
                 * Converts this OAuthLoginResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.OAuthLoginResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        OAuthLoginResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return OAuthLoginResponse;
      })();

      user.SendTokenRequest = (function() {

        /**
                 * Properties of a SendTokenRequest.
                 * @memberof merico.vdev.user
                 * @interface ISendTokenRequest
                 * @property {string|null} [email] SendTokenRequest email
                 */

        /**
                 * Constructs a new SendTokenRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a SendTokenRequest.
                 * @implements ISendTokenRequest
                 * @constructor
                 * @param {merico.vdev.user.ISendTokenRequest=} [properties] Properties to set
                 */
        function SendTokenRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * SendTokenRequest email.
                 * @member {string} email
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @instance
                 */
        SendTokenRequest.prototype.email = '';

        /**
                 * Creates a new SendTokenRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {merico.vdev.user.ISendTokenRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.SendTokenRequest} SendTokenRequest instance
                 */
        SendTokenRequest.create = function create(properties) {
          return new SendTokenRequest(properties);
        };

        /**
                 * Encodes the specified SendTokenRequest message. Does not implicitly {@link merico.vdev.user.SendTokenRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {merico.vdev.user.ISendTokenRequest} message SendTokenRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SendTokenRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.email != null && message.hasOwnProperty('email'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.email);}
          return writer;
        };

        /**
                 * Encodes the specified SendTokenRequest message, length delimited. Does not implicitly {@link merico.vdev.user.SendTokenRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {merico.vdev.user.ISendTokenRequest} message SendTokenRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SendTokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a SendTokenRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.SendTokenRequest} SendTokenRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SendTokenRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.SendTokenRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.email = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a SendTokenRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.SendTokenRequest} SendTokenRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SendTokenRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a SendTokenRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        SendTokenRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.email != null && message.hasOwnProperty('email'))
          {if (!$util.isString(message.email))
          {return 'email: string expected';}}
          return null;
        };

        /**
                 * Creates a SendTokenRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.SendTokenRequest} SendTokenRequest
                 */
        SendTokenRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.SendTokenRequest)
          {return object;}
          var message = new $root.merico.vdev.user.SendTokenRequest();
          if (object.email != null)
          {message.email = String(object.email);}
          return message;
        };

        /**
                 * Creates a plain object from a SendTokenRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @static
                 * @param {merico.vdev.user.SendTokenRequest} message SendTokenRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        SendTokenRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.email = '';}
          if (message.email != null && message.hasOwnProperty('email'))
          {object.email = message.email;}
          return object;
        };

        /**
                 * Converts this SendTokenRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.SendTokenRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        SendTokenRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendTokenRequest;
      })();

      user.SendTokenResponse = (function() {

        /**
                 * Properties of a SendTokenResponse.
                 * @memberof merico.vdev.user
                 * @interface ISendTokenResponse
                 * @property {boolean|null} [success] SendTokenResponse success
                 * @property {merico.vdev.ErrorMessage|null} [error] SendTokenResponse error
                 */

        /**
                 * Constructs a new SendTokenResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a SendTokenResponse.
                 * @implements ISendTokenResponse
                 * @constructor
                 * @param {merico.vdev.user.ISendTokenResponse=} [properties] Properties to set
                 */
        function SendTokenResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * SendTokenResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @instance
                 */
        SendTokenResponse.prototype.success = false;

        /**
                 * SendTokenResponse error.
                 * @member {merico.vdev.ErrorMessage} error
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @instance
                 */
        SendTokenResponse.prototype.error = 0;

        /**
                 * Creates a new SendTokenResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {merico.vdev.user.ISendTokenResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.SendTokenResponse} SendTokenResponse instance
                 */
        SendTokenResponse.create = function create(properties) {
          return new SendTokenResponse(properties);
        };

        /**
                 * Encodes the specified SendTokenResponse message. Does not implicitly {@link merico.vdev.user.SendTokenResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {merico.vdev.user.ISendTokenResponse} message SendTokenResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SendTokenResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.error != null && message.hasOwnProperty('error'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.error);}
          return writer;
        };

        /**
                 * Encodes the specified SendTokenResponse message, length delimited. Does not implicitly {@link merico.vdev.user.SendTokenResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {merico.vdev.user.ISendTokenResponse} message SendTokenResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SendTokenResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a SendTokenResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.SendTokenResponse} SendTokenResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SendTokenResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.SendTokenResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.error = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a SendTokenResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.SendTokenResponse} SendTokenResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SendTokenResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a SendTokenResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        SendTokenResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.error != null && message.hasOwnProperty('error'))
          {switch (message.error) {
            default:
              return 'error: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates a SendTokenResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.SendTokenResponse} SendTokenResponse
                 */
        SendTokenResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.SendTokenResponse)
          {return object;}
          var message = new $root.merico.vdev.user.SendTokenResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.error) {
            case 'EMPTY':
            case 0:
              message.error = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.error = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.error = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.error = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.error = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.error = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.error = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.error = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.error = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.error = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from a SendTokenResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @static
                 * @param {merico.vdev.user.SendTokenResponse} message SendTokenResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        SendTokenResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.error = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.error != null && message.hasOwnProperty('error'))
          {object.error = options.enums === String ? $root.merico.vdev.ErrorMessage[message.error] : message.error;}
          return object;
        };

        /**
                 * Converts this SendTokenResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.SendTokenResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        SendTokenResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendTokenResponse;
      })();

      user.ResetPasswordByTokenRequest = (function() {

        /**
                 * Properties of a ResetPasswordByTokenRequest.
                 * @memberof merico.vdev.user
                 * @interface IResetPasswordByTokenRequest
                 * @property {string|null} [email] ResetPasswordByTokenRequest email
                 * @property {string|null} [password] ResetPasswordByTokenRequest password
                 * @property {string|null} [token] ResetPasswordByTokenRequest token
                 */

        /**
                 * Constructs a new ResetPasswordByTokenRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a ResetPasswordByTokenRequest.
                 * @implements IResetPasswordByTokenRequest
                 * @constructor
                 * @param {merico.vdev.user.IResetPasswordByTokenRequest=} [properties] Properties to set
                 */
        function ResetPasswordByTokenRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ResetPasswordByTokenRequest email.
                 * @member {string} email
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @instance
                 */
        ResetPasswordByTokenRequest.prototype.email = '';

        /**
                 * ResetPasswordByTokenRequest password.
                 * @member {string} password
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @instance
                 */
        ResetPasswordByTokenRequest.prototype.password = '';

        /**
                 * ResetPasswordByTokenRequest token.
                 * @member {string} token
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @instance
                 */
        ResetPasswordByTokenRequest.prototype.token = '';

        /**
                 * Creates a new ResetPasswordByTokenRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {merico.vdev.user.IResetPasswordByTokenRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.ResetPasswordByTokenRequest} ResetPasswordByTokenRequest instance
                 */
        ResetPasswordByTokenRequest.create = function create(properties) {
          return new ResetPasswordByTokenRequest(properties);
        };

        /**
                 * Encodes the specified ResetPasswordByTokenRequest message. Does not implicitly {@link merico.vdev.user.ResetPasswordByTokenRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {merico.vdev.user.IResetPasswordByTokenRequest} message ResetPasswordByTokenRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ResetPasswordByTokenRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.email != null && message.hasOwnProperty('email'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.email);}
          if (message.password != null && message.hasOwnProperty('password'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);}
          if (message.token != null && message.hasOwnProperty('token'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);}
          return writer;
        };

        /**
                 * Encodes the specified ResetPasswordByTokenRequest message, length delimited. Does not implicitly {@link merico.vdev.user.ResetPasswordByTokenRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {merico.vdev.user.IResetPasswordByTokenRequest} message ResetPasswordByTokenRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ResetPasswordByTokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ResetPasswordByTokenRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.ResetPasswordByTokenRequest} ResetPasswordByTokenRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ResetPasswordByTokenRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.ResetPasswordByTokenRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.email = reader.string();
                break;
              case 2:
                message.password = reader.string();
                break;
              case 3:
                message.token = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ResetPasswordByTokenRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.ResetPasswordByTokenRequest} ResetPasswordByTokenRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ResetPasswordByTokenRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ResetPasswordByTokenRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ResetPasswordByTokenRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.email != null && message.hasOwnProperty('email'))
          {if (!$util.isString(message.email))
          {return 'email: string expected';}}
          if (message.password != null && message.hasOwnProperty('password'))
          {if (!$util.isString(message.password))
          {return 'password: string expected';}}
          if (message.token != null && message.hasOwnProperty('token'))
          {if (!$util.isString(message.token))
          {return 'token: string expected';}}
          return null;
        };

        /**
                 * Creates a ResetPasswordByTokenRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.ResetPasswordByTokenRequest} ResetPasswordByTokenRequest
                 */
        ResetPasswordByTokenRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.ResetPasswordByTokenRequest)
          {return object;}
          var message = new $root.merico.vdev.user.ResetPasswordByTokenRequest();
          if (object.email != null)
          {message.email = String(object.email);}
          if (object.password != null)
          {message.password = String(object.password);}
          if (object.token != null)
          {message.token = String(object.token);}
          return message;
        };

        /**
                 * Creates a plain object from a ResetPasswordByTokenRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @static
                 * @param {merico.vdev.user.ResetPasswordByTokenRequest} message ResetPasswordByTokenRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ResetPasswordByTokenRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.email = '';
            object.password = '';
            object.token = '';
          }
          if (message.email != null && message.hasOwnProperty('email'))
          {object.email = message.email;}
          if (message.password != null && message.hasOwnProperty('password'))
          {object.password = message.password;}
          if (message.token != null && message.hasOwnProperty('token'))
          {object.token = message.token;}
          return object;
        };

        /**
                 * Converts this ResetPasswordByTokenRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.ResetPasswordByTokenRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ResetPasswordByTokenRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResetPasswordByTokenRequest;
      })();

      user.ResetPasswordByTokenResponse = (function() {

        /**
                 * Properties of a ResetPasswordByTokenResponse.
                 * @memberof merico.vdev.user
                 * @interface IResetPasswordByTokenResponse
                 * @property {boolean|null} [success] ResetPasswordByTokenResponse success
                 * @property {merico.vdev.ErrorMessage|null} [error] ResetPasswordByTokenResponse error
                 */

        /**
                 * Constructs a new ResetPasswordByTokenResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a ResetPasswordByTokenResponse.
                 * @implements IResetPasswordByTokenResponse
                 * @constructor
                 * @param {merico.vdev.user.IResetPasswordByTokenResponse=} [properties] Properties to set
                 */
        function ResetPasswordByTokenResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ResetPasswordByTokenResponse success.
                 * @member {boolean} success
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @instance
                 */
        ResetPasswordByTokenResponse.prototype.success = false;

        /**
                 * ResetPasswordByTokenResponse error.
                 * @member {merico.vdev.ErrorMessage} error
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @instance
                 */
        ResetPasswordByTokenResponse.prototype.error = 0;

        /**
                 * Creates a new ResetPasswordByTokenResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {merico.vdev.user.IResetPasswordByTokenResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.ResetPasswordByTokenResponse} ResetPasswordByTokenResponse instance
                 */
        ResetPasswordByTokenResponse.create = function create(properties) {
          return new ResetPasswordByTokenResponse(properties);
        };

        /**
                 * Encodes the specified ResetPasswordByTokenResponse message. Does not implicitly {@link merico.vdev.user.ResetPasswordByTokenResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {merico.vdev.user.IResetPasswordByTokenResponse} message ResetPasswordByTokenResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ResetPasswordByTokenResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.success != null && message.hasOwnProperty('success'))
          {writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);}
          if (message.error != null && message.hasOwnProperty('error'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int32(message.error);}
          return writer;
        };

        /**
                 * Encodes the specified ResetPasswordByTokenResponse message, length delimited. Does not implicitly {@link merico.vdev.user.ResetPasswordByTokenResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {merico.vdev.user.IResetPasswordByTokenResponse} message ResetPasswordByTokenResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ResetPasswordByTokenResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ResetPasswordByTokenResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.ResetPasswordByTokenResponse} ResetPasswordByTokenResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ResetPasswordByTokenResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.ResetPasswordByTokenResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.error = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ResetPasswordByTokenResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.ResetPasswordByTokenResponse} ResetPasswordByTokenResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ResetPasswordByTokenResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ResetPasswordByTokenResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ResetPasswordByTokenResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.success != null && message.hasOwnProperty('success'))
          {if (typeof message.success !== 'boolean')
          {return 'success: boolean expected';}}
          if (message.error != null && message.hasOwnProperty('error'))
          {switch (message.error) {
            default:
              return 'error: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          return null;
        };

        /**
                 * Creates a ResetPasswordByTokenResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.ResetPasswordByTokenResponse} ResetPasswordByTokenResponse
                 */
        ResetPasswordByTokenResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.ResetPasswordByTokenResponse)
          {return object;}
          var message = new $root.merico.vdev.user.ResetPasswordByTokenResponse();
          if (object.success != null)
          {message.success = Boolean(object.success);}
          switch (object.error) {
            case 'EMPTY':
            case 0:
              message.error = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.error = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.error = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.error = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.error = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.error = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.error = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.error = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.error = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.error = 9;
              break;
          }
          return message;
        };

        /**
                 * Creates a plain object from a ResetPasswordByTokenResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @static
                 * @param {merico.vdev.user.ResetPasswordByTokenResponse} message ResetPasswordByTokenResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ResetPasswordByTokenResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.error = options.enums === String ? 'EMPTY' : 0;
          }
          if (message.success != null && message.hasOwnProperty('success'))
          {object.success = message.success;}
          if (message.error != null && message.hasOwnProperty('error'))
          {object.error = options.enums === String ? $root.merico.vdev.ErrorMessage[message.error] : message.error;}
          return object;
        };

        /**
                 * Converts this ResetPasswordByTokenResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.ResetPasswordByTokenResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ResetPasswordByTokenResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResetPasswordByTokenResponse;
      })();

      user.ChangePasswordRequest = (function() {

        /**
                 * Properties of a ChangePasswordRequest.
                 * @memberof merico.vdev.user
                 * @interface IChangePasswordRequest
                 * @property {string|null} [userId] ChangePasswordRequest userId
                 * @property {string|null} [oldPassword] ChangePasswordRequest oldPassword
                 * @property {string|null} [newPassword] ChangePasswordRequest newPassword
                 */

        /**
                 * Constructs a new ChangePasswordRequest.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a ChangePasswordRequest.
                 * @implements IChangePasswordRequest
                 * @constructor
                 * @param {merico.vdev.user.IChangePasswordRequest=} [properties] Properties to set
                 */
        function ChangePasswordRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ChangePasswordRequest userId.
                 * @member {string} userId
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @instance
                 */
        ChangePasswordRequest.prototype.userId = '';

        /**
                 * ChangePasswordRequest oldPassword.
                 * @member {string} oldPassword
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @instance
                 */
        ChangePasswordRequest.prototype.oldPassword = '';

        /**
                 * ChangePasswordRequest newPassword.
                 * @member {string} newPassword
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @instance
                 */
        ChangePasswordRequest.prototype.newPassword = '';

        /**
                 * Creates a new ChangePasswordRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {merico.vdev.user.IChangePasswordRequest=} [properties] Properties to set
                 * @returns {merico.vdev.user.ChangePasswordRequest} ChangePasswordRequest instance
                 */
        ChangePasswordRequest.create = function create(properties) {
          return new ChangePasswordRequest(properties);
        };

        /**
                 * Encodes the specified ChangePasswordRequest message. Does not implicitly {@link merico.vdev.user.ChangePasswordRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {merico.vdev.user.IChangePasswordRequest} message ChangePasswordRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ChangePasswordRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);}
          if (message.oldPassword != null && message.hasOwnProperty('oldPassword'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.oldPassword);}
          if (message.newPassword != null && message.hasOwnProperty('newPassword'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.newPassword);}
          return writer;
        };

        /**
                 * Encodes the specified ChangePasswordRequest message, length delimited. Does not implicitly {@link merico.vdev.user.ChangePasswordRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {merico.vdev.user.IChangePasswordRequest} message ChangePasswordRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ChangePasswordRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ChangePasswordRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.ChangePasswordRequest} ChangePasswordRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ChangePasswordRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.ChangePasswordRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.userId = reader.string();
                break;
              case 2:
                message.oldPassword = reader.string();
                break;
              case 3:
                message.newPassword = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ChangePasswordRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.ChangePasswordRequest} ChangePasswordRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ChangePasswordRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ChangePasswordRequest message.
                 * @function verify
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ChangePasswordRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.userId != null && message.hasOwnProperty('userId'))
          {if (!$util.isString(message.userId))
          {return 'userId: string expected';}}
          if (message.oldPassword != null && message.hasOwnProperty('oldPassword'))
          {if (!$util.isString(message.oldPassword))
          {return 'oldPassword: string expected';}}
          if (message.newPassword != null && message.hasOwnProperty('newPassword'))
          {if (!$util.isString(message.newPassword))
          {return 'newPassword: string expected';}}
          return null;
        };

        /**
                 * Creates a ChangePasswordRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.ChangePasswordRequest} ChangePasswordRequest
                 */
        ChangePasswordRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.ChangePasswordRequest)
          {return object;}
          var message = new $root.merico.vdev.user.ChangePasswordRequest();
          if (object.userId != null)
          {message.userId = String(object.userId);}
          if (object.oldPassword != null)
          {message.oldPassword = String(object.oldPassword);}
          if (object.newPassword != null)
          {message.newPassword = String(object.newPassword);}
          return message;
        };

        /**
                 * Creates a plain object from a ChangePasswordRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @static
                 * @param {merico.vdev.user.ChangePasswordRequest} message ChangePasswordRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ChangePasswordRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.userId = '';
            object.oldPassword = '';
            object.newPassword = '';
          }
          if (message.userId != null && message.hasOwnProperty('userId'))
          {object.userId = message.userId;}
          if (message.oldPassword != null && message.hasOwnProperty('oldPassword'))
          {object.oldPassword = message.oldPassword;}
          if (message.newPassword != null && message.hasOwnProperty('newPassword'))
          {object.newPassword = message.newPassword;}
          return object;
        };

        /**
                 * Converts this ChangePasswordRequest to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.ChangePasswordRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ChangePasswordRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ChangePasswordRequest;
      })();

      user.ChangePasswordResponse = (function() {

        /**
                 * Properties of a ChangePasswordResponse.
                 * @memberof merico.vdev.user
                 * @interface IChangePasswordResponse
                 * @property {merico.vdev.IResponseStatus|null} [status] ChangePasswordResponse status
                 */

        /**
                 * Constructs a new ChangePasswordResponse.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a ChangePasswordResponse.
                 * @implements IChangePasswordResponse
                 * @constructor
                 * @param {merico.vdev.user.IChangePasswordResponse=} [properties] Properties to set
                 */
        function ChangePasswordResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ChangePasswordResponse status.
                 * @member {merico.vdev.IResponseStatus|null|undefined} status
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @instance
                 */
        ChangePasswordResponse.prototype.status = null;

        /**
                 * Creates a new ChangePasswordResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {merico.vdev.user.IChangePasswordResponse=} [properties] Properties to set
                 * @returns {merico.vdev.user.ChangePasswordResponse} ChangePasswordResponse instance
                 */
        ChangePasswordResponse.create = function create(properties) {
          return new ChangePasswordResponse(properties);
        };

        /**
                 * Encodes the specified ChangePasswordResponse message. Does not implicitly {@link merico.vdev.user.ChangePasswordResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {merico.vdev.user.IChangePasswordResponse} message ChangePasswordResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ChangePasswordResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.vdev.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified ChangePasswordResponse message, length delimited. Does not implicitly {@link merico.vdev.user.ChangePasswordResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {merico.vdev.user.IChangePasswordResponse} message ChangePasswordResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ChangePasswordResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ChangePasswordResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.user.ChangePasswordResponse} ChangePasswordResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ChangePasswordResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.user.ChangePasswordResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.vdev.ResponseStatus.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ChangePasswordResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.user.ChangePasswordResponse} ChangePasswordResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ChangePasswordResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ChangePasswordResponse message.
                 * @function verify
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ChangePasswordResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.vdev.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          return null;
        };

        /**
                 * Creates a ChangePasswordResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.user.ChangePasswordResponse} ChangePasswordResponse
                 */
        ChangePasswordResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.user.ChangePasswordResponse)
          {return object;}
          var message = new $root.merico.vdev.user.ChangePasswordResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.vdev.user.ChangePasswordResponse.status: object expected');}
            message.status = $root.merico.vdev.ResponseStatus.fromObject(object.status);
          }
          return message;
        };

        /**
                 * Creates a plain object from a ChangePasswordResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @static
                 * @param {merico.vdev.user.ChangePasswordResponse} message ChangePasswordResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ChangePasswordResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults)
          {object.status = null;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.vdev.ResponseStatus.toObject(message.status, options);}
          return object;
        };

        /**
                 * Converts this ChangePasswordResponse to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.user.ChangePasswordResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ChangePasswordResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ChangePasswordResponse;
      })();

      user.UserManagement = (function() {

        /**
                 * Constructs a new UserManagement service.
                 * @memberof merico.vdev.user
                 * @classdesc Represents a UserManagement
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
        function UserManagement(rpcImpl, requestDelimited, responseDelimited) {
          $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (UserManagement.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = UserManagement;

        /**
                 * Creates new UserManagement service using the specified rpc implementation.
                 * @function create
                 * @memberof merico.vdev.user.UserManagement
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {UserManagement} RPC service. Useful where requests and/or responses are streamed.
                 */
        UserManagement.create = function create(rpcImpl, requestDelimited, responseDelimited) {
          return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#sendToken}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef SendTokenCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.SendTokenResponse} [response] SendTokenResponse
                 */

        /**
                 * Calls SendToken.
                 * @function sendToken
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.ISendTokenRequest} request SendTokenRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.SendTokenCallback} callback Node-style callback called with the error, if any, and SendTokenResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.sendToken = function sendToken(request, callback) {
          return this.rpcCall(sendToken, $root.merico.vdev.user.SendTokenRequest, $root.merico.vdev.user.SendTokenResponse, request, callback);
        }, 'name', { value: 'SendToken' });

        /**
                 * Calls SendToken.
                 * @function sendToken
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.ISendTokenRequest} request SendTokenRequest message or plain object
                 * @returns {Promise<merico.vdev.user.SendTokenResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#resetPasswordByToken}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef ResetPasswordByTokenCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.ResetPasswordByTokenResponse} [response] ResetPasswordByTokenResponse
                 */

        /**
                 * Calls ResetPasswordByToken.
                 * @function resetPasswordByToken
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IResetPasswordByTokenRequest} request ResetPasswordByTokenRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.ResetPasswordByTokenCallback} callback Node-style callback called with the error, if any, and ResetPasswordByTokenResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.resetPasswordByToken = function resetPasswordByToken(request, callback) {
          return this.rpcCall(resetPasswordByToken, $root.merico.vdev.user.ResetPasswordByTokenRequest, $root.merico.vdev.user.ResetPasswordByTokenResponse, request, callback);
        }, 'name', { value: 'ResetPasswordByToken' });

        /**
                 * Calls ResetPasswordByToken.
                 * @function resetPasswordByToken
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IResetPasswordByTokenRequest} request ResetPasswordByTokenRequest message or plain object
                 * @returns {Promise<merico.vdev.user.ResetPasswordByTokenResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#changePassword}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef ChangePasswordCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.ChangePasswordResponse} [response] ChangePasswordResponse
                 */

        /**
                 * Calls ChangePassword.
                 * @function changePassword
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IChangePasswordRequest} request ChangePasswordRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.ChangePasswordCallback} callback Node-style callback called with the error, if any, and ChangePasswordResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.changePassword = function changePassword(request, callback) {
          return this.rpcCall(changePassword, $root.merico.vdev.user.ChangePasswordRequest, $root.merico.vdev.user.ChangePasswordResponse, request, callback);
        }, 'name', { value: 'ChangePassword' });

        /**
                 * Calls ChangePassword.
                 * @function changePassword
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IChangePasswordRequest} request ChangePasswordRequest message or plain object
                 * @returns {Promise<merico.vdev.user.ChangePasswordResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#checkUsername}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef CheckUsernameCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.CheckUsernameResponse} [response] CheckUsernameResponse
                 */

        /**
                 * Calls CheckUsername.
                 * @function checkUsername
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.ICheckUsernameRequest} request CheckUsernameRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.CheckUsernameCallback} callback Node-style callback called with the error, if any, and CheckUsernameResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.checkUsername = function checkUsername(request, callback) {
          return this.rpcCall(checkUsername, $root.merico.vdev.user.CheckUsernameRequest, $root.merico.vdev.user.CheckUsernameResponse, request, callback);
        }, 'name', { value: 'CheckUsername' });

        /**
                 * Calls CheckUsername.
                 * @function checkUsername
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.ICheckUsernameRequest} request CheckUsernameRequest message or plain object
                 * @returns {Promise<merico.vdev.user.CheckUsernameResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#verifyEmail}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef VerifyEmailCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.VerifyEmailResponse} [response] VerifyEmailResponse
                 */

        /**
                 * Calls VerifyEmail.
                 * @function verifyEmail
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IVerifyEmailRequest} request VerifyEmailRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.VerifyEmailCallback} callback Node-style callback called with the error, if any, and VerifyEmailResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.verifyEmail = function verifyEmail(request, callback) {
          return this.rpcCall(verifyEmail, $root.merico.vdev.user.VerifyEmailRequest, $root.merico.vdev.user.VerifyEmailResponse, request, callback);
        }, 'name', { value: 'VerifyEmail' });

        /**
                 * Calls VerifyEmail.
                 * @function verifyEmail
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IVerifyEmailRequest} request VerifyEmailRequest message or plain object
                 * @returns {Promise<merico.vdev.user.VerifyEmailResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#registerUser}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef RegisterUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.RegisterResponse} [response] RegisterResponse
                 */

        /**
                 * Calls RegisterUser.
                 * @function registerUser
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IRegistrant} request Registrant message or plain object
                 * @param {merico.vdev.user.UserManagement.RegisterUserCallback} callback Node-style callback called with the error, if any, and RegisterResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.registerUser = function registerUser(request, callback) {
          return this.rpcCall(registerUser, $root.merico.vdev.user.Registrant, $root.merico.vdev.user.RegisterResponse, request, callback);
        }, 'name', { value: 'RegisterUser' });

        /**
                 * Calls RegisterUser.
                 * @function registerUser
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IRegistrant} request Registrant message or plain object
                 * @returns {Promise<merico.vdev.user.RegisterResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#login}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef LoginCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.LoginResponse} [response] LoginResponse
                 */

        /**
                 * Calls Login.
                 * @function login
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.ILoginRequest} request LoginRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.LoginCallback} callback Node-style callback called with the error, if any, and LoginResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.login = function login(request, callback) {
          return this.rpcCall(login, $root.merico.vdev.user.LoginRequest, $root.merico.vdev.user.LoginResponse, request, callback);
        }, 'name', { value: 'Login' });

        /**
                 * Calls Login.
                 * @function login
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.ILoginRequest} request LoginRequest message or plain object
                 * @returns {Promise<merico.vdev.user.LoginResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.vdev.user.UserManagement#oAuthLogin}.
                 * @memberof merico.vdev.user.UserManagement
                 * @typedef OAuthLoginCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.vdev.user.OAuthLoginResponse} [response] OAuthLoginResponse
                 */

        /**
                 * Calls OAuthLogin.
                 * @function oAuthLogin
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IOAuthLoginRequest} request OAuthLoginRequest message or plain object
                 * @param {merico.vdev.user.UserManagement.OAuthLoginCallback} callback Node-style callback called with the error, if any, and OAuthLoginResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(UserManagement.prototype.oAuthLogin = function oAuthLogin(request, callback) {
          return this.rpcCall(oAuthLogin, $root.merico.vdev.user.OAuthLoginRequest, $root.merico.vdev.user.OAuthLoginResponse, request, callback);
        }, 'name', { value: 'OAuthLogin' });

        /**
                 * Calls OAuthLogin.
                 * @function oAuthLogin
                 * @memberof merico.vdev.user.UserManagement
                 * @instance
                 * @param {merico.vdev.user.IOAuthLoginRequest} request OAuthLoginRequest message or plain object
                 * @returns {Promise<merico.vdev.user.OAuthLoginResponse>} Promise
                 * @variation 2
                 */

        return UserManagement;
      })();

      return user;
    })();

    /**
         * ErrorMessage enum.
         * @name merico.vdev.ErrorMessage
         * @enum {string}
         * @property {number} EMPTY=0 EMPTY value
         * @property {number} OBJECT_NOT_FOUND=1 OBJECT_NOT_FOUND value
         * @property {number} VALUE_NOT_FOUND=2 VALUE_NOT_FOUND value
         * @property {number} VALUE_ALREADY_EXISTS=3 VALUE_ALREADY_EXISTS value
         * @property {number} VALUE_OUT_OF_RANGE=4 VALUE_OUT_OF_RANGE value
         * @property {number} INVALID_VALUE=5 INVALID_VALUE value
         * @property {number} FAILED_DEPENDENCY=6 FAILED_DEPENDENCY value
         * @property {number} FORBIDDEN=7 FORBIDDEN value
         * @property {number} USERNAME_TAKEN=8 USERNAME_TAKEN value
         * @property {number} EMAIL_TAKEN=9 EMAIL_TAKEN value
         */
    vdev.ErrorMessage = (function() {
      var valuesById = {}; var values = Object.create(valuesById);
      values[valuesById[0] = 'EMPTY'] = 0;
      values[valuesById[1] = 'OBJECT_NOT_FOUND'] = 1;
      values[valuesById[2] = 'VALUE_NOT_FOUND'] = 2;
      values[valuesById[3] = 'VALUE_ALREADY_EXISTS'] = 3;
      values[valuesById[4] = 'VALUE_OUT_OF_RANGE'] = 4;
      values[valuesById[5] = 'INVALID_VALUE'] = 5;
      values[valuesById[6] = 'FAILED_DEPENDENCY'] = 6;
      values[valuesById[7] = 'FORBIDDEN'] = 7;
      values[valuesById[8] = 'USERNAME_TAKEN'] = 8;
      values[valuesById[9] = 'EMAIL_TAKEN'] = 9;
      return values;
    })();

    vdev.project = (function() {

      /**
             * Namespace project.
             * @memberof merico.vdev
             * @namespace
             */
      var project = {};

      project.ProjectReadinessChangeMessage = (function() {

        /**
                 * Properties of a ProjectReadinessChangeMessage.
                 * @memberof merico.vdev.project
                 * @interface IProjectReadinessChangeMessage
                 * @property {number|Long|null} [serverTimestamp] ProjectReadinessChangeMessage serverTimestamp
                 * @property {string|null} [projectId] ProjectReadinessChangeMessage projectId
                 */

        /**
                 * Constructs a new ProjectReadinessChangeMessage.
                 * @memberof merico.vdev.project
                 * @classdesc Represents a ProjectReadinessChangeMessage.
                 * @implements IProjectReadinessChangeMessage
                 * @constructor
                 * @param {merico.vdev.project.IProjectReadinessChangeMessage=} [properties] Properties to set
                 */
        function ProjectReadinessChangeMessage(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ProjectReadinessChangeMessage serverTimestamp.
                 * @member {number|Long} serverTimestamp
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @instance
                 */
        ProjectReadinessChangeMessage.prototype.serverTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * ProjectReadinessChangeMessage projectId.
                 * @member {string} projectId
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @instance
                 */
        ProjectReadinessChangeMessage.prototype.projectId = '';

        /**
                 * Creates a new ProjectReadinessChangeMessage instance using the specified properties.
                 * @function create
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {merico.vdev.project.IProjectReadinessChangeMessage=} [properties] Properties to set
                 * @returns {merico.vdev.project.ProjectReadinessChangeMessage} ProjectReadinessChangeMessage instance
                 */
        ProjectReadinessChangeMessage.create = function create(properties) {
          return new ProjectReadinessChangeMessage(properties);
        };

        /**
                 * Encodes the specified ProjectReadinessChangeMessage message. Does not implicitly {@link merico.vdev.project.ProjectReadinessChangeMessage.verify|verify} messages.
                 * @function encode
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {merico.vdev.project.IProjectReadinessChangeMessage} message ProjectReadinessChangeMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ProjectReadinessChangeMessage.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.serverTimestamp != null && message.hasOwnProperty('serverTimestamp'))
          {writer.uint32(/* id 2, wireType 0 =*/16).int64(message.serverTimestamp);}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.projectId);}
          return writer;
        };

        /**
                 * Encodes the specified ProjectReadinessChangeMessage message, length delimited. Does not implicitly {@link merico.vdev.project.ProjectReadinessChangeMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {merico.vdev.project.IProjectReadinessChangeMessage} message ProjectReadinessChangeMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ProjectReadinessChangeMessage.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ProjectReadinessChangeMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.vdev.project.ProjectReadinessChangeMessage} ProjectReadinessChangeMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ProjectReadinessChangeMessage.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.vdev.project.ProjectReadinessChangeMessage();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 2:
                message.serverTimestamp = reader.int64();
                break;
              case 3:
                message.projectId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ProjectReadinessChangeMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.vdev.project.ProjectReadinessChangeMessage} ProjectReadinessChangeMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ProjectReadinessChangeMessage.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ProjectReadinessChangeMessage message.
                 * @function verify
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ProjectReadinessChangeMessage.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.serverTimestamp != null && message.hasOwnProperty('serverTimestamp'))
          {if (!$util.isInteger(message.serverTimestamp) && !(message.serverTimestamp && $util.isInteger(message.serverTimestamp.low) && $util.isInteger(message.serverTimestamp.high)))
          {return 'serverTimestamp: integer|Long expected';}}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {if (!$util.isString(message.projectId))
          {return 'projectId: string expected';}}
          return null;
        };

        /**
                 * Creates a ProjectReadinessChangeMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.vdev.project.ProjectReadinessChangeMessage} ProjectReadinessChangeMessage
                 */
        ProjectReadinessChangeMessage.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.vdev.project.ProjectReadinessChangeMessage)
          {return object;}
          var message = new $root.merico.vdev.project.ProjectReadinessChangeMessage();
          if (object.serverTimestamp != null)
          {if ($util.Long)
          {(message.serverTimestamp = $util.Long.fromValue(object.serverTimestamp)).unsigned = false;}
          else if (typeof object.serverTimestamp === 'string')
          {message.serverTimestamp = parseInt(object.serverTimestamp, 10);}
          else if (typeof object.serverTimestamp === 'number')
          {message.serverTimestamp = object.serverTimestamp;}
          else if (typeof object.serverTimestamp === 'object')
          {message.serverTimestamp = new $util.LongBits(object.serverTimestamp.low >>> 0, object.serverTimestamp.high >>> 0).toNumber();}}
          if (object.projectId != null)
          {message.projectId = String(object.projectId);}
          return message;
        };

        /**
                 * Creates a plain object from a ProjectReadinessChangeMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @static
                 * @param {merico.vdev.project.ProjectReadinessChangeMessage} message ProjectReadinessChangeMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ProjectReadinessChangeMessage.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.serverTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.serverTimestamp = options.longs === String ? '0' : 0;}
            object.projectId = '';
          }
          if (message.serverTimestamp != null && message.hasOwnProperty('serverTimestamp'))
          {if (typeof message.serverTimestamp === 'number')
          {object.serverTimestamp = options.longs === String ? String(message.serverTimestamp) : message.serverTimestamp;}
          else
          {object.serverTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.serverTimestamp) : options.longs === Number ? new $util.LongBits(message.serverTimestamp.low >>> 0, message.serverTimestamp.high >>> 0).toNumber() : message.serverTimestamp;}}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {object.projectId = message.projectId;}
          return object;
        };

        /**
                 * Converts this ProjectReadinessChangeMessage to JSON.
                 * @function toJSON
                 * @memberof merico.vdev.project.ProjectReadinessChangeMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ProjectReadinessChangeMessage.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProjectReadinessChangeMessage;
      })();

      return project;
    })();

    return vdev;
  })();

  merico.analysis = (function() {

    /**
         * Namespace analysis.
         * @memberof merico
         * @namespace
         */
    var analysis = {};

    analysis.gateway = (function() {

      /**
             * Namespace gateway.
             * @memberof merico.analysis
             * @namespace
             */
      var gateway = {};

      gateway.ResponseStatus = (function() {

        /**
                 * Properties of a ResponseStatus.
                 * @memberof merico.analysis.gateway
                 * @interface IResponseStatus
                 * @property {merico.analysis.gateway.ResponseStatus.StatusCode|null} [code] ResponseStatus code
                 * @property {string|null} [message] ResponseStatus message
                 */

        /**
                 * Constructs a new ResponseStatus.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a ResponseStatus.
                 * @implements IResponseStatus
                 * @constructor
                 * @param {merico.analysis.gateway.IResponseStatus=} [properties] Properties to set
                 */
        function ResponseStatus(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ResponseStatus code.
                 * @member {merico.analysis.gateway.ResponseStatus.StatusCode} code
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @instance
                 */
        ResponseStatus.prototype.code = 0;

        /**
                 * ResponseStatus message.
                 * @member {string} message
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @instance
                 */
        ResponseStatus.prototype.message = '';

        /**
                 * Creates a new ResponseStatus instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {merico.analysis.gateway.IResponseStatus=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.ResponseStatus} ResponseStatus instance
                 */
        ResponseStatus.create = function create(properties) {
          return new ResponseStatus(properties);
        };

        /**
                 * Encodes the specified ResponseStatus message. Does not implicitly {@link merico.analysis.gateway.ResponseStatus.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {merico.analysis.gateway.IResponseStatus} message ResponseStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ResponseStatus.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.code != null && message.hasOwnProperty('code'))
          {writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);}
          if (message.message != null && message.hasOwnProperty('message'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);}
          return writer;
        };

        /**
                 * Encodes the specified ResponseStatus message, length delimited. Does not implicitly {@link merico.analysis.gateway.ResponseStatus.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {merico.analysis.gateway.IResponseStatus} message ResponseStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ResponseStatus.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ResponseStatus message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.ResponseStatus} ResponseStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ResponseStatus.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.ResponseStatus();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.code = reader.int32();
                break;
              case 2:
                message.message = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ResponseStatus message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.ResponseStatus} ResponseStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ResponseStatus.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ResponseStatus message.
                 * @function verify
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ResponseStatus.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.code != null && message.hasOwnProperty('code'))
          {switch (message.code) {
            default:
              return 'code: enum value expected';
            case 0:
            case 401:
            case 500:
            case 1400:
            case 1401:
            case 1402:
            case 1403:
            case 1404:
            case 1405:
            case 1406:
            case 1407:
            case 1408:
            case 1409:
              break;
          }}
          if (message.message != null && message.hasOwnProperty('message'))
          {if (!$util.isString(message.message))
          {return 'message: string expected';}}
          return null;
        };

        /**
                 * Creates a ResponseStatus message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.ResponseStatus} ResponseStatus
                 */
        ResponseStatus.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.ResponseStatus)
          {return object;}
          var message = new $root.merico.analysis.gateway.ResponseStatus();
          switch (object.code) {
            case 'SUCCESS':
            case 0:
              message.code = 0;
              break;
            case 'UNAUTHORIZED':
            case 401:
              message.code = 401;
              break;
            case 'INTERNAL_SERVER_ERROR':
            case 500:
              message.code = 500;
              break;
            case 'UNKNOWN':
            case 1400:
              message.code = 1400;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1401:
              message.code = 1401;
              break;
            case 'VALUE_NOT_FOUND':
            case 1402:
              message.code = 1402;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 1403:
              message.code = 1403;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 1404:
              message.code = 1404;
              break;
            case 'INVALID_VALUE':
            case 1405:
              message.code = 1405;
              break;
            case 'FAILED_DEPENDENCY':
            case 1406:
              message.code = 1406;
              break;
            case 'FORBIDDEN':
            case 1407:
              message.code = 1407;
              break;
            case 'USERNAME_TAKEN':
            case 1408:
              message.code = 1408;
              break;
            case 'EMAIL_TAKEN':
            case 1409:
              message.code = 1409;
              break;
          }
          if (object.message != null)
          {message.message = String(object.message);}
          return message;
        };

        /**
                 * Creates a plain object from a ResponseStatus message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @static
                 * @param {merico.analysis.gateway.ResponseStatus} message ResponseStatus
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ResponseStatus.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.code = options.enums === String ? 'SUCCESS' : 0;
            object.message = '';
          }
          if (message.code != null && message.hasOwnProperty('code'))
          {object.code = options.enums === String ? $root.merico.analysis.gateway.ResponseStatus.StatusCode[message.code] : message.code;}
          if (message.message != null && message.hasOwnProperty('message'))
          {object.message = message.message;}
          return object;
        };

        /**
                 * Converts this ResponseStatus to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.ResponseStatus
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ResponseStatus.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
                 * StatusCode enum.
                 * @name merico.analysis.gateway.ResponseStatus.StatusCode
                 * @enum {string}
                 * @property {number} SUCCESS=0 SUCCESS value
                 * @property {number} UNAUTHORIZED=401 UNAUTHORIZED value
                 * @property {number} INTERNAL_SERVER_ERROR=500 INTERNAL_SERVER_ERROR value
                 * @property {number} UNKNOWN=1400 UNKNOWN value
                 * @property {number} OBJECT_NOT_FOUND=1401 OBJECT_NOT_FOUND value
                 * @property {number} VALUE_NOT_FOUND=1402 VALUE_NOT_FOUND value
                 * @property {number} VALUE_ALREADY_EXISTS=1403 VALUE_ALREADY_EXISTS value
                 * @property {number} VALUE_OUT_OF_RANGE=1404 VALUE_OUT_OF_RANGE value
                 * @property {number} INVALID_VALUE=1405 INVALID_VALUE value
                 * @property {number} FAILED_DEPENDENCY=1406 FAILED_DEPENDENCY value
                 * @property {number} FORBIDDEN=1407 FORBIDDEN value
                 * @property {number} USERNAME_TAKEN=1408 USERNAME_TAKEN value
                 * @property {number} EMAIL_TAKEN=1409 EMAIL_TAKEN value
                 */
        ResponseStatus.StatusCode = (function() {
          var valuesById = {}; var values = Object.create(valuesById);
          values[valuesById[0] = 'SUCCESS'] = 0;
          values[valuesById[401] = 'UNAUTHORIZED'] = 401;
          values[valuesById[500] = 'INTERNAL_SERVER_ERROR'] = 500;
          values[valuesById[1400] = 'UNKNOWN'] = 1400;
          values[valuesById[1401] = 'OBJECT_NOT_FOUND'] = 1401;
          values[valuesById[1402] = 'VALUE_NOT_FOUND'] = 1402;
          values[valuesById[1403] = 'VALUE_ALREADY_EXISTS'] = 1403;
          values[valuesById[1404] = 'VALUE_OUT_OF_RANGE'] = 1404;
          values[valuesById[1405] = 'INVALID_VALUE'] = 1405;
          values[valuesById[1406] = 'FAILED_DEPENDENCY'] = 1406;
          values[valuesById[1407] = 'FORBIDDEN'] = 1407;
          values[valuesById[1408] = 'USERNAME_TAKEN'] = 1408;
          values[valuesById[1409] = 'EMAIL_TAKEN'] = 1409;
          return values;
        })();

        return ResponseStatus;
      })();

      gateway.SubmitRepoRequest = (function() {

        /**
                 * Properties of a SubmitRepoRequest.
                 * @memberof merico.analysis.gateway
                 * @interface ISubmitRepoRequest
                 * @property {string|null} [projectId] SubmitRepoRequest projectId
                 * @property {string|null} [gitUrl] SubmitRepoRequest gitUrl
                 * @property {number|Long|null} [batchTime] SubmitRepoRequest batchTime
                 * @property {merico.analysis.gateway.SubmitRepoRequest.AuthType|null} [authType] SubmitRepoRequest authType
                 * @property {string|null} [username] SubmitRepoRequest username
                 * @property {string|null} [password] SubmitRepoRequest password
                 * @property {string|null} [privateKey] SubmitRepoRequest privateKey
                 * @property {string|null} [callbackAddress] SubmitRepoRequest callbackAddress
                 * @property {Array.<string>|null} [pathBlacklist] SubmitRepoRequest pathBlacklist
                 * @property {Array.<string>|null} [commitBlacklist] SubmitRepoRequest commitBlacklist
                 * @property {string|null} [defaultRef] SubmitRepoRequest defaultRef
                 * @property {number|Long|null} [commitBefore] SubmitRepoRequest commitBefore
                 * @property {string|null} [reportId] SubmitRepoRequest reportId
                 * @property {string|null} [analysisConf] SubmitRepoRequest analysisConf
                 * @property {string|null} [publicKey] SubmitRepoRequest publicKey
                 * @property {number|Long|null} [commitAfter] SubmitRepoRequest commitAfter
                 * @property {boolean|null} [singleBranch] SubmitRepoRequest singleBranch
                 */

        /**
                 * Constructs a new SubmitRepoRequest.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a SubmitRepoRequest.
                 * @implements ISubmitRepoRequest
                 * @constructor
                 * @param {merico.analysis.gateway.ISubmitRepoRequest=} [properties] Properties to set
                 */
        function SubmitRepoRequest(properties) {
          this.pathBlacklist = [];
          this.commitBlacklist = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * SubmitRepoRequest projectId.
                 * @member {string} projectId
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.projectId = '';

        /**
                 * SubmitRepoRequest gitUrl.
                 * @member {string} gitUrl
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.gitUrl = '';

        /**
                 * SubmitRepoRequest batchTime.
                 * @member {number|Long} batchTime
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.batchTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * SubmitRepoRequest authType.
                 * @member {merico.analysis.gateway.SubmitRepoRequest.AuthType} authType
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.authType = 0;

        /**
                 * SubmitRepoRequest username.
                 * @member {string} username
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.username = '';

        /**
                 * SubmitRepoRequest password.
                 * @member {string} password
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.password = '';

        /**
                 * SubmitRepoRequest privateKey.
                 * @member {string} privateKey
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.privateKey = '';

        /**
                 * SubmitRepoRequest callbackAddress.
                 * @member {string} callbackAddress
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.callbackAddress = '';

        /**
                 * SubmitRepoRequest pathBlacklist.
                 * @member {Array.<string>} pathBlacklist
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.pathBlacklist = $util.emptyArray;

        /**
                 * SubmitRepoRequest commitBlacklist.
                 * @member {Array.<string>} commitBlacklist
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.commitBlacklist = $util.emptyArray;

        /**
                 * SubmitRepoRequest defaultRef.
                 * @member {string} defaultRef
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.defaultRef = '';

        /**
                 * SubmitRepoRequest commitBefore.
                 * @member {number|Long} commitBefore
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.commitBefore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * SubmitRepoRequest reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.reportId = '';

        /**
                 * SubmitRepoRequest analysisConf.
                 * @member {string} analysisConf
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.analysisConf = '';

        /**
                 * SubmitRepoRequest publicKey.
                 * @member {string} publicKey
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.publicKey = '';

        /**
                 * SubmitRepoRequest commitAfter.
                 * @member {number|Long} commitAfter
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.commitAfter = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
                 * SubmitRepoRequest singleBranch.
                 * @member {boolean} singleBranch
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 */
        SubmitRepoRequest.prototype.singleBranch = false;

        /**
                 * Creates a new SubmitRepoRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {merico.analysis.gateway.ISubmitRepoRequest=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.SubmitRepoRequest} SubmitRepoRequest instance
                 */
        SubmitRepoRequest.create = function create(properties) {
          return new SubmitRepoRequest(properties);
        };

        /**
                 * Encodes the specified SubmitRepoRequest message. Does not implicitly {@link merico.analysis.gateway.SubmitRepoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} message SubmitRepoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SubmitRepoRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.gitUrl);}
          if (message.batchTime != null && message.hasOwnProperty('batchTime'))
          {writer.uint32(/* id 3, wireType 0 =*/24).int64(message.batchTime);}
          if (message.authType != null && message.hasOwnProperty('authType'))
          {writer.uint32(/* id 4, wireType 0 =*/32).int32(message.authType);}
          if (message.username != null && message.hasOwnProperty('username'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.username);}
          if (message.password != null && message.hasOwnProperty('password'))
          {writer.uint32(/* id 6, wireType 2 =*/50).string(message.password);}
          if (message.privateKey != null && message.hasOwnProperty('privateKey'))
          {writer.uint32(/* id 7, wireType 2 =*/58).string(message.privateKey);}
          if (message.callbackAddress != null && message.hasOwnProperty('callbackAddress'))
          {writer.uint32(/* id 8, wireType 2 =*/66).string(message.callbackAddress);}
          if (message.pathBlacklist != null && message.pathBlacklist.length)
          {for (var i = 0; i < message.pathBlacklist.length; ++i)
          {writer.uint32(/* id 9, wireType 2 =*/74).string(message.pathBlacklist[i]);}}
          if (message.commitBlacklist != null && message.commitBlacklist.length)
          {for (var i = 0; i < message.commitBlacklist.length; ++i)
          {writer.uint32(/* id 10, wireType 2 =*/82).string(message.commitBlacklist[i]);}}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {writer.uint32(/* id 11, wireType 2 =*/90).string(message.projectId);}
          if (message.defaultRef != null && message.hasOwnProperty('defaultRef'))
          {writer.uint32(/* id 13, wireType 2 =*/106).string(message.defaultRef);}
          if (message.commitBefore != null && message.hasOwnProperty('commitBefore'))
          {writer.uint32(/* id 14, wireType 0 =*/112).int64(message.commitBefore);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 15, wireType 2 =*/122).string(message.reportId);}
          if (message.analysisConf != null && message.hasOwnProperty('analysisConf'))
          {writer.uint32(/* id 16, wireType 2 =*/130).string(message.analysisConf);}
          if (message.publicKey != null && message.hasOwnProperty('publicKey'))
          {writer.uint32(/* id 17, wireType 2 =*/138).string(message.publicKey);}
          if (message.commitAfter != null && message.hasOwnProperty('commitAfter'))
          {writer.uint32(/* id 18, wireType 0 =*/144).int64(message.commitAfter);}
          if (message.singleBranch != null && message.hasOwnProperty('singleBranch'))
          {writer.uint32(/* id 19, wireType 0 =*/152).bool(message.singleBranch);}
          return writer;
        };

        /**
                 * Encodes the specified SubmitRepoRequest message, length delimited. Does not implicitly {@link merico.analysis.gateway.SubmitRepoRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} message SubmitRepoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SubmitRepoRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a SubmitRepoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.SubmitRepoRequest} SubmitRepoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SubmitRepoRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.SubmitRepoRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 11:
                message.projectId = reader.string();
                break;
              case 1:
                message.gitUrl = reader.string();
                break;
              case 3:
                message.batchTime = reader.int64();
                break;
              case 4:
                message.authType = reader.int32();
                break;
              case 5:
                message.username = reader.string();
                break;
              case 6:
                message.password = reader.string();
                break;
              case 7:
                message.privateKey = reader.string();
                break;
              case 8:
                message.callbackAddress = reader.string();
                break;
              case 9:
                if (!(message.pathBlacklist && message.pathBlacklist.length))
                {message.pathBlacklist = [];}
                message.pathBlacklist.push(reader.string());
                break;
              case 10:
                if (!(message.commitBlacklist && message.commitBlacklist.length))
                {message.commitBlacklist = [];}
                message.commitBlacklist.push(reader.string());
                break;
              case 13:
                message.defaultRef = reader.string();
                break;
              case 14:
                message.commitBefore = reader.int64();
                break;
              case 15:
                message.reportId = reader.string();
                break;
              case 16:
                message.analysisConf = reader.string();
                break;
              case 17:
                message.publicKey = reader.string();
                break;
              case 18:
                message.commitAfter = reader.int64();
                break;
              case 19:
                message.singleBranch = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a SubmitRepoRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.SubmitRepoRequest} SubmitRepoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SubmitRepoRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a SubmitRepoRequest message.
                 * @function verify
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        SubmitRepoRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {if (!$util.isString(message.projectId))
          {return 'projectId: string expected';}}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {if (!$util.isString(message.gitUrl))
          {return 'gitUrl: string expected';}}
          if (message.batchTime != null && message.hasOwnProperty('batchTime'))
          {if (!$util.isInteger(message.batchTime) && !(message.batchTime && $util.isInteger(message.batchTime.low) && $util.isInteger(message.batchTime.high)))
          {return 'batchTime: integer|Long expected';}}
          if (message.authType != null && message.hasOwnProperty('authType'))
          {switch (message.authType) {
            default:
              return 'authType: enum value expected';
            case 0:
            case 1:
            case 2:
              break;
          }}
          if (message.username != null && message.hasOwnProperty('username'))
          {if (!$util.isString(message.username))
          {return 'username: string expected';}}
          if (message.password != null && message.hasOwnProperty('password'))
          {if (!$util.isString(message.password))
          {return 'password: string expected';}}
          if (message.privateKey != null && message.hasOwnProperty('privateKey'))
          {if (!$util.isString(message.privateKey))
          {return 'privateKey: string expected';}}
          if (message.callbackAddress != null && message.hasOwnProperty('callbackAddress'))
          {if (!$util.isString(message.callbackAddress))
          {return 'callbackAddress: string expected';}}
          if (message.pathBlacklist != null && message.hasOwnProperty('pathBlacklist')) {
            if (!Array.isArray(message.pathBlacklist))
            {return 'pathBlacklist: array expected';}
            for (var i = 0; i < message.pathBlacklist.length; ++i)
            {if (!$util.isString(message.pathBlacklist[i]))
            {return 'pathBlacklist: string[] expected';}}
          }
          if (message.commitBlacklist != null && message.hasOwnProperty('commitBlacklist')) {
            if (!Array.isArray(message.commitBlacklist))
            {return 'commitBlacklist: array expected';}
            for (var i = 0; i < message.commitBlacklist.length; ++i)
            {if (!$util.isString(message.commitBlacklist[i]))
            {return 'commitBlacklist: string[] expected';}}
          }
          if (message.defaultRef != null && message.hasOwnProperty('defaultRef'))
          {if (!$util.isString(message.defaultRef))
          {return 'defaultRef: string expected';}}
          if (message.commitBefore != null && message.hasOwnProperty('commitBefore'))
          {if (!$util.isInteger(message.commitBefore) && !(message.commitBefore && $util.isInteger(message.commitBefore.low) && $util.isInteger(message.commitBefore.high)))
          {return 'commitBefore: integer|Long expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          if (message.analysisConf != null && message.hasOwnProperty('analysisConf'))
          {if (!$util.isString(message.analysisConf))
          {return 'analysisConf: string expected';}}
          if (message.publicKey != null && message.hasOwnProperty('publicKey'))
          {if (!$util.isString(message.publicKey))
          {return 'publicKey: string expected';}}
          if (message.commitAfter != null && message.hasOwnProperty('commitAfter'))
          {if (!$util.isInteger(message.commitAfter) && !(message.commitAfter && $util.isInteger(message.commitAfter.low) && $util.isInteger(message.commitAfter.high)))
          {return 'commitAfter: integer|Long expected';}}
          if (message.singleBranch != null && message.hasOwnProperty('singleBranch'))
          {if (typeof message.singleBranch !== 'boolean')
          {return 'singleBranch: boolean expected';}}
          return null;
        };

        /**
                 * Creates a SubmitRepoRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.SubmitRepoRequest} SubmitRepoRequest
                 */
        SubmitRepoRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.SubmitRepoRequest)
          {return object;}
          var message = new $root.merico.analysis.gateway.SubmitRepoRequest();
          if (object.projectId != null)
          {message.projectId = String(object.projectId);}
          if (object.gitUrl != null)
          {message.gitUrl = String(object.gitUrl);}
          if (object.batchTime != null)
          {if ($util.Long)
          {(message.batchTime = $util.Long.fromValue(object.batchTime)).unsigned = false;}
          else if (typeof object.batchTime === 'string')
          {message.batchTime = parseInt(object.batchTime, 10);}
          else if (typeof object.batchTime === 'number')
          {message.batchTime = object.batchTime;}
          else if (typeof object.batchTime === 'object')
          {message.batchTime = new $util.LongBits(object.batchTime.low >>> 0, object.batchTime.high >>> 0).toNumber();}}
          switch (object.authType) {
            case 'UNKNOWN':
            case 0:
              message.authType = 0;
              break;
            case 'SSH_KEY':
            case 1:
              message.authType = 1;
              break;
            case 'HTTP_BASE':
            case 2:
              message.authType = 2;
              break;
          }
          if (object.username != null)
          {message.username = String(object.username);}
          if (object.password != null)
          {message.password = String(object.password);}
          if (object.privateKey != null)
          {message.privateKey = String(object.privateKey);}
          if (object.callbackAddress != null)
          {message.callbackAddress = String(object.callbackAddress);}
          if (object.pathBlacklist) {
            if (!Array.isArray(object.pathBlacklist))
            {throw TypeError('.merico.analysis.gateway.SubmitRepoRequest.pathBlacklist: array expected');}
            message.pathBlacklist = [];
            for (var i = 0; i < object.pathBlacklist.length; ++i)
            {message.pathBlacklist[i] = String(object.pathBlacklist[i]);}
          }
          if (object.commitBlacklist) {
            if (!Array.isArray(object.commitBlacklist))
            {throw TypeError('.merico.analysis.gateway.SubmitRepoRequest.commitBlacklist: array expected');}
            message.commitBlacklist = [];
            for (var i = 0; i < object.commitBlacklist.length; ++i)
            {message.commitBlacklist[i] = String(object.commitBlacklist[i]);}
          }
          if (object.defaultRef != null)
          {message.defaultRef = String(object.defaultRef);}
          if (object.commitBefore != null)
          {if ($util.Long)
          {(message.commitBefore = $util.Long.fromValue(object.commitBefore)).unsigned = false;}
          else if (typeof object.commitBefore === 'string')
          {message.commitBefore = parseInt(object.commitBefore, 10);}
          else if (typeof object.commitBefore === 'number')
          {message.commitBefore = object.commitBefore;}
          else if (typeof object.commitBefore === 'object')
          {message.commitBefore = new $util.LongBits(object.commitBefore.low >>> 0, object.commitBefore.high >>> 0).toNumber();}}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          if (object.analysisConf != null)
          {message.analysisConf = String(object.analysisConf);}
          if (object.publicKey != null)
          {message.publicKey = String(object.publicKey);}
          if (object.commitAfter != null)
          {if ($util.Long)
          {(message.commitAfter = $util.Long.fromValue(object.commitAfter)).unsigned = false;}
          else if (typeof object.commitAfter === 'string')
          {message.commitAfter = parseInt(object.commitAfter, 10);}
          else if (typeof object.commitAfter === 'number')
          {message.commitAfter = object.commitAfter;}
          else if (typeof object.commitAfter === 'object')
          {message.commitAfter = new $util.LongBits(object.commitAfter.low >>> 0, object.commitAfter.high >>> 0).toNumber();}}
          if (object.singleBranch != null)
          {message.singleBranch = Boolean(object.singleBranch);}
          return message;
        };

        /**
                 * Creates a plain object from a SubmitRepoRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @static
                 * @param {merico.analysis.gateway.SubmitRepoRequest} message SubmitRepoRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        SubmitRepoRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults) {
            object.pathBlacklist = [];
            object.commitBlacklist = [];
          }
          if (options.defaults) {
            object.gitUrl = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.batchTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.batchTime = options.longs === String ? '0' : 0;}
            object.authType = options.enums === String ? 'UNKNOWN' : 0;
            object.username = '';
            object.password = '';
            object.privateKey = '';
            object.callbackAddress = '';
            object.projectId = '';
            object.defaultRef = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.commitBefore = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.commitBefore = options.longs === String ? '0' : 0;}
            object.reportId = '';
            object.analysisConf = '';
            object.publicKey = '';
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.commitAfter = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
            {object.commitAfter = options.longs === String ? '0' : 0;}
            object.singleBranch = false;
          }
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {object.gitUrl = message.gitUrl;}
          if (message.batchTime != null && message.hasOwnProperty('batchTime'))
          {if (typeof message.batchTime === 'number')
          {object.batchTime = options.longs === String ? String(message.batchTime) : message.batchTime;}
          else
          {object.batchTime = options.longs === String ? $util.Long.prototype.toString.call(message.batchTime) : options.longs === Number ? new $util.LongBits(message.batchTime.low >>> 0, message.batchTime.high >>> 0).toNumber() : message.batchTime;}}
          if (message.authType != null && message.hasOwnProperty('authType'))
          {object.authType = options.enums === String ? $root.merico.analysis.gateway.SubmitRepoRequest.AuthType[message.authType] : message.authType;}
          if (message.username != null && message.hasOwnProperty('username'))
          {object.username = message.username;}
          if (message.password != null && message.hasOwnProperty('password'))
          {object.password = message.password;}
          if (message.privateKey != null && message.hasOwnProperty('privateKey'))
          {object.privateKey = message.privateKey;}
          if (message.callbackAddress != null && message.hasOwnProperty('callbackAddress'))
          {object.callbackAddress = message.callbackAddress;}
          if (message.pathBlacklist && message.pathBlacklist.length) {
            object.pathBlacklist = [];
            for (var j = 0; j < message.pathBlacklist.length; ++j)
            {object.pathBlacklist[j] = message.pathBlacklist[j];}
          }
          if (message.commitBlacklist && message.commitBlacklist.length) {
            object.commitBlacklist = [];
            for (var j = 0; j < message.commitBlacklist.length; ++j)
            {object.commitBlacklist[j] = message.commitBlacklist[j];}
          }
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {object.projectId = message.projectId;}
          if (message.defaultRef != null && message.hasOwnProperty('defaultRef'))
          {object.defaultRef = message.defaultRef;}
          if (message.commitBefore != null && message.hasOwnProperty('commitBefore'))
          {if (typeof message.commitBefore === 'number')
          {object.commitBefore = options.longs === String ? String(message.commitBefore) : message.commitBefore;}
          else
          {object.commitBefore = options.longs === String ? $util.Long.prototype.toString.call(message.commitBefore) : options.longs === Number ? new $util.LongBits(message.commitBefore.low >>> 0, message.commitBefore.high >>> 0).toNumber() : message.commitBefore;}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          if (message.analysisConf != null && message.hasOwnProperty('analysisConf'))
          {object.analysisConf = message.analysisConf;}
          if (message.publicKey != null && message.hasOwnProperty('publicKey'))
          {object.publicKey = message.publicKey;}
          if (message.commitAfter != null && message.hasOwnProperty('commitAfter'))
          {if (typeof message.commitAfter === 'number')
          {object.commitAfter = options.longs === String ? String(message.commitAfter) : message.commitAfter;}
          else
          {object.commitAfter = options.longs === String ? $util.Long.prototype.toString.call(message.commitAfter) : options.longs === Number ? new $util.LongBits(message.commitAfter.low >>> 0, message.commitAfter.high >>> 0).toNumber() : message.commitAfter;}}
          if (message.singleBranch != null && message.hasOwnProperty('singleBranch'))
          {object.singleBranch = message.singleBranch;}
          return object;
        };

        /**
                 * Converts this SubmitRepoRequest to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.SubmitRepoRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        SubmitRepoRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
                 * AuthType enum.
                 * @name merico.analysis.gateway.SubmitRepoRequest.AuthType
                 * @enum {string}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} SSH_KEY=1 SSH_KEY value
                 * @property {number} HTTP_BASE=2 HTTP_BASE value
                 */
        SubmitRepoRequest.AuthType = (function() {
          var valuesById = {}; var values = Object.create(valuesById);
          values[valuesById[0] = 'UNKNOWN'] = 0;
          values[valuesById[1] = 'SSH_KEY'] = 1;
          values[valuesById[2] = 'HTTP_BASE'] = 2;
          return values;
        })();

        return SubmitRepoRequest;
      })();

      gateway.SubmitRepoResponse = (function() {

        /**
                 * Properties of a SubmitRepoResponse.
                 * @memberof merico.analysis.gateway
                 * @interface ISubmitRepoResponse
                 * @property {merico.analysis.gateway.SubmitRepoResponse.ErrorMessage|null} [error] SubmitRepoResponse error
                 * @property {string|null} [analysisId] SubmitRepoResponse analysisId
                 * @property {string|null} [reportId] SubmitRepoResponse reportId
                 */

        /**
                 * Constructs a new SubmitRepoResponse.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a SubmitRepoResponse.
                 * @implements ISubmitRepoResponse
                 * @constructor
                 * @param {merico.analysis.gateway.ISubmitRepoResponse=} [properties] Properties to set
                 */
        function SubmitRepoResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * SubmitRepoResponse error.
                 * @member {merico.analysis.gateway.SubmitRepoResponse.ErrorMessage} error
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @instance
                 */
        SubmitRepoResponse.prototype.error = 0;

        /**
                 * SubmitRepoResponse analysisId.
                 * @member {string} analysisId
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @instance
                 */
        SubmitRepoResponse.prototype.analysisId = '';

        /**
                 * SubmitRepoResponse reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @instance
                 */
        SubmitRepoResponse.prototype.reportId = '';

        /**
                 * Creates a new SubmitRepoResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {merico.analysis.gateway.ISubmitRepoResponse=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.SubmitRepoResponse} SubmitRepoResponse instance
                 */
        SubmitRepoResponse.create = function create(properties) {
          return new SubmitRepoResponse(properties);
        };

        /**
                 * Encodes the specified SubmitRepoResponse message. Does not implicitly {@link merico.analysis.gateway.SubmitRepoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {merico.analysis.gateway.ISubmitRepoResponse} message SubmitRepoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SubmitRepoResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.error != null && message.hasOwnProperty('error'))
          {writer.uint32(/* id 3, wireType 0 =*/24).int32(message.error);}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.analysisId);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.reportId);}
          return writer;
        };

        /**
                 * Encodes the specified SubmitRepoResponse message, length delimited. Does not implicitly {@link merico.analysis.gateway.SubmitRepoResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {merico.analysis.gateway.ISubmitRepoResponse} message SubmitRepoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        SubmitRepoResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a SubmitRepoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.SubmitRepoResponse} SubmitRepoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SubmitRepoResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.SubmitRepoResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 3:
                message.error = reader.int32();
                break;
              case 4:
                message.analysisId = reader.string();
                break;
              case 5:
                message.reportId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a SubmitRepoResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.SubmitRepoResponse} SubmitRepoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        SubmitRepoResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a SubmitRepoResponse message.
                 * @function verify
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        SubmitRepoResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.error != null && message.hasOwnProperty('error'))
          {switch (message.error) {
            default:
              return 'error: enum value expected';
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
          }}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {if (!$util.isString(message.analysisId))
          {return 'analysisId: string expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          return null;
        };

        /**
                 * Creates a SubmitRepoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.SubmitRepoResponse} SubmitRepoResponse
                 */
        SubmitRepoResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.SubmitRepoResponse)
          {return object;}
          var message = new $root.merico.analysis.gateway.SubmitRepoResponse();
          switch (object.error) {
            case 'EMPTY':
            case 0:
              message.error = 0;
              break;
            case 'OBJECT_NOT_FOUND':
            case 1:
              message.error = 1;
              break;
            case 'VALUE_NOT_FOUND':
            case 2:
              message.error = 2;
              break;
            case 'VALUE_ALREADY_EXISTS':
            case 3:
              message.error = 3;
              break;
            case 'VALUE_OUT_OF_RANGE':
            case 4:
              message.error = 4;
              break;
            case 'INVALID_VALUE':
            case 5:
              message.error = 5;
              break;
            case 'FAILED_DEPENDENCY':
            case 6:
              message.error = 6;
              break;
            case 'FORBIDDEN':
            case 7:
              message.error = 7;
              break;
            case 'USERNAME_TAKEN':
            case 8:
              message.error = 8;
              break;
            case 'EMAIL_TAKEN':
            case 9:
              message.error = 9;
              break;
          }
          if (object.analysisId != null)
          {message.analysisId = String(object.analysisId);}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          return message;
        };

        /**
                 * Creates a plain object from a SubmitRepoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @static
                 * @param {merico.analysis.gateway.SubmitRepoResponse} message SubmitRepoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        SubmitRepoResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.error = options.enums === String ? 'EMPTY' : 0;
            object.analysisId = '';
            object.reportId = '';
          }
          if (message.error != null && message.hasOwnProperty('error'))
          {object.error = options.enums === String ? $root.merico.analysis.gateway.SubmitRepoResponse.ErrorMessage[message.error] : message.error;}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {object.analysisId = message.analysisId;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          return object;
        };

        /**
                 * Converts this SubmitRepoResponse to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.SubmitRepoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        SubmitRepoResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
                 * ErrorMessage enum.
                 * @name merico.analysis.gateway.SubmitRepoResponse.ErrorMessage
                 * @enum {string}
                 * @property {number} EMPTY=0 EMPTY value
                 * @property {number} OBJECT_NOT_FOUND=1 OBJECT_NOT_FOUND value
                 * @property {number} VALUE_NOT_FOUND=2 VALUE_NOT_FOUND value
                 * @property {number} VALUE_ALREADY_EXISTS=3 VALUE_ALREADY_EXISTS value
                 * @property {number} VALUE_OUT_OF_RANGE=4 VALUE_OUT_OF_RANGE value
                 * @property {number} INVALID_VALUE=5 INVALID_VALUE value
                 * @property {number} FAILED_DEPENDENCY=6 FAILED_DEPENDENCY value
                 * @property {number} FORBIDDEN=7 FORBIDDEN value
                 * @property {number} USERNAME_TAKEN=8 USERNAME_TAKEN value
                 * @property {number} EMAIL_TAKEN=9 EMAIL_TAKEN value
                 */
        SubmitRepoResponse.ErrorMessage = (function() {
          var valuesById = {}; var values = Object.create(valuesById);
          values[valuesById[0] = 'EMPTY'] = 0;
          values[valuesById[1] = 'OBJECT_NOT_FOUND'] = 1;
          values[valuesById[2] = 'VALUE_NOT_FOUND'] = 2;
          values[valuesById[3] = 'VALUE_ALREADY_EXISTS'] = 3;
          values[valuesById[4] = 'VALUE_OUT_OF_RANGE'] = 4;
          values[valuesById[5] = 'INVALID_VALUE'] = 5;
          values[valuesById[6] = 'FAILED_DEPENDENCY'] = 6;
          values[valuesById[7] = 'FORBIDDEN'] = 7;
          values[valuesById[8] = 'USERNAME_TAKEN'] = 8;
          values[valuesById[9] = 'EMAIL_TAKEN'] = 9;
          return values;
        })();

        return SubmitRepoResponse;
      })();

      gateway.AnalysisMessage = (function() {

        /**
                 * Properties of an AnalysisMessage.
                 * @memberof merico.analysis.gateway
                 * @interface IAnalysisMessage
                 * @property {string|null} [gitUrl] AnalysisMessage gitUrl
                 * @property {string|null} [version] AnalysisMessage version
                 * @property {merico.analysis.gateway.AnalysisMessage.Readiness|null} [readiness] AnalysisMessage readiness
                 * @property {string|null} [reportId] AnalysisMessage reportId
                 * @property {string|null} [analysisId] AnalysisMessage analysisId
                 */

        /**
                 * Constructs a new AnalysisMessage.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents an AnalysisMessage.
                 * @implements IAnalysisMessage
                 * @constructor
                 * @param {merico.analysis.gateway.IAnalysisMessage=} [properties] Properties to set
                 */
        function AnalysisMessage(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * AnalysisMessage gitUrl.
                 * @member {string} gitUrl
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @instance
                 */
        AnalysisMessage.prototype.gitUrl = '';

        /**
                 * AnalysisMessage version.
                 * @member {string} version
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @instance
                 */
        AnalysisMessage.prototype.version = '';

        /**
                 * AnalysisMessage readiness.
                 * @member {merico.analysis.gateway.AnalysisMessage.Readiness} readiness
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @instance
                 */
        AnalysisMessage.prototype.readiness = 0;

        /**
                 * AnalysisMessage reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @instance
                 */
        AnalysisMessage.prototype.reportId = '';

        /**
                 * AnalysisMessage analysisId.
                 * @member {string} analysisId
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @instance
                 */
        AnalysisMessage.prototype.analysisId = '';

        /**
                 * Creates a new AnalysisMessage instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {merico.analysis.gateway.IAnalysisMessage=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.AnalysisMessage} AnalysisMessage instance
                 */
        AnalysisMessage.create = function create(properties) {
          return new AnalysisMessage(properties);
        };

        /**
                 * Encodes the specified AnalysisMessage message. Does not implicitly {@link merico.analysis.gateway.AnalysisMessage.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {merico.analysis.gateway.IAnalysisMessage} message AnalysisMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AnalysisMessage.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.gitUrl);}
          if (message.version != null && message.hasOwnProperty('version'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);}
          if (message.readiness != null && message.hasOwnProperty('readiness'))
          {writer.uint32(/* id 3, wireType 0 =*/24).int32(message.readiness);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.reportId);}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {writer.uint32(/* id 6, wireType 2 =*/50).string(message.analysisId);}
          return writer;
        };

        /**
                 * Encodes the specified AnalysisMessage message, length delimited. Does not implicitly {@link merico.analysis.gateway.AnalysisMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {merico.analysis.gateway.IAnalysisMessage} message AnalysisMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        AnalysisMessage.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes an AnalysisMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.AnalysisMessage} AnalysisMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AnalysisMessage.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.AnalysisMessage();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.gitUrl = reader.string();
                break;
              case 2:
                message.version = reader.string();
                break;
              case 3:
                message.readiness = reader.int32();
                break;
              case 5:
                message.reportId = reader.string();
                break;
              case 6:
                message.analysisId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes an AnalysisMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.AnalysisMessage} AnalysisMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        AnalysisMessage.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies an AnalysisMessage message.
                 * @function verify
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        AnalysisMessage.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {if (!$util.isString(message.gitUrl))
          {return 'gitUrl: string expected';}}
          if (message.version != null && message.hasOwnProperty('version'))
          {if (!$util.isString(message.version))
          {return 'version: string expected';}}
          if (message.readiness != null && message.hasOwnProperty('readiness'))
          {switch (message.readiness) {
            default:
              return 'readiness: enum value expected';
            case 0:
            case 8:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10:
            case 11:
            case 1:
            case 2:
            case 7:
            case 3:
            case 20:
              break;
          }}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {if (!$util.isString(message.analysisId))
          {return 'analysisId: string expected';}}
          return null;
        };

        /**
                 * Creates an AnalysisMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.AnalysisMessage} AnalysisMessage
                 */
        AnalysisMessage.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.AnalysisMessage)
          {return object;}
          var message = new $root.merico.analysis.gateway.AnalysisMessage();
          if (object.gitUrl != null)
          {message.gitUrl = String(object.gitUrl);}
          if (object.version != null)
          {message.version = String(object.version);}
          switch (object.readiness) {
            case 'UNKNOWN':
            case 0:
              message.readiness = 0;
              break;
            case 'NOT_INIT':
            case 8:
              message.readiness = 8;
              break;
            case 'WAITING':
            case 4:
              message.readiness = 4;
              break;
            case 'AUTH_REQUIRE':
            case 5:
              message.readiness = 5;
              break;
            case 'NOT_REPO':
            case 6:
              message.readiness = 6;
              break;
            case 'PRE_UNDERWAY':
            case 9:
              message.readiness = 9;
              break;
            case 'PRE_READY':
            case 10:
              message.readiness = 10;
              break;
            case 'UNDERWAY':
            case 11:
              message.readiness = 11;
              break;
            case 'READY':
            case 1:
              message.readiness = 1;
              break;
            case 'FAILURE':
            case 2:
              message.readiness = 2;
              break;
            case 'PULLING':
            case 7:
              message.readiness = 7;
              break;
            case 'UNSUPPORTED':
            case 3:
              message.readiness = 3;
              break;
            case 'DUPLICATE':
            case 20:
              message.readiness = 20;
              break;
          }
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          if (object.analysisId != null)
          {message.analysisId = String(object.analysisId);}
          return message;
        };

        /**
                 * Creates a plain object from an AnalysisMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @static
                 * @param {merico.analysis.gateway.AnalysisMessage} message AnalysisMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        AnalysisMessage.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.gitUrl = '';
            object.version = '';
            object.readiness = options.enums === String ? 'UNKNOWN' : 0;
            object.reportId = '';
            object.analysisId = '';
          }
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {object.gitUrl = message.gitUrl;}
          if (message.version != null && message.hasOwnProperty('version'))
          {object.version = message.version;}
          if (message.readiness != null && message.hasOwnProperty('readiness'))
          {object.readiness = options.enums === String ? $root.merico.analysis.gateway.AnalysisMessage.Readiness[message.readiness] : message.readiness;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {object.analysisId = message.analysisId;}
          return object;
        };

        /**
                 * Converts this AnalysisMessage to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.AnalysisMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        AnalysisMessage.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
                 * Readiness enum.
                 * @name merico.analysis.gateway.AnalysisMessage.Readiness
                 * @enum {string}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} NOT_INIT=8 NOT_INIT value
                 * @property {number} WAITING=4 WAITING value
                 * @property {number} AUTH_REQUIRE=5 AUTH_REQUIRE value
                 * @property {number} NOT_REPO=6 NOT_REPO value
                 * @property {number} PRE_UNDERWAY=9 PRE_UNDERWAY value
                 * @property {number} PRE_READY=10 PRE_READY value
                 * @property {number} UNDERWAY=11 UNDERWAY value
                 * @property {number} READY=1 READY value
                 * @property {number} FAILURE=2 FAILURE value
                 * @property {number} PULLING=7 PULLING value
                 * @property {number} UNSUPPORTED=3 UNSUPPORTED value
                 * @property {number} DUPLICATE=20 DUPLICATE value
                 */
        AnalysisMessage.Readiness = (function() {
          var valuesById = {}; var values = Object.create(valuesById);
          values[valuesById[0] = 'UNKNOWN'] = 0;
          values[valuesById[8] = 'NOT_INIT'] = 8;
          values[valuesById[4] = 'WAITING'] = 4;
          values[valuesById[5] = 'AUTH_REQUIRE'] = 5;
          values[valuesById[6] = 'NOT_REPO'] = 6;
          values[valuesById[9] = 'PRE_UNDERWAY'] = 9;
          values[valuesById[10] = 'PRE_READY'] = 10;
          values[valuesById[11] = 'UNDERWAY'] = 11;
          values[valuesById[1] = 'READY'] = 1;
          values[valuesById[2] = 'FAILURE'] = 2;
          values[valuesById[7] = 'PULLING'] = 7;
          values[valuesById[3] = 'UNSUPPORTED'] = 3;
          values[valuesById[20] = 'DUPLICATE'] = 20;
          return values;
        })();

        return AnalysisMessage;
      })();

      gateway.ProgressRateMessage = (function() {

        /**
                 * Properties of a ProgressRateMessage.
                 * @memberof merico.analysis.gateway
                 * @interface IProgressRateMessage
                 * @property {merico.analysis.gateway.IResponseStatus|null} [status] ProgressRateMessage status
                 * @property {string|null} [gitUrl] ProgressRateMessage gitUrl
                 * @property {number|null} [currentPercent] ProgressRateMessage currentPercent
                 * @property {number|null} [estimatedTotalSecond] ProgressRateMessage estimatedTotalSecond
                 * @property {string|null} [analysisId] ProgressRateMessage analysisId
                 * @property {string|null} [reportId] ProgressRateMessage reportId
                 * @property {string|null} [submitType] ProgressRateMessage submitType
                 */

        /**
                 * Constructs a new ProgressRateMessage.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a ProgressRateMessage.
                 * @implements IProgressRateMessage
                 * @constructor
                 * @param {merico.analysis.gateway.IProgressRateMessage=} [properties] Properties to set
                 */
        function ProgressRateMessage(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * ProgressRateMessage status.
                 * @member {merico.analysis.gateway.IResponseStatus|null|undefined} status
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.status = null;

        /**
                 * ProgressRateMessage gitUrl.
                 * @member {string} gitUrl
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.gitUrl = '';

        /**
                 * ProgressRateMessage currentPercent.
                 * @member {number} currentPercent
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.currentPercent = 0;

        /**
                 * ProgressRateMessage estimatedTotalSecond.
                 * @member {number} estimatedTotalSecond
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.estimatedTotalSecond = 0;

        /**
                 * ProgressRateMessage analysisId.
                 * @member {string} analysisId
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.analysisId = '';

        /**
                 * ProgressRateMessage reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.reportId = '';

        /**
                 * ProgressRateMessage submitType.
                 * @member {string} submitType
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 */
        ProgressRateMessage.prototype.submitType = '';

        /**
                 * Creates a new ProgressRateMessage instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {merico.analysis.gateway.IProgressRateMessage=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.ProgressRateMessage} ProgressRateMessage instance
                 */
        ProgressRateMessage.create = function create(properties) {
          return new ProgressRateMessage(properties);
        };

        /**
                 * Encodes the specified ProgressRateMessage message. Does not implicitly {@link merico.analysis.gateway.ProgressRateMessage.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {merico.analysis.gateway.IProgressRateMessage} message ProgressRateMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ProgressRateMessage.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.analysis.gateway.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.gitUrl);}
          if (message.currentPercent != null && message.hasOwnProperty('currentPercent'))
          {writer.uint32(/* id 6, wireType 5 =*/53).float(message.currentPercent);}
          if (message.estimatedTotalSecond != null && message.hasOwnProperty('estimatedTotalSecond'))
          {writer.uint32(/* id 9, wireType 0 =*/72).int32(message.estimatedTotalSecond);}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {writer.uint32(/* id 10, wireType 2 =*/82).string(message.analysisId);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 11, wireType 2 =*/90).string(message.reportId);}
          if (message.submitType != null && message.hasOwnProperty('submitType'))
          {writer.uint32(/* id 12, wireType 2 =*/98).string(message.submitType);}
          return writer;
        };

        /**
                 * Encodes the specified ProgressRateMessage message, length delimited. Does not implicitly {@link merico.analysis.gateway.ProgressRateMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {merico.analysis.gateway.IProgressRateMessage} message ProgressRateMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        ProgressRateMessage.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a ProgressRateMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.ProgressRateMessage} ProgressRateMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ProgressRateMessage.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.ProgressRateMessage();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.analysis.gateway.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.gitUrl = reader.string();
                break;
              case 6:
                message.currentPercent = reader.float();
                break;
              case 9:
                message.estimatedTotalSecond = reader.int32();
                break;
              case 10:
                message.analysisId = reader.string();
                break;
              case 11:
                message.reportId = reader.string();
                break;
              case 12:
                message.submitType = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a ProgressRateMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.ProgressRateMessage} ProgressRateMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        ProgressRateMessage.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a ProgressRateMessage message.
                 * @function verify
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        ProgressRateMessage.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.analysis.gateway.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {if (!$util.isString(message.gitUrl))
          {return 'gitUrl: string expected';}}
          if (message.currentPercent != null && message.hasOwnProperty('currentPercent'))
          {if (typeof message.currentPercent !== 'number')
          {return 'currentPercent: number expected';}}
          if (message.estimatedTotalSecond != null && message.hasOwnProperty('estimatedTotalSecond'))
          {if (!$util.isInteger(message.estimatedTotalSecond))
          {return 'estimatedTotalSecond: integer expected';}}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {if (!$util.isString(message.analysisId))
          {return 'analysisId: string expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          if (message.submitType != null && message.hasOwnProperty('submitType'))
          {if (!$util.isString(message.submitType))
          {return 'submitType: string expected';}}
          return null;
        };

        /**
                 * Creates a ProgressRateMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.ProgressRateMessage} ProgressRateMessage
                 */
        ProgressRateMessage.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.ProgressRateMessage)
          {return object;}
          var message = new $root.merico.analysis.gateway.ProgressRateMessage();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.analysis.gateway.ProgressRateMessage.status: object expected');}
            message.status = $root.merico.analysis.gateway.ResponseStatus.fromObject(object.status);
          }
          if (object.gitUrl != null)
          {message.gitUrl = String(object.gitUrl);}
          if (object.currentPercent != null)
          {message.currentPercent = Number(object.currentPercent);}
          if (object.estimatedTotalSecond != null)
          {message.estimatedTotalSecond = object.estimatedTotalSecond | 0;}
          if (object.analysisId != null)
          {message.analysisId = String(object.analysisId);}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          if (object.submitType != null)
          {message.submitType = String(object.submitType);}
          return message;
        };

        /**
                 * Creates a plain object from a ProgressRateMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @static
                 * @param {merico.analysis.gateway.ProgressRateMessage} message ProgressRateMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        ProgressRateMessage.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.gitUrl = '';
            object.currentPercent = 0;
            object.estimatedTotalSecond = 0;
            object.analysisId = '';
            object.reportId = '';
            object.submitType = '';
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.analysis.gateway.ResponseStatus.toObject(message.status, options);}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {object.gitUrl = message.gitUrl;}
          if (message.currentPercent != null && message.hasOwnProperty('currentPercent'))
          {object.currentPercent = options.json && !isFinite(message.currentPercent) ? String(message.currentPercent) : message.currentPercent;}
          if (message.estimatedTotalSecond != null && message.hasOwnProperty('estimatedTotalSecond'))
          {object.estimatedTotalSecond = message.estimatedTotalSecond;}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {object.analysisId = message.analysisId;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          if (message.submitType != null && message.hasOwnProperty('submitType'))
          {object.submitType = message.submitType;}
          return object;
        };

        /**
                 * Converts this ProgressRateMessage to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.ProgressRateMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        ProgressRateMessage.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProgressRateMessage;
      })();

      gateway.GetProjectStatusRequest = (function() {

        /**
                 * Properties of a GetProjectStatusRequest.
                 * @memberof merico.analysis.gateway
                 * @interface IGetProjectStatusRequest
                 * @property {string|null} [gitUrl] GetProjectStatusRequest gitUrl
                 * @property {string|null} [version] GetProjectStatusRequest version
                 */

        /**
                 * Constructs a new GetProjectStatusRequest.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a GetProjectStatusRequest.
                 * @implements IGetProjectStatusRequest
                 * @constructor
                 * @param {merico.analysis.gateway.IGetProjectStatusRequest=} [properties] Properties to set
                 */
        function GetProjectStatusRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetProjectStatusRequest gitUrl.
                 * @member {string} gitUrl
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @instance
                 */
        GetProjectStatusRequest.prototype.gitUrl = '';

        /**
                 * GetProjectStatusRequest version.
                 * @member {string} version
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @instance
                 */
        GetProjectStatusRequest.prototype.version = '';

        /**
                 * Creates a new GetProjectStatusRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {merico.analysis.gateway.IGetProjectStatusRequest=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.GetProjectStatusRequest} GetProjectStatusRequest instance
                 */
        GetProjectStatusRequest.create = function create(properties) {
          return new GetProjectStatusRequest(properties);
        };

        /**
                 * Encodes the specified GetProjectStatusRequest message. Does not implicitly {@link merico.analysis.gateway.GetProjectStatusRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {merico.analysis.gateway.IGetProjectStatusRequest} message GetProjectStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetProjectStatusRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.gitUrl);}
          if (message.version != null && message.hasOwnProperty('version'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);}
          return writer;
        };

        /**
                 * Encodes the specified GetProjectStatusRequest message, length delimited. Does not implicitly {@link merico.analysis.gateway.GetProjectStatusRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {merico.analysis.gateway.IGetProjectStatusRequest} message GetProjectStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetProjectStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetProjectStatusRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.GetProjectStatusRequest} GetProjectStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetProjectStatusRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.GetProjectStatusRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.gitUrl = reader.string();
                break;
              case 2:
                message.version = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetProjectStatusRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.GetProjectStatusRequest} GetProjectStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetProjectStatusRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetProjectStatusRequest message.
                 * @function verify
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetProjectStatusRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {if (!$util.isString(message.gitUrl))
          {return 'gitUrl: string expected';}}
          if (message.version != null && message.hasOwnProperty('version'))
          {if (!$util.isString(message.version))
          {return 'version: string expected';}}
          return null;
        };

        /**
                 * Creates a GetProjectStatusRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.GetProjectStatusRequest} GetProjectStatusRequest
                 */
        GetProjectStatusRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.GetProjectStatusRequest)
          {return object;}
          var message = new $root.merico.analysis.gateway.GetProjectStatusRequest();
          if (object.gitUrl != null)
          {message.gitUrl = String(object.gitUrl);}
          if (object.version != null)
          {message.version = String(object.version);}
          return message;
        };

        /**
                 * Creates a plain object from a GetProjectStatusRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @static
                 * @param {merico.analysis.gateway.GetProjectStatusRequest} message GetProjectStatusRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetProjectStatusRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.gitUrl = '';
            object.version = '';
          }
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {object.gitUrl = message.gitUrl;}
          if (message.version != null && message.hasOwnProperty('version'))
          {object.version = message.version;}
          return object;
        };

        /**
                 * Converts this GetProjectStatusRequest to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.GetProjectStatusRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetProjectStatusRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetProjectStatusRequest;
      })();

      gateway.GetProjectStatusResponse = (function() {

        /**
                 * Properties of a GetProjectStatusResponse.
                 * @memberof merico.analysis.gateway
                 * @interface IGetProjectStatusResponse
                 * @property {merico.analysis.gateway.IResponseStatus|null} [status] GetProjectStatusResponse status
                 * @property {Object.<string,number>|null} [languages] GetProjectStatusResponse languages
                 * @property {string|null} [version] GetProjectStatusResponse version
                 */

        /**
                 * Constructs a new GetProjectStatusResponse.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a GetProjectStatusResponse.
                 * @implements IGetProjectStatusResponse
                 * @constructor
                 * @param {merico.analysis.gateway.IGetProjectStatusResponse=} [properties] Properties to set
                 */
        function GetProjectStatusResponse(properties) {
          this.languages = {};
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetProjectStatusResponse status.
                 * @member {merico.analysis.gateway.IResponseStatus|null|undefined} status
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @instance
                 */
        GetProjectStatusResponse.prototype.status = null;

        /**
                 * GetProjectStatusResponse languages.
                 * @member {Object.<string,number>} languages
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @instance
                 */
        GetProjectStatusResponse.prototype.languages = $util.emptyObject;

        /**
                 * GetProjectStatusResponse version.
                 * @member {string} version
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @instance
                 */
        GetProjectStatusResponse.prototype.version = '';

        /**
                 * Creates a new GetProjectStatusResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {merico.analysis.gateway.IGetProjectStatusResponse=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.GetProjectStatusResponse} GetProjectStatusResponse instance
                 */
        GetProjectStatusResponse.create = function create(properties) {
          return new GetProjectStatusResponse(properties);
        };

        /**
                 * Encodes the specified GetProjectStatusResponse message. Does not implicitly {@link merico.analysis.gateway.GetProjectStatusResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {merico.analysis.gateway.IGetProjectStatusResponse} message GetProjectStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetProjectStatusResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.analysis.gateway.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.version != null && message.hasOwnProperty('version'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.version);}
          if (message.languages != null && message.hasOwnProperty('languages'))
          {for (var keys = Object.keys(message.languages), i = 0; i < keys.length; ++i)
          {writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 5 =*/21).float(message.languages[keys[i]]).ldelim();}}
          return writer;
        };

        /**
                 * Encodes the specified GetProjectStatusResponse message, length delimited. Does not implicitly {@link merico.analysis.gateway.GetProjectStatusResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {merico.analysis.gateway.IGetProjectStatusResponse} message GetProjectStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetProjectStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetProjectStatusResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.GetProjectStatusResponse} GetProjectStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetProjectStatusResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.GetProjectStatusResponse(); var key;
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.analysis.gateway.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 4:
                reader.skip().pos++;
                if (message.languages === $util.emptyObject)
                {message.languages = {};}
                key = reader.string();
                reader.pos++;
                message.languages[key] = reader.float();
                break;
              case 3:
                message.version = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetProjectStatusResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.GetProjectStatusResponse} GetProjectStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetProjectStatusResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetProjectStatusResponse message.
                 * @function verify
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetProjectStatusResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.analysis.gateway.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.languages != null && message.hasOwnProperty('languages')) {
            if (!$util.isObject(message.languages))
            {return 'languages: object expected';}
            var key = Object.keys(message.languages);
            for (var i = 0; i < key.length; ++i)
            {if (typeof message.languages[key[i]] !== 'number')
            {return 'languages: number{k:string} expected';}}
          }
          if (message.version != null && message.hasOwnProperty('version'))
          {if (!$util.isString(message.version))
          {return 'version: string expected';}}
          return null;
        };

        /**
                 * Creates a GetProjectStatusResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.GetProjectStatusResponse} GetProjectStatusResponse
                 */
        GetProjectStatusResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.GetProjectStatusResponse)
          {return object;}
          var message = new $root.merico.analysis.gateway.GetProjectStatusResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.analysis.gateway.GetProjectStatusResponse.status: object expected');}
            message.status = $root.merico.analysis.gateway.ResponseStatus.fromObject(object.status);
          }
          if (object.languages) {
            if (typeof object.languages !== 'object')
            {throw TypeError('.merico.analysis.gateway.GetProjectStatusResponse.languages: object expected');}
            message.languages = {};
            for (var keys = Object.keys(object.languages), i = 0; i < keys.length; ++i)
            {message.languages[keys[i]] = Number(object.languages[keys[i]]);}
          }
          if (object.version != null)
          {message.version = String(object.version);}
          return message;
        };

        /**
                 * Creates a plain object from a GetProjectStatusResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @static
                 * @param {merico.analysis.gateway.GetProjectStatusResponse} message GetProjectStatusResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetProjectStatusResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.objects || options.defaults)
          {object.languages = {};}
          if (options.defaults) {
            object.status = null;
            object.version = '';
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.analysis.gateway.ResponseStatus.toObject(message.status, options);}
          if (message.version != null && message.hasOwnProperty('version'))
          {object.version = message.version;}
          var keys2;
          if (message.languages && (keys2 = Object.keys(message.languages)).length) {
            object.languages = {};
            for (var j = 0; j < keys2.length; ++j)
            {object.languages[keys2[j]] = options.json && !isFinite(message.languages[keys2[j]]) ? String(message.languages[keys2[j]]) : message.languages[keys2[j]];}
          }
          return object;
        };

        /**
                 * Converts this GetProjectStatusResponse to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.GetProjectStatusResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetProjectStatusResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetProjectStatusResponse;
      })();

      gateway.GetVersionRequest = (function() {

        /**
                 * Properties of a GetVersionRequest.
                 * @memberof merico.analysis.gateway
                 * @interface IGetVersionRequest
                 */

        /**
                 * Constructs a new GetVersionRequest.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a GetVersionRequest.
                 * @implements IGetVersionRequest
                 * @constructor
                 * @param {merico.analysis.gateway.IGetVersionRequest=} [properties] Properties to set
                 */
        function GetVersionRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * Creates a new GetVersionRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {merico.analysis.gateway.IGetVersionRequest=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.GetVersionRequest} GetVersionRequest instance
                 */
        GetVersionRequest.create = function create(properties) {
          return new GetVersionRequest(properties);
        };

        /**
                 * Encodes the specified GetVersionRequest message. Does not implicitly {@link merico.analysis.gateway.GetVersionRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {merico.analysis.gateway.IGetVersionRequest} message GetVersionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetVersionRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          return writer;
        };

        /**
                 * Encodes the specified GetVersionRequest message, length delimited. Does not implicitly {@link merico.analysis.gateway.GetVersionRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {merico.analysis.gateway.IGetVersionRequest} message GetVersionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetVersionRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetVersionRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.GetVersionRequest} GetVersionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetVersionRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.GetVersionRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetVersionRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.GetVersionRequest} GetVersionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetVersionRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetVersionRequest message.
                 * @function verify
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetVersionRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          return null;
        };

        /**
                 * Creates a GetVersionRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.GetVersionRequest} GetVersionRequest
                 */
        GetVersionRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.GetVersionRequest)
          {return object;}
          return new $root.merico.analysis.gateway.GetVersionRequest();
        };

        /**
                 * Creates a plain object from a GetVersionRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @static
                 * @param {merico.analysis.gateway.GetVersionRequest} message GetVersionRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetVersionRequest.toObject = function toObject() {
          return {};
        };

        /**
                 * Converts this GetVersionRequest to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.GetVersionRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetVersionRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetVersionRequest;
      })();

      gateway.GetVersionResponse = (function() {

        /**
                 * Properties of a GetVersionResponse.
                 * @memberof merico.analysis.gateway
                 * @interface IGetVersionResponse
                 * @property {merico.analysis.gateway.IResponseStatus|null} [status] GetVersionResponse status
                 * @property {string|null} [version] GetVersionResponse version
                 * @property {string|null} [semver] GetVersionResponse semver
                 */

        /**
                 * Constructs a new GetVersionResponse.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a GetVersionResponse.
                 * @implements IGetVersionResponse
                 * @constructor
                 * @param {merico.analysis.gateway.IGetVersionResponse=} [properties] Properties to set
                 */
        function GetVersionResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * GetVersionResponse status.
                 * @member {merico.analysis.gateway.IResponseStatus|null|undefined} status
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @instance
                 */
        GetVersionResponse.prototype.status = null;

        /**
                 * GetVersionResponse version.
                 * @member {string} version
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @instance
                 */
        GetVersionResponse.prototype.version = '';

        /**
                 * GetVersionResponse semver.
                 * @member {string} semver
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @instance
                 */
        GetVersionResponse.prototype.semver = '';

        /**
                 * Creates a new GetVersionResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {merico.analysis.gateway.IGetVersionResponse=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.GetVersionResponse} GetVersionResponse instance
                 */
        GetVersionResponse.create = function create(properties) {
          return new GetVersionResponse(properties);
        };

        /**
                 * Encodes the specified GetVersionResponse message. Does not implicitly {@link merico.analysis.gateway.GetVersionResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {merico.analysis.gateway.IGetVersionResponse} message GetVersionResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetVersionResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.analysis.gateway.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.version != null && message.hasOwnProperty('version'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);}
          if (message.semver != null && message.hasOwnProperty('semver'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.semver);}
          return writer;
        };

        /**
                 * Encodes the specified GetVersionResponse message, length delimited. Does not implicitly {@link merico.analysis.gateway.GetVersionResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {merico.analysis.gateway.IGetVersionResponse} message GetVersionResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        GetVersionResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a GetVersionResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.GetVersionResponse} GetVersionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetVersionResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.GetVersionResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.analysis.gateway.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.version = reader.string();
                break;
              case 3:
                message.semver = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a GetVersionResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.GetVersionResponse} GetVersionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        GetVersionResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a GetVersionResponse message.
                 * @function verify
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        GetVersionResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.analysis.gateway.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.version != null && message.hasOwnProperty('version'))
          {if (!$util.isString(message.version))
          {return 'version: string expected';}}
          if (message.semver != null && message.hasOwnProperty('semver'))
          {if (!$util.isString(message.semver))
          {return 'semver: string expected';}}
          return null;
        };

        /**
                 * Creates a GetVersionResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.GetVersionResponse} GetVersionResponse
                 */
        GetVersionResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.GetVersionResponse)
          {return object;}
          var message = new $root.merico.analysis.gateway.GetVersionResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.analysis.gateway.GetVersionResponse.status: object expected');}
            message.status = $root.merico.analysis.gateway.ResponseStatus.fromObject(object.status);
          }
          if (object.version != null)
          {message.version = String(object.version);}
          if (object.semver != null)
          {message.semver = String(object.semver);}
          return message;
        };

        /**
                 * Creates a plain object from a GetVersionResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @static
                 * @param {merico.analysis.gateway.GetVersionResponse} message GetVersionResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        GetVersionResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.version = '';
            object.semver = '';
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.analysis.gateway.ResponseStatus.toObject(message.status, options);}
          if (message.version != null && message.hasOwnProperty('version'))
          {object.version = message.version;}
          if (message.semver != null && message.hasOwnProperty('semver'))
          {object.semver = message.semver;}
          return object;
        };

        /**
                 * Converts this GetVersionResponse to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.GetVersionResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        GetVersionResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetVersionResponse;
      })();

      gateway.TerminateAnalysisRequest = (function() {

        /**
                 * Properties of a TerminateAnalysisRequest.
                 * @memberof merico.analysis.gateway
                 * @interface ITerminateAnalysisRequest
                 * @property {string|null} [gitUrl] TerminateAnalysisRequest gitUrl
                 * @property {string|null} [analysisId] TerminateAnalysisRequest analysisId
                 * @property {string|null} [projectId] TerminateAnalysisRequest projectId
                 * @property {string|null} [reportId] TerminateAnalysisRequest reportId
                 */

        /**
                 * Constructs a new TerminateAnalysisRequest.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a TerminateAnalysisRequest.
                 * @implements ITerminateAnalysisRequest
                 * @constructor
                 * @param {merico.analysis.gateway.ITerminateAnalysisRequest=} [properties] Properties to set
                 */
        function TerminateAnalysisRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * TerminateAnalysisRequest gitUrl.
                 * @member {string} gitUrl
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @instance
                 */
        TerminateAnalysisRequest.prototype.gitUrl = '';

        /**
                 * TerminateAnalysisRequest analysisId.
                 * @member {string} analysisId
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @instance
                 */
        TerminateAnalysisRequest.prototype.analysisId = '';

        /**
                 * TerminateAnalysisRequest projectId.
                 * @member {string} projectId
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @instance
                 */
        TerminateAnalysisRequest.prototype.projectId = '';

        /**
                 * TerminateAnalysisRequest reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @instance
                 */
        TerminateAnalysisRequest.prototype.reportId = '';

        /**
                 * Creates a new TerminateAnalysisRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.ITerminateAnalysisRequest=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.TerminateAnalysisRequest} TerminateAnalysisRequest instance
                 */
        TerminateAnalysisRequest.create = function create(properties) {
          return new TerminateAnalysisRequest(properties);
        };

        /**
                 * Encodes the specified TerminateAnalysisRequest message. Does not implicitly {@link merico.analysis.gateway.TerminateAnalysisRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.ITerminateAnalysisRequest} message TerminateAnalysisRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TerminateAnalysisRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.gitUrl);}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.analysisId);}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {writer.uint32(/* id 3, wireType 2 =*/26).string(message.projectId);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.reportId);}
          return writer;
        };

        /**
                 * Encodes the specified TerminateAnalysisRequest message, length delimited. Does not implicitly {@link merico.analysis.gateway.TerminateAnalysisRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.ITerminateAnalysisRequest} message TerminateAnalysisRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TerminateAnalysisRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a TerminateAnalysisRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.TerminateAnalysisRequest} TerminateAnalysisRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TerminateAnalysisRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.TerminateAnalysisRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.gitUrl = reader.string();
                break;
              case 2:
                message.analysisId = reader.string();
                break;
              case 3:
                message.projectId = reader.string();
                break;
              case 4:
                message.reportId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a TerminateAnalysisRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.TerminateAnalysisRequest} TerminateAnalysisRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TerminateAnalysisRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a TerminateAnalysisRequest message.
                 * @function verify
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        TerminateAnalysisRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {if (!$util.isString(message.gitUrl))
          {return 'gitUrl: string expected';}}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {if (!$util.isString(message.analysisId))
          {return 'analysisId: string expected';}}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {if (!$util.isString(message.projectId))
          {return 'projectId: string expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          return null;
        };

        /**
                 * Creates a TerminateAnalysisRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.TerminateAnalysisRequest} TerminateAnalysisRequest
                 */
        TerminateAnalysisRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.TerminateAnalysisRequest)
          {return object;}
          var message = new $root.merico.analysis.gateway.TerminateAnalysisRequest();
          if (object.gitUrl != null)
          {message.gitUrl = String(object.gitUrl);}
          if (object.analysisId != null)
          {message.analysisId = String(object.analysisId);}
          if (object.projectId != null)
          {message.projectId = String(object.projectId);}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          return message;
        };

        /**
                 * Creates a plain object from a TerminateAnalysisRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.TerminateAnalysisRequest} message TerminateAnalysisRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        TerminateAnalysisRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.gitUrl = '';
            object.analysisId = '';
            object.projectId = '';
            object.reportId = '';
          }
          if (message.gitUrl != null && message.hasOwnProperty('gitUrl'))
          {object.gitUrl = message.gitUrl;}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {object.analysisId = message.analysisId;}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {object.projectId = message.projectId;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          return object;
        };

        /**
                 * Converts this TerminateAnalysisRequest to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.TerminateAnalysisRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        TerminateAnalysisRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TerminateAnalysisRequest;
      })();

      gateway.TerminateAnalysisResponse = (function() {

        /**
                 * Properties of a TerminateAnalysisResponse.
                 * @memberof merico.analysis.gateway
                 * @interface ITerminateAnalysisResponse
                 * @property {Array.<string>|null} [analysisIds] TerminateAnalysisResponse analysisIds
                 * @property {Array.<string>|null} [reportIds] TerminateAnalysisResponse reportIds
                 * @property {merico.analysis.gateway.IResponseStatus|null} [status] TerminateAnalysisResponse status
                 */

        /**
                 * Constructs a new TerminateAnalysisResponse.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a TerminateAnalysisResponse.
                 * @implements ITerminateAnalysisResponse
                 * @constructor
                 * @param {merico.analysis.gateway.ITerminateAnalysisResponse=} [properties] Properties to set
                 */
        function TerminateAnalysisResponse(properties) {
          this.analysisIds = [];
          this.reportIds = [];
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * TerminateAnalysisResponse analysisIds.
                 * @member {Array.<string>} analysisIds
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @instance
                 */
        TerminateAnalysisResponse.prototype.analysisIds = $util.emptyArray;

        /**
                 * TerminateAnalysisResponse reportIds.
                 * @member {Array.<string>} reportIds
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @instance
                 */
        TerminateAnalysisResponse.prototype.reportIds = $util.emptyArray;

        /**
                 * TerminateAnalysisResponse status.
                 * @member {merico.analysis.gateway.IResponseStatus|null|undefined} status
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @instance
                 */
        TerminateAnalysisResponse.prototype.status = null;

        /**
                 * Creates a new TerminateAnalysisResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.ITerminateAnalysisResponse=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.TerminateAnalysisResponse} TerminateAnalysisResponse instance
                 */
        TerminateAnalysisResponse.create = function create(properties) {
          return new TerminateAnalysisResponse(properties);
        };

        /**
                 * Encodes the specified TerminateAnalysisResponse message. Does not implicitly {@link merico.analysis.gateway.TerminateAnalysisResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.ITerminateAnalysisResponse} message TerminateAnalysisResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TerminateAnalysisResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.analysisIds != null && message.analysisIds.length)
          {for (var i = 0; i < message.analysisIds.length; ++i)
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.analysisIds[i]);}}
          if (message.reportIds != null && message.reportIds.length)
          {for (var i = 0; i < message.reportIds.length; ++i)
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.reportIds[i]);}}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.analysis.gateway.ResponseStatus.encode(message.status, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified TerminateAnalysisResponse message, length delimited. Does not implicitly {@link merico.analysis.gateway.TerminateAnalysisResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.ITerminateAnalysisResponse} message TerminateAnalysisResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        TerminateAnalysisResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a TerminateAnalysisResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.TerminateAnalysisResponse} TerminateAnalysisResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TerminateAnalysisResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.TerminateAnalysisResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                if (!(message.analysisIds && message.analysisIds.length))
                {message.analysisIds = [];}
                message.analysisIds.push(reader.string());
                break;
              case 2:
                if (!(message.reportIds && message.reportIds.length))
                {message.reportIds = [];}
                message.reportIds.push(reader.string());
                break;
              case 3:
                message.status = $root.merico.analysis.gateway.ResponseStatus.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a TerminateAnalysisResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.TerminateAnalysisResponse} TerminateAnalysisResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        TerminateAnalysisResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a TerminateAnalysisResponse message.
                 * @function verify
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        TerminateAnalysisResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.analysisIds != null && message.hasOwnProperty('analysisIds')) {
            if (!Array.isArray(message.analysisIds))
            {return 'analysisIds: array expected';}
            for (var i = 0; i < message.analysisIds.length; ++i)
            {if (!$util.isString(message.analysisIds[i]))
            {return 'analysisIds: string[] expected';}}
          }
          if (message.reportIds != null && message.hasOwnProperty('reportIds')) {
            if (!Array.isArray(message.reportIds))
            {return 'reportIds: array expected';}
            for (var i = 0; i < message.reportIds.length; ++i)
            {if (!$util.isString(message.reportIds[i]))
            {return 'reportIds: string[] expected';}}
          }
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.analysis.gateway.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          return null;
        };

        /**
                 * Creates a TerminateAnalysisResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.TerminateAnalysisResponse} TerminateAnalysisResponse
                 */
        TerminateAnalysisResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.TerminateAnalysisResponse)
          {return object;}
          var message = new $root.merico.analysis.gateway.TerminateAnalysisResponse();
          if (object.analysisIds) {
            if (!Array.isArray(object.analysisIds))
            {throw TypeError('.merico.analysis.gateway.TerminateAnalysisResponse.analysisIds: array expected');}
            message.analysisIds = [];
            for (var i = 0; i < object.analysisIds.length; ++i)
            {message.analysisIds[i] = String(object.analysisIds[i]);}
          }
          if (object.reportIds) {
            if (!Array.isArray(object.reportIds))
            {throw TypeError('.merico.analysis.gateway.TerminateAnalysisResponse.reportIds: array expected');}
            message.reportIds = [];
            for (var i = 0; i < object.reportIds.length; ++i)
            {message.reportIds[i] = String(object.reportIds[i]);}
          }
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.analysis.gateway.TerminateAnalysisResponse.status: object expected');}
            message.status = $root.merico.analysis.gateway.ResponseStatus.fromObject(object.status);
          }
          return message;
        };

        /**
                 * Creates a plain object from a TerminateAnalysisResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.TerminateAnalysisResponse} message TerminateAnalysisResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        TerminateAnalysisResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.arrays || options.defaults) {
            object.analysisIds = [];
            object.reportIds = [];
          }
          if (options.defaults)
          {object.status = null;}
          if (message.analysisIds && message.analysisIds.length) {
            object.analysisIds = [];
            for (var j = 0; j < message.analysisIds.length; ++j)
            {object.analysisIds[j] = message.analysisIds[j];}
          }
          if (message.reportIds && message.reportIds.length) {
            object.reportIds = [];
            for (var j = 0; j < message.reportIds.length; ++j)
            {object.reportIds[j] = message.reportIds[j];}
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.analysis.gateway.ResponseStatus.toObject(message.status, options);}
          return object;
        };

        /**
                 * Converts this TerminateAnalysisResponse to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.TerminateAnalysisResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        TerminateAnalysisResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TerminateAnalysisResponse;
      })();

      gateway.LookupAnalysisRequest = (function() {

        /**
                 * Properties of a LookupAnalysisRequest.
                 * @memberof merico.analysis.gateway
                 * @interface ILookupAnalysisRequest
                 * @property {string|null} [analysisId] LookupAnalysisRequest analysisId
                 * @property {string|null} [reportId] LookupAnalysisRequest reportId
                 */

        /**
                 * Constructs a new LookupAnalysisRequest.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a LookupAnalysisRequest.
                 * @implements ILookupAnalysisRequest
                 * @constructor
                 * @param {merico.analysis.gateway.ILookupAnalysisRequest=} [properties] Properties to set
                 */
        function LookupAnalysisRequest(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * LookupAnalysisRequest analysisId.
                 * @member {string} analysisId
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @instance
                 */
        LookupAnalysisRequest.prototype.analysisId = '';

        /**
                 * LookupAnalysisRequest reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @instance
                 */
        LookupAnalysisRequest.prototype.reportId = '';

        /**
                 * Creates a new LookupAnalysisRequest instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.ILookupAnalysisRequest=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.LookupAnalysisRequest} LookupAnalysisRequest instance
                 */
        LookupAnalysisRequest.create = function create(properties) {
          return new LookupAnalysisRequest(properties);
        };

        /**
                 * Encodes the specified LookupAnalysisRequest message. Does not implicitly {@link merico.analysis.gateway.LookupAnalysisRequest.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.ILookupAnalysisRequest} message LookupAnalysisRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LookupAnalysisRequest.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.analysisId);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.reportId);}
          return writer;
        };

        /**
                 * Encodes the specified LookupAnalysisRequest message, length delimited. Does not implicitly {@link merico.analysis.gateway.LookupAnalysisRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.ILookupAnalysisRequest} message LookupAnalysisRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LookupAnalysisRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a LookupAnalysisRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.LookupAnalysisRequest} LookupAnalysisRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LookupAnalysisRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.LookupAnalysisRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.analysisId = reader.string();
                break;
              case 2:
                message.reportId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a LookupAnalysisRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.LookupAnalysisRequest} LookupAnalysisRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LookupAnalysisRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a LookupAnalysisRequest message.
                 * @function verify
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        LookupAnalysisRequest.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {if (!$util.isString(message.analysisId))
          {return 'analysisId: string expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          return null;
        };

        /**
                 * Creates a LookupAnalysisRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.LookupAnalysisRequest} LookupAnalysisRequest
                 */
        LookupAnalysisRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.LookupAnalysisRequest)
          {return object;}
          var message = new $root.merico.analysis.gateway.LookupAnalysisRequest();
          if (object.analysisId != null)
          {message.analysisId = String(object.analysisId);}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          return message;
        };

        /**
                 * Creates a plain object from a LookupAnalysisRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @static
                 * @param {merico.analysis.gateway.LookupAnalysisRequest} message LookupAnalysisRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        LookupAnalysisRequest.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.analysisId = '';
            object.reportId = '';
          }
          if (message.analysisId != null && message.hasOwnProperty('analysisId'))
          {object.analysisId = message.analysisId;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          return object;
        };

        /**
                 * Converts this LookupAnalysisRequest to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.LookupAnalysisRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        LookupAnalysisRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LookupAnalysisRequest;
      })();

      gateway.LookupAnalysisResponse = (function() {

        /**
                 * Properties of a LookupAnalysisResponse.
                 * @memberof merico.analysis.gateway
                 * @interface ILookupAnalysisResponse
                 * @property {merico.analysis.gateway.IResponseStatus|null} [status] LookupAnalysisResponse status
                 * @property {merico.analysis.gateway.ICaAnalysisModel|null} [analysis] LookupAnalysisResponse analysis
                 */

        /**
                 * Constructs a new LookupAnalysisResponse.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a LookupAnalysisResponse.
                 * @implements ILookupAnalysisResponse
                 * @constructor
                 * @param {merico.analysis.gateway.ILookupAnalysisResponse=} [properties] Properties to set
                 */
        function LookupAnalysisResponse(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * LookupAnalysisResponse status.
                 * @member {merico.analysis.gateway.IResponseStatus|null|undefined} status
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @instance
                 */
        LookupAnalysisResponse.prototype.status = null;

        /**
                 * LookupAnalysisResponse analysis.
                 * @member {merico.analysis.gateway.ICaAnalysisModel|null|undefined} analysis
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @instance
                 */
        LookupAnalysisResponse.prototype.analysis = null;

        /**
                 * Creates a new LookupAnalysisResponse instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.ILookupAnalysisResponse=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.LookupAnalysisResponse} LookupAnalysisResponse instance
                 */
        LookupAnalysisResponse.create = function create(properties) {
          return new LookupAnalysisResponse(properties);
        };

        /**
                 * Encodes the specified LookupAnalysisResponse message. Does not implicitly {@link merico.analysis.gateway.LookupAnalysisResponse.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.ILookupAnalysisResponse} message LookupAnalysisResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LookupAnalysisResponse.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.status != null && message.hasOwnProperty('status'))
          {$root.merico.analysis.gateway.ResponseStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}
          if (message.analysis != null && message.hasOwnProperty('analysis'))
          {$root.merico.analysis.gateway.CaAnalysisModel.encode(message.analysis, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}
          return writer;
        };

        /**
                 * Encodes the specified LookupAnalysisResponse message, length delimited. Does not implicitly {@link merico.analysis.gateway.LookupAnalysisResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.ILookupAnalysisResponse} message LookupAnalysisResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        LookupAnalysisResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a LookupAnalysisResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.LookupAnalysisResponse} LookupAnalysisResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LookupAnalysisResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.LookupAnalysisResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = $root.merico.analysis.gateway.ResponseStatus.decode(reader, reader.uint32());
                break;
              case 2:
                message.analysis = $root.merico.analysis.gateway.CaAnalysisModel.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a LookupAnalysisResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.LookupAnalysisResponse} LookupAnalysisResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        LookupAnalysisResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a LookupAnalysisResponse message.
                 * @function verify
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        LookupAnalysisResponse.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.status != null && message.hasOwnProperty('status')) {
            var error = $root.merico.analysis.gateway.ResponseStatus.verify(message.status);
            if (error)
            {return 'status.' + error;}
          }
          if (message.analysis != null && message.hasOwnProperty('analysis')) {
            var error = $root.merico.analysis.gateway.CaAnalysisModel.verify(message.analysis);
            if (error)
            {return 'analysis.' + error;}
          }
          return null;
        };

        /**
                 * Creates a LookupAnalysisResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.LookupAnalysisResponse} LookupAnalysisResponse
                 */
        LookupAnalysisResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.LookupAnalysisResponse)
          {return object;}
          var message = new $root.merico.analysis.gateway.LookupAnalysisResponse();
          if (object.status != null) {
            if (typeof object.status !== 'object')
            {throw TypeError('.merico.analysis.gateway.LookupAnalysisResponse.status: object expected');}
            message.status = $root.merico.analysis.gateway.ResponseStatus.fromObject(object.status);
          }
          if (object.analysis != null) {
            if (typeof object.analysis !== 'object')
            {throw TypeError('.merico.analysis.gateway.LookupAnalysisResponse.analysis: object expected');}
            message.analysis = $root.merico.analysis.gateway.CaAnalysisModel.fromObject(object.analysis);
          }
          return message;
        };

        /**
                 * Creates a plain object from a LookupAnalysisResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @static
                 * @param {merico.analysis.gateway.LookupAnalysisResponse} message LookupAnalysisResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        LookupAnalysisResponse.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.status = null;
            object.analysis = null;
          }
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = $root.merico.analysis.gateway.ResponseStatus.toObject(message.status, options);}
          if (message.analysis != null && message.hasOwnProperty('analysis'))
          {object.analysis = $root.merico.analysis.gateway.CaAnalysisModel.toObject(message.analysis, options);}
          return object;
        };

        /**
                 * Converts this LookupAnalysisResponse to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.LookupAnalysisResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        LookupAnalysisResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LookupAnalysisResponse;
      })();

      gateway.CaAnalysisModel = (function() {

        /**
                 * Properties of a CaAnalysisModel.
                 * @memberof merico.analysis.gateway
                 * @interface ICaAnalysisModel
                 * @property {string|null} [id] CaAnalysisModel id
                 * @property {string|null} [type] CaAnalysisModel type
                 * @property {number|null} [progress] CaAnalysisModel progress
                 * @property {string|null} [status] CaAnalysisModel status
                 * @property {string|null} [errorMessage] CaAnalysisModel errorMessage
                 * @property {string|null} [traceback] CaAnalysisModel traceback
                 * @property {number|null} [notifyResultTime] CaAnalysisModel notifyResultTime
                 * @property {number|null} [createTime] CaAnalysisModel createTime
                 * @property {number|null} [updateTime] CaAnalysisModel updateTime
                 * @property {string|null} [projectId] CaAnalysisModel projectId
                 * @property {string|null} [reportId] CaAnalysisModel reportId
                 * @property {merico.analysis.gateway.AnalysisMessage.Readiness|null} [readiness] CaAnalysisModel readiness
                 * @property {string|null} [errorType] CaAnalysisModel errorType
                 */

        /**
                 * Constructs a new CaAnalysisModel.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a CaAnalysisModel.
                 * @implements ICaAnalysisModel
                 * @constructor
                 * @param {merico.analysis.gateway.ICaAnalysisModel=} [properties] Properties to set
                 */
        function CaAnalysisModel(properties) {
          if (properties)
          {for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          {if (properties[keys[i]] != null)
          {this[keys[i]] = properties[keys[i]];}}}
        }

        /**
                 * CaAnalysisModel id.
                 * @member {string} id
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.id = '';

        /**
                 * CaAnalysisModel type.
                 * @member {string} type
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.type = '';

        /**
                 * CaAnalysisModel progress.
                 * @member {number} progress
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.progress = 0;

        /**
                 * CaAnalysisModel status.
                 * @member {string} status
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.status = '';

        /**
                 * CaAnalysisModel errorMessage.
                 * @member {string} errorMessage
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.errorMessage = '';

        /**
                 * CaAnalysisModel traceback.
                 * @member {string} traceback
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.traceback = '';

        /**
                 * CaAnalysisModel notifyResultTime.
                 * @member {number} notifyResultTime
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.notifyResultTime = 0;

        /**
                 * CaAnalysisModel createTime.
                 * @member {number} createTime
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.createTime = 0;

        /**
                 * CaAnalysisModel updateTime.
                 * @member {number} updateTime
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.updateTime = 0;

        /**
                 * CaAnalysisModel projectId.
                 * @member {string} projectId
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.projectId = '';

        /**
                 * CaAnalysisModel reportId.
                 * @member {string} reportId
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.reportId = '';

        /**
                 * CaAnalysisModel readiness.
                 * @member {merico.analysis.gateway.AnalysisMessage.Readiness} readiness
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.readiness = 0;

        /**
                 * CaAnalysisModel errorType.
                 * @member {string} errorType
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 */
        CaAnalysisModel.prototype.errorType = '';

        /**
                 * Creates a new CaAnalysisModel instance using the specified properties.
                 * @function create
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {merico.analysis.gateway.ICaAnalysisModel=} [properties] Properties to set
                 * @returns {merico.analysis.gateway.CaAnalysisModel} CaAnalysisModel instance
                 */
        CaAnalysisModel.create = function create(properties) {
          return new CaAnalysisModel(properties);
        };

        /**
                 * Encodes the specified CaAnalysisModel message. Does not implicitly {@link merico.analysis.gateway.CaAnalysisModel.verify|verify} messages.
                 * @function encode
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {merico.analysis.gateway.ICaAnalysisModel} message CaAnalysisModel message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CaAnalysisModel.encode = function encode(message, writer) {
          if (!writer)
          {writer = $Writer.create();}
          if (message.id != null && message.hasOwnProperty('id'))
          {writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);}
          if (message.type != null && message.hasOwnProperty('type'))
          {writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);}
          if (message.progress != null && message.hasOwnProperty('progress'))
          {writer.uint32(/* id 3, wireType 5 =*/29).float(message.progress);}
          if (message.status != null && message.hasOwnProperty('status'))
          {writer.uint32(/* id 4, wireType 2 =*/34).string(message.status);}
          if (message.errorMessage != null && message.hasOwnProperty('errorMessage'))
          {writer.uint32(/* id 5, wireType 2 =*/42).string(message.errorMessage);}
          if (message.traceback != null && message.hasOwnProperty('traceback'))
          {writer.uint32(/* id 6, wireType 2 =*/50).string(message.traceback);}
          if (message.notifyResultTime != null && message.hasOwnProperty('notifyResultTime'))
          {writer.uint32(/* id 7, wireType 0 =*/56).int32(message.notifyResultTime);}
          if (message.createTime != null && message.hasOwnProperty('createTime'))
          {writer.uint32(/* id 8, wireType 0 =*/64).int32(message.createTime);}
          if (message.updateTime != null && message.hasOwnProperty('updateTime'))
          {writer.uint32(/* id 9, wireType 0 =*/72).int32(message.updateTime);}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {writer.uint32(/* id 10, wireType 2 =*/82).string(message.projectId);}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {writer.uint32(/* id 11, wireType 2 =*/90).string(message.reportId);}
          if (message.readiness != null && message.hasOwnProperty('readiness'))
          {writer.uint32(/* id 12, wireType 0 =*/96).int32(message.readiness);}
          if (message.errorType != null && message.hasOwnProperty('errorType'))
          {writer.uint32(/* id 13, wireType 2 =*/106).string(message.errorType);}
          return writer;
        };

        /**
                 * Encodes the specified CaAnalysisModel message, length delimited. Does not implicitly {@link merico.analysis.gateway.CaAnalysisModel.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {merico.analysis.gateway.ICaAnalysisModel} message CaAnalysisModel message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
        CaAnalysisModel.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };

        /**
                 * Decodes a CaAnalysisModel message from the specified reader or buffer.
                 * @function decode
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {merico.analysis.gateway.CaAnalysisModel} CaAnalysisModel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CaAnalysisModel.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
          {reader = $Reader.create(reader);}
          var end = length === undefined ? reader.len : reader.pos + length; var message = new $root.merico.analysis.gateway.CaAnalysisModel();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.type = reader.string();
                break;
              case 3:
                message.progress = reader.float();
                break;
              case 4:
                message.status = reader.string();
                break;
              case 5:
                message.errorMessage = reader.string();
                break;
              case 6:
                message.traceback = reader.string();
                break;
              case 7:
                message.notifyResultTime = reader.int32();
                break;
              case 8:
                message.createTime = reader.int32();
                break;
              case 9:
                message.updateTime = reader.int32();
                break;
              case 10:
                message.projectId = reader.string();
                break;
              case 11:
                message.reportId = reader.string();
                break;
              case 12:
                message.readiness = reader.int32();
                break;
              case 13:
                message.errorType = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };

        /**
                 * Decodes a CaAnalysisModel message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {merico.analysis.gateway.CaAnalysisModel} CaAnalysisModel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
        CaAnalysisModel.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
          {reader = new $Reader(reader);}
          return this.decode(reader, reader.uint32());
        };

        /**
                 * Verifies a CaAnalysisModel message.
                 * @function verify
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
        CaAnalysisModel.verify = function verify(message) {
          if (typeof message !== 'object' || message === null)
          {return 'object expected';}
          if (message.id != null && message.hasOwnProperty('id'))
          {if (!$util.isString(message.id))
          {return 'id: string expected';}}
          if (message.type != null && message.hasOwnProperty('type'))
          {if (!$util.isString(message.type))
          {return 'type: string expected';}}
          if (message.progress != null && message.hasOwnProperty('progress'))
          {if (typeof message.progress !== 'number')
          {return 'progress: number expected';}}
          if (message.status != null && message.hasOwnProperty('status'))
          {if (!$util.isString(message.status))
          {return 'status: string expected';}}
          if (message.errorMessage != null && message.hasOwnProperty('errorMessage'))
          {if (!$util.isString(message.errorMessage))
          {return 'errorMessage: string expected';}}
          if (message.traceback != null && message.hasOwnProperty('traceback'))
          {if (!$util.isString(message.traceback))
          {return 'traceback: string expected';}}
          if (message.notifyResultTime != null && message.hasOwnProperty('notifyResultTime'))
          {if (!$util.isInteger(message.notifyResultTime))
          {return 'notifyResultTime: integer expected';}}
          if (message.createTime != null && message.hasOwnProperty('createTime'))
          {if (!$util.isInteger(message.createTime))
          {return 'createTime: integer expected';}}
          if (message.updateTime != null && message.hasOwnProperty('updateTime'))
          {if (!$util.isInteger(message.updateTime))
          {return 'updateTime: integer expected';}}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {if (!$util.isString(message.projectId))
          {return 'projectId: string expected';}}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {if (!$util.isString(message.reportId))
          {return 'reportId: string expected';}}
          if (message.readiness != null && message.hasOwnProperty('readiness'))
          {switch (message.readiness) {
            default:
              return 'readiness: enum value expected';
            case 0:
            case 8:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10:
            case 11:
            case 1:
            case 2:
            case 7:
            case 3:
            case 20:
              break;
          }}
          if (message.errorType != null && message.hasOwnProperty('errorType'))
          {if (!$util.isString(message.errorType))
          {return 'errorType: string expected';}}
          return null;
        };

        /**
                 * Creates a CaAnalysisModel message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {merico.analysis.gateway.CaAnalysisModel} CaAnalysisModel
                 */
        CaAnalysisModel.fromObject = function fromObject(object) {
          if (object instanceof $root.merico.analysis.gateway.CaAnalysisModel)
          {return object;}
          var message = new $root.merico.analysis.gateway.CaAnalysisModel();
          if (object.id != null)
          {message.id = String(object.id);}
          if (object.type != null)
          {message.type = String(object.type);}
          if (object.progress != null)
          {message.progress = Number(object.progress);}
          if (object.status != null)
          {message.status = String(object.status);}
          if (object.errorMessage != null)
          {message.errorMessage = String(object.errorMessage);}
          if (object.traceback != null)
          {message.traceback = String(object.traceback);}
          if (object.notifyResultTime != null)
          {message.notifyResultTime = object.notifyResultTime | 0;}
          if (object.createTime != null)
          {message.createTime = object.createTime | 0;}
          if (object.updateTime != null)
          {message.updateTime = object.updateTime | 0;}
          if (object.projectId != null)
          {message.projectId = String(object.projectId);}
          if (object.reportId != null)
          {message.reportId = String(object.reportId);}
          switch (object.readiness) {
            case 'UNKNOWN':
            case 0:
              message.readiness = 0;
              break;
            case 'NOT_INIT':
            case 8:
              message.readiness = 8;
              break;
            case 'WAITING':
            case 4:
              message.readiness = 4;
              break;
            case 'AUTH_REQUIRE':
            case 5:
              message.readiness = 5;
              break;
            case 'NOT_REPO':
            case 6:
              message.readiness = 6;
              break;
            case 'PRE_UNDERWAY':
            case 9:
              message.readiness = 9;
              break;
            case 'PRE_READY':
            case 10:
              message.readiness = 10;
              break;
            case 'UNDERWAY':
            case 11:
              message.readiness = 11;
              break;
            case 'READY':
            case 1:
              message.readiness = 1;
              break;
            case 'FAILURE':
            case 2:
              message.readiness = 2;
              break;
            case 'PULLING':
            case 7:
              message.readiness = 7;
              break;
            case 'UNSUPPORTED':
            case 3:
              message.readiness = 3;
              break;
            case 'DUPLICATE':
            case 20:
              message.readiness = 20;
              break;
          }
          if (object.errorType != null)
          {message.errorType = String(object.errorType);}
          return message;
        };

        /**
                 * Creates a plain object from a CaAnalysisModel message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @static
                 * @param {merico.analysis.gateway.CaAnalysisModel} message CaAnalysisModel
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
        CaAnalysisModel.toObject = function toObject(message, options) {
          if (!options)
          {options = {};}
          var object = {};
          if (options.defaults) {
            object.id = '';
            object.type = '';
            object.progress = 0;
            object.status = '';
            object.errorMessage = '';
            object.traceback = '';
            object.notifyResultTime = 0;
            object.createTime = 0;
            object.updateTime = 0;
            object.projectId = '';
            object.reportId = '';
            object.readiness = options.enums === String ? 'UNKNOWN' : 0;
            object.errorType = '';
          }
          if (message.id != null && message.hasOwnProperty('id'))
          {object.id = message.id;}
          if (message.type != null && message.hasOwnProperty('type'))
          {object.type = message.type;}
          if (message.progress != null && message.hasOwnProperty('progress'))
          {object.progress = options.json && !isFinite(message.progress) ? String(message.progress) : message.progress;}
          if (message.status != null && message.hasOwnProperty('status'))
          {object.status = message.status;}
          if (message.errorMessage != null && message.hasOwnProperty('errorMessage'))
          {object.errorMessage = message.errorMessage;}
          if (message.traceback != null && message.hasOwnProperty('traceback'))
          {object.traceback = message.traceback;}
          if (message.notifyResultTime != null && message.hasOwnProperty('notifyResultTime'))
          {object.notifyResultTime = message.notifyResultTime;}
          if (message.createTime != null && message.hasOwnProperty('createTime'))
          {object.createTime = message.createTime;}
          if (message.updateTime != null && message.hasOwnProperty('updateTime'))
          {object.updateTime = message.updateTime;}
          if (message.projectId != null && message.hasOwnProperty('projectId'))
          {object.projectId = message.projectId;}
          if (message.reportId != null && message.hasOwnProperty('reportId'))
          {object.reportId = message.reportId;}
          if (message.readiness != null && message.hasOwnProperty('readiness'))
          {object.readiness = options.enums === String ? $root.merico.analysis.gateway.AnalysisMessage.Readiness[message.readiness] : message.readiness;}
          if (message.errorType != null && message.hasOwnProperty('errorType'))
          {object.errorType = message.errorType;}
          return object;
        };

        /**
                 * Converts this CaAnalysisModel to JSON.
                 * @function toJSON
                 * @memberof merico.analysis.gateway.CaAnalysisModel
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
        CaAnalysisModel.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CaAnalysisModel;
      })();

      gateway.CodeAnalytics = (function() {

        /**
                 * Constructs a new CodeAnalytics service.
                 * @memberof merico.analysis.gateway
                 * @classdesc Represents a CodeAnalytics
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
        function CodeAnalytics(rpcImpl, requestDelimited, responseDelimited) {
          $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (CodeAnalytics.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = CodeAnalytics;

        /**
                 * Creates new CodeAnalytics service using the specified rpc implementation.
                 * @function create
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {CodeAnalytics} RPC service. Useful where requests and/or responses are streamed.
                 */
        CodeAnalytics.create = function create(rpcImpl, requestDelimited, responseDelimited) {
          return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
                 * Callback as used by {@link merico.analysis.gateway.CodeAnalytics#submitRepo}.
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @typedef SubmitRepoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.analysis.gateway.SubmitRepoResponse} [response] SubmitRepoResponse
                 */

        /**
                 * Calls SubmitRepo.
                 * @function submitRepo
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} request SubmitRepoRequest message or plain object
                 * @param {merico.analysis.gateway.CodeAnalytics.SubmitRepoCallback} callback Node-style callback called with the error, if any, and SubmitRepoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(CodeAnalytics.prototype.submitRepo = function submitRepo(request, callback) {
          return this.rpcCall(submitRepo, $root.merico.analysis.gateway.SubmitRepoRequest, $root.merico.analysis.gateway.SubmitRepoResponse, request, callback);
        }, 'name', { value: 'SubmitRepo' });

        /**
                 * Calls SubmitRepo.
                 * @function submitRepo
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} request SubmitRepoRequest message or plain object
                 * @returns {Promise<merico.analysis.gateway.SubmitRepoResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.analysis.gateway.CodeAnalytics#getVersion}.
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @typedef GetVersionCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.analysis.gateway.GetVersionResponse} [response] GetVersionResponse
                 */

        /**
                 * Calls GetVersion.
                 * @function getVersion
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.IGetVersionRequest} request GetVersionRequest message or plain object
                 * @param {merico.analysis.gateway.CodeAnalytics.GetVersionCallback} callback Node-style callback called with the error, if any, and GetVersionResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(CodeAnalytics.prototype.getVersion = function getVersion(request, callback) {
          return this.rpcCall(getVersion, $root.merico.analysis.gateway.GetVersionRequest, $root.merico.analysis.gateway.GetVersionResponse, request, callback);
        }, 'name', { value: 'GetVersion' });

        /**
                 * Calls GetVersion.
                 * @function getVersion
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.IGetVersionRequest} request GetVersionRequest message or plain object
                 * @returns {Promise<merico.analysis.gateway.GetVersionResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.analysis.gateway.CodeAnalytics#terminateAnalysis}.
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @typedef TerminateAnalysisCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.analysis.gateway.TerminateAnalysisResponse} [response] TerminateAnalysisResponse
                 */

        /**
                 * Calls TerminateAnalysis.
                 * @function terminateAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ITerminateAnalysisRequest} request TerminateAnalysisRequest message or plain object
                 * @param {merico.analysis.gateway.CodeAnalytics.TerminateAnalysisCallback} callback Node-style callback called with the error, if any, and TerminateAnalysisResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(CodeAnalytics.prototype.terminateAnalysis = function terminateAnalysis(request, callback) {
          return this.rpcCall(terminateAnalysis, $root.merico.analysis.gateway.TerminateAnalysisRequest, $root.merico.analysis.gateway.TerminateAnalysisResponse, request, callback);
        }, 'name', { value: 'TerminateAnalysis' });

        /**
                 * Calls TerminateAnalysis.
                 * @function terminateAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ITerminateAnalysisRequest} request TerminateAnalysisRequest message or plain object
                 * @returns {Promise<merico.analysis.gateway.TerminateAnalysisResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.analysis.gateway.CodeAnalytics#submitAspectAnalysis}.
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @typedef SubmitAspectAnalysisCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.analysis.gateway.SubmitRepoResponse} [response] SubmitRepoResponse
                 */

        /**
                 * Calls SubmitAspectAnalysis.
                 * @function submitAspectAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} request SubmitRepoRequest message or plain object
                 * @param {merico.analysis.gateway.CodeAnalytics.SubmitAspectAnalysisCallback} callback Node-style callback called with the error, if any, and SubmitRepoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(CodeAnalytics.prototype.submitAspectAnalysis = function submitAspectAnalysis(request, callback) {
          return this.rpcCall(submitAspectAnalysis, $root.merico.analysis.gateway.SubmitRepoRequest, $root.merico.analysis.gateway.SubmitRepoResponse, request, callback);
        }, 'name', { value: 'SubmitAspectAnalysis' });

        /**
                 * Calls SubmitAspectAnalysis.
                 * @function submitAspectAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} request SubmitRepoRequest message or plain object
                 * @returns {Promise<merico.analysis.gateway.SubmitRepoResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.analysis.gateway.CodeAnalytics#submitCodeQualityAnalysis}.
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @typedef SubmitCodeQualityAnalysisCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.analysis.gateway.SubmitRepoResponse} [response] SubmitRepoResponse
                 */

        /**
                 * Calls SubmitCodeQualityAnalysis.
                 * @function submitCodeQualityAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} request SubmitRepoRequest message or plain object
                 * @param {merico.analysis.gateway.CodeAnalytics.SubmitCodeQualityAnalysisCallback} callback Node-style callback called with the error, if any, and SubmitRepoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(CodeAnalytics.prototype.submitCodeQualityAnalysis = function submitCodeQualityAnalysis(request, callback) {
          return this.rpcCall(submitCodeQualityAnalysis, $root.merico.analysis.gateway.SubmitRepoRequest, $root.merico.analysis.gateway.SubmitRepoResponse, request, callback);
        }, 'name', { value: 'SubmitCodeQualityAnalysis' });

        /**
                 * Calls SubmitCodeQualityAnalysis.
                 * @function submitCodeQualityAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ISubmitRepoRequest} request SubmitRepoRequest message or plain object
                 * @returns {Promise<merico.analysis.gateway.SubmitRepoResponse>} Promise
                 * @variation 2
                 */

        /**
                 * Callback as used by {@link merico.analysis.gateway.CodeAnalytics#lookupAnalysis}.
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @typedef LookupAnalysisCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {merico.analysis.gateway.LookupAnalysisResponse} [response] LookupAnalysisResponse
                 */

        /**
                 * Calls LookupAnalysis.
                 * @function lookupAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ILookupAnalysisRequest} request LookupAnalysisRequest message or plain object
                 * @param {merico.analysis.gateway.CodeAnalytics.LookupAnalysisCallback} callback Node-style callback called with the error, if any, and LookupAnalysisResponse
                 * @returns {undefined}
                 * @variation 1
                 */
        Object.defineProperty(CodeAnalytics.prototype.lookupAnalysis = function lookupAnalysis(request, callback) {
          return this.rpcCall(lookupAnalysis, $root.merico.analysis.gateway.LookupAnalysisRequest, $root.merico.analysis.gateway.LookupAnalysisResponse, request, callback);
        }, 'name', { value: 'LookupAnalysis' });

        /**
                 * Calls LookupAnalysis.
                 * @function lookupAnalysis
                 * @memberof merico.analysis.gateway.CodeAnalytics
                 * @instance
                 * @param {merico.analysis.gateway.ILookupAnalysisRequest} request LookupAnalysisRequest message or plain object
                 * @returns {Promise<merico.analysis.gateway.LookupAnalysisResponse>} Promise
                 * @variation 2
                 */

        return CodeAnalytics;
      })();

      return gateway;
    })();

    return analysis;
  })();

  return merico;
})();

module.exports = $root;
